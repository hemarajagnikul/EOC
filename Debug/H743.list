
H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064cc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006764  08006764  00016764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800678c  0800678c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800678c  0800678c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  24000000  08006794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  24000048  080067dc  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240001e8  080067dc  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124c0  00000000  00000000  00020076  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020db  00000000  00000000  00032536  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a18  00000000  00000000  00034618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  00035030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034670  00000000  00000000  00035960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c9c  00000000  00000000  00069fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00151463  00000000  00000000  00073c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c50cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000283c  00000000  00000000  001c514c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000048 	.word	0x24000048
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800674c 	.word	0x0800674c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400004c 	.word	0x2400004c
 80002d4:	0800674c 	.word	0x0800674c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <com_logic>:
int hall_out1;
int hall_out2;
int hall_out3;
int com_logic( int hall_in[],int hall_out[]);  //array cannot be gn to array (static array)
 int com_logic( int hall_in[],int hall_out[])
 {
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	 if((hall_in[0]==0)&& (hall_in[1]==0)&&(hall_in[2]==0))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d113      	bne.n	8000612 <com_logic+0x3a>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3304      	adds	r3, #4
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d10e      	bne.n	8000612 <com_logic+0x3a>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3308      	adds	r3, #8
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d109      	bne.n	8000612 <com_logic+0x3a>
	 {
		 hall_out1=0;
 80005fe:	4b66      	ldr	r3, [pc, #408]	; (8000798 <com_logic+0x1c0>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
	 	hall_out2=0;
 8000604:	4b65      	ldr	r3, [pc, #404]	; (800079c <com_logic+0x1c4>)
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
	 	hall_out3=0;
 800060a:	4b65      	ldr	r3, [pc, #404]	; (80007a0 <com_logic+0x1c8>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	e0ac      	b.n	800076c <com_logic+0x194>
	 	//hall_out3=0;
	 }


	 else if((hall_in[0]==0) && (hall_in[1]==0) && (hall_in[2]==1))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d114      	bne.n	8000644 <com_logic+0x6c>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3304      	adds	r3, #4
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d10f      	bne.n	8000644 <com_logic+0x6c>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3308      	adds	r3, #8
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d10a      	bne.n	8000644 <com_logic+0x6c>
	 {
	 		hall_out1=0;
 800062e:	4b5a      	ldr	r3, [pc, #360]	; (8000798 <com_logic+0x1c0>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
	 		hall_out2=-1;
 8000634:	4b59      	ldr	r3, [pc, #356]	; (800079c <com_logic+0x1c4>)
 8000636:	f04f 32ff 	mov.w	r2, #4294967295
 800063a:	601a      	str	r2, [r3, #0]
	 		hall_out3=1;
 800063c:	4b58      	ldr	r3, [pc, #352]	; (80007a0 <com_logic+0x1c8>)
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	e093      	b.n	800076c <com_logic+0x194>
	 }
	 else if((hall_in[0]==0) && (hall_in[1]==1)&& (hall_in[2]==0))
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d114      	bne.n	8000676 <com_logic+0x9e>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3304      	adds	r3, #4
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d10f      	bne.n	8000676 <com_logic+0x9e>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3308      	adds	r3, #8
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d10a      	bne.n	8000676 <com_logic+0x9e>
	 		{
	 			hall_out1=-1;
 8000660:	4b4d      	ldr	r3, [pc, #308]	; (8000798 <com_logic+0x1c0>)
 8000662:	f04f 32ff 	mov.w	r2, #4294967295
 8000666:	601a      	str	r2, [r3, #0]
	 			hall_out2=1;
 8000668:	4b4c      	ldr	r3, [pc, #304]	; (800079c <com_logic+0x1c4>)
 800066a:	2201      	movs	r2, #1
 800066c:	601a      	str	r2, [r3, #0]
	 			hall_out3=0;
 800066e:	4b4c      	ldr	r3, [pc, #304]	; (80007a0 <com_logic+0x1c8>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	e07a      	b.n	800076c <com_logic+0x194>

	 		}
	 else if((hall_in[0]==0) && (hall_in[1]==1 )&&( hall_in[2]==1))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d114      	bne.n	80006a8 <com_logic+0xd0>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3304      	adds	r3, #4
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d10f      	bne.n	80006a8 <com_logic+0xd0>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3308      	adds	r3, #8
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d10a      	bne.n	80006a8 <com_logic+0xd0>
	 		{
	 			hall_out1=-1;
 8000692:	4b41      	ldr	r3, [pc, #260]	; (8000798 <com_logic+0x1c0>)
 8000694:	f04f 32ff 	mov.w	r2, #4294967295
 8000698:	601a      	str	r2, [r3, #0]
	 			hall_out2=0;
 800069a:	4b40      	ldr	r3, [pc, #256]	; (800079c <com_logic+0x1c4>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
	 			hall_out3=1;
 80006a0:	4b3f      	ldr	r3, [pc, #252]	; (80007a0 <com_logic+0x1c8>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	e061      	b.n	800076c <com_logic+0x194>
	 	}
	 else if((hall_in[0]==1) && (hall_in[1]==0) && (hall_in[2]==0))
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d114      	bne.n	80006da <com_logic+0x102>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3304      	adds	r3, #4
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d10f      	bne.n	80006da <com_logic+0x102>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3308      	adds	r3, #8
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d10a      	bne.n	80006da <com_logic+0x102>
	 		{
	 			hall_out1=1;
 80006c4:	4b34      	ldr	r3, [pc, #208]	; (8000798 <com_logic+0x1c0>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
	 			hall_out2=0;
 80006ca:	4b34      	ldr	r3, [pc, #208]	; (800079c <com_logic+0x1c4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
	 			hall_out3=-1;
 80006d0:	4b33      	ldr	r3, [pc, #204]	; (80007a0 <com_logic+0x1c8>)
 80006d2:	f04f 32ff 	mov.w	r2, #4294967295
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	e048      	b.n	800076c <com_logic+0x194>
	 		}
	 else if((hall_in[0]==1) &&( hall_in[1]==0) && (hall_in[2]==1))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d114      	bne.n	800070c <com_logic+0x134>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3304      	adds	r3, #4
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d10f      	bne.n	800070c <com_logic+0x134>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3308      	adds	r3, #8
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d10a      	bne.n	800070c <com_logic+0x134>
	 		{
	 			hall_out1=1;
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <com_logic+0x1c0>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]
	 			hall_out2=-1;
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <com_logic+0x1c4>)
 80006fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000702:	601a      	str	r2, [r3, #0]
	 			hall_out3=0;
 8000704:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <com_logic+0x1c8>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	e02f      	b.n	800076c <com_logic+0x194>
	 		}
	 else if((hall_in[0]==1) && (hall_in[1]==1) &&( hall_in[2]==0))
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d114      	bne.n	800073e <com_logic+0x166>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3304      	adds	r3, #4
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d10f      	bne.n	800073e <com_logic+0x166>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3308      	adds	r3, #8
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d10a      	bne.n	800073e <com_logic+0x166>
	 		{
	 			hall_out1=0;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <com_logic+0x1c0>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
	 			hall_out2=1;
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <com_logic+0x1c4>)
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]
	 			hall_out3=-1;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <com_logic+0x1c8>)
 8000736:	f04f 32ff 	mov.w	r2, #4294967295
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	e016      	b.n	800076c <com_logic+0x194>
	 		}
	 else if((hall_in[0]==1)&& (hall_in[1]==1) && (hall_in[2]==1))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d112      	bne.n	800076c <com_logic+0x194>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3304      	adds	r3, #4
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d10d      	bne.n	800076c <com_logic+0x194>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3308      	adds	r3, #8
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d108      	bne.n	800076c <com_logic+0x194>
	 		{
	 			hall_out1=0;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <com_logic+0x1c0>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
	 			hall_out2=0;
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <com_logic+0x1c4>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
	 			hall_out3=0;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <com_logic+0x1c8>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
	 		}
	 hall_out[0]=hall_out1;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <com_logic+0x1c0>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	601a      	str	r2, [r3, #0]
	 hall_out[1]=hall_out2;
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	3304      	adds	r3, #4
 8000778:	4a08      	ldr	r2, [pc, #32]	; (800079c <com_logic+0x1c4>)
 800077a:	6812      	ldr	r2, [r2, #0]
 800077c:	601a      	str	r2, [r3, #0]
	 hall_out[2]=hall_out3;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	3308      	adds	r3, #8
 8000782:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <com_logic+0x1c8>)
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	601a      	str	r2, [r3, #0]



	 return hall_out;
 8000788:	683b      	ldr	r3, [r7, #0]
 }
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	24000074 	.word	0x24000074
 800079c:	24000078 	.word	0x24000078
 80007a0:	24000064 	.word	0x24000064

080007a4 <control>:
float pos_P;
float pos_I;
float control(float Set_pt,float Current_position,float pos_P,float pos_I,float Output[]);

float control(float Set_pt,float Current_position,float pos_P,float pos_I,float Output[])
{
 80007a4:	b480      	push	{r7}
 80007a6:	b087      	sub	sp, #28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80007ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80007b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80007b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80007ba:	6078      	str	r0, [r7, #4]
	Error=Set_pt-Current_position;
 80007bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80007c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80007c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <control+0xb0>)
 80007ca:	edc3 7a00 	vstr	s15, [r3]
	P_controller=Error*pos_P;
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <control+0xb0>)
 80007d0:	ed93 7a00 	vldr	s14, [r3]
 80007d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80007d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <control+0xb4>)
 80007de:	edc3 7a00 	vstr	s15, [r3]
	Add_err=Error+Prev_Error;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <control+0xb0>)
 80007e4:	ed93 7a00 	vldr	s14, [r3]
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <control+0xb8>)
 80007ea:	edd3 7a00 	vldr	s15, [r3]
 80007ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <control+0xbc>)
 80007f4:	edc3 7a00 	vstr	s15, [r3]
	I_controller=Add_err*pos_I ;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <control+0xbc>)
 80007fa:	ed93 7a00 	vldr	s14, [r3]
 80007fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <control+0xc0>)
 8000808:	edc3 7a00 	vstr	s15, [r3]
	PI_controller=P_controller+I_controller;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <control+0xb4>)
 800080e:	ed93 7a00 	vldr	s14, [r3]
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <control+0xc0>)
 8000814:	edd3 7a00 	vldr	s15, [r3]
 8000818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <control+0xc4>)
 800081e:	edc3 7a00 	vstr	s15, [r3]
    Output[0]=PI_controller;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <control+0xc4>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	601a      	str	r2, [r3, #0]
    Output[1]=Error;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3304      	adds	r3, #4
 800082e:	4a09      	ldr	r2, [pc, #36]	; (8000854 <control+0xb0>)
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	601a      	str	r2, [r3, #0]
    Output[2]=Current_position;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3308      	adds	r3, #8
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	601a      	str	r2, [r3, #0]
	return PI_controller;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <control+0xc4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	ee07 3a90 	vmov	s15, r3
}
 8000844:	eeb0 0a67 	vmov.f32	s0, s15
 8000848:	371c      	adds	r7, #28
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	24000098 	.word	0x24000098
 8000858:	24000088 	.word	0x24000088
 800085c:	24000000 	.word	0x24000000
 8000860:	2400008c 	.word	0x2400008c
 8000864:	24000094 	.word	0x24000094
 8000868:	24000090 	.word	0x24000090

0800086c <main>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);

int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  
  HAL_Init();
 8000870:	f000 fcfa 	bl	8001268 <HAL_Init>

  SystemClock_Config();
 8000874:	f000 f918 	bl	8000aa8 <SystemClock_Config>



   MX_GPIO_Init();
 8000878:	f000 fa46 	bl	8000d08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800087c:	f000 f9ac 	bl	8000bd8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000880:	f000 f9f6 	bl	8000c70 <MX_USART3_UART_Init>

  pos_loop=control(Set_pt,Current_position,pos_P,pos_I,Output);
 8000884:	4b61      	ldr	r3, [pc, #388]	; (8000a0c <main+0x1a0>)
 8000886:	edd3 7a00 	vldr	s15, [r3]
 800088a:	4b61      	ldr	r3, [pc, #388]	; (8000a10 <main+0x1a4>)
 800088c:	ed93 7a00 	vldr	s14, [r3]
 8000890:	4b60      	ldr	r3, [pc, #384]	; (8000a14 <main+0x1a8>)
 8000892:	edd3 6a00 	vldr	s13, [r3]
 8000896:	4b60      	ldr	r3, [pc, #384]	; (8000a18 <main+0x1ac>)
 8000898:	ed93 6a00 	vldr	s12, [r3]
 800089c:	485f      	ldr	r0, [pc, #380]	; (8000a1c <main+0x1b0>)
 800089e:	eef0 1a46 	vmov.f32	s3, s12
 80008a2:	eeb0 1a66 	vmov.f32	s2, s13
 80008a6:	eef0 0a47 	vmov.f32	s1, s14
 80008aa:	eeb0 0a67 	vmov.f32	s0, s15
 80008ae:	f7ff ff79 	bl	80007a4 <control>
 80008b2:	eef0 7a40 	vmov.f32	s15, s0
 80008b6:	4b5a      	ldr	r3, [pc, #360]	; (8000a20 <main+0x1b4>)
 80008b8:	edc3 7a00 	vstr	s15, [r3]
  ref_speed=Output[0];
 80008bc:	4b57      	ldr	r3, [pc, #348]	; (8000a1c <main+0x1b0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a58      	ldr	r2, [pc, #352]	; (8000a24 <main+0x1b8>)
 80008c2:	6013      	str	r3, [r2, #0]
  deriv=derivative(Output[2],Current_position,time);
 80008c4:	4b55      	ldr	r3, [pc, #340]	; (8000a1c <main+0x1b0>)
 80008c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80008ca:	4b51      	ldr	r3, [pc, #324]	; (8000a10 <main+0x1a4>)
 80008cc:	ed93 7a00 	vldr	s14, [r3]
 80008d0:	4b55      	ldr	r3, [pc, #340]	; (8000a28 <main+0x1bc>)
 80008d2:	edd3 6a00 	vldr	s13, [r3]
 80008d6:	eeb0 1a66 	vmov.f32	s2, s13
 80008da:	eef0 0a47 	vmov.f32	s1, s14
 80008de:	eeb0 0a67 	vmov.f32	s0, s15
 80008e2:	f000 f8bd 	bl	8000a60 <derivative>
 80008e6:	eef0 7a40 	vmov.f32	s15, s0
 80008ea:	4b50      	ldr	r3, [pc, #320]	; (8000a2c <main+0x1c0>)
 80008ec:	edc3 7a00 	vstr	s15, [r3]

  speed_loop=control(pos_loop,deriv,speed_P,speed_I,Output);
 80008f0:	4b4b      	ldr	r3, [pc, #300]	; (8000a20 <main+0x1b4>)
 80008f2:	edd3 7a00 	vldr	s15, [r3]
 80008f6:	4b4d      	ldr	r3, [pc, #308]	; (8000a2c <main+0x1c0>)
 80008f8:	ed93 7a00 	vldr	s14, [r3]
 80008fc:	4b4c      	ldr	r3, [pc, #304]	; (8000a30 <main+0x1c4>)
 80008fe:	edd3 6a00 	vldr	s13, [r3]
 8000902:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <main+0x1c8>)
 8000904:	ed93 6a00 	vldr	s12, [r3]
 8000908:	4844      	ldr	r0, [pc, #272]	; (8000a1c <main+0x1b0>)
 800090a:	eef0 1a46 	vmov.f32	s3, s12
 800090e:	eeb0 1a66 	vmov.f32	s2, s13
 8000912:	eef0 0a47 	vmov.f32	s1, s14
 8000916:	eeb0 0a67 	vmov.f32	s0, s15
 800091a:	f7ff ff43 	bl	80007a4 <control>
 800091e:	eef0 7a40 	vmov.f32	s15, s0
 8000922:	4b45      	ldr	r3, [pc, #276]	; (8000a38 <main+0x1cc>)
 8000924:	edc3 7a00 	vstr	s15, [r3]


  current_loop=control(current_in,speed_loop,curr_P,curr_I,Output);
 8000928:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <main+0x1d0>)
 800092a:	edd3 7a00 	vldr	s15, [r3]
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <main+0x1cc>)
 8000930:	ed93 7a00 	vldr	s14, [r3]
 8000934:	4b42      	ldr	r3, [pc, #264]	; (8000a40 <main+0x1d4>)
 8000936:	edd3 6a00 	vldr	s13, [r3]
 800093a:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <main+0x1d8>)
 800093c:	ed93 6a00 	vldr	s12, [r3]
 8000940:	4836      	ldr	r0, [pc, #216]	; (8000a1c <main+0x1b0>)
 8000942:	eef0 1a46 	vmov.f32	s3, s12
 8000946:	eeb0 1a66 	vmov.f32	s2, s13
 800094a:	eef0 0a47 	vmov.f32	s1, s14
 800094e:	eeb0 0a67 	vmov.f32	s0, s15
 8000952:	f7ff ff27 	bl	80007a4 <control>
 8000956:	eef0 7a40 	vmov.f32	s15, s0
 800095a:	4b3b      	ldr	r3, [pc, #236]	; (8000a48 <main+0x1dc>)
 800095c:	edc3 7a00 	vstr	s15, [r3]

  hall_output=com_logic(input_halls,hall_out);
 8000960:	493a      	ldr	r1, [pc, #232]	; (8000a4c <main+0x1e0>)
 8000962:	483b      	ldr	r0, [pc, #236]	; (8000a50 <main+0x1e4>)
 8000964:	f7ff fe38 	bl	80005d8 <com_logic>
 8000968:	4602      	mov	r2, r0
 800096a:	4b3a      	ldr	r3, [pc, #232]	; (8000a54 <main+0x1e8>)
 800096c:	601a      	str	r2, [r3, #0]

  if(ref_speed<0.0)
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <main+0x1b8>)
 8000970:	edd3 7a00 	vldr	s15, [r3]
 8000974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800097c:	d51e      	bpl.n	80009bc <main+0x150>
  {
	  hall_vec[0]=-1*hall_out[0];
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <main+0x1e0>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	425b      	negs	r3, r3
 8000984:	ee07 3a90 	vmov	s15, r3
 8000988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800098c:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <main+0x1ec>)
 800098e:	edc3 7a00 	vstr	s15, [r3]
	  hall_vec[1]=-1*hall_out[1];
 8000992:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <main+0x1e0>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	425b      	negs	r3, r3
 8000998:	ee07 3a90 	vmov	s15, r3
 800099c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <main+0x1ec>)
 80009a2:	edc3 7a01 	vstr	s15, [r3, #4]
	  hall_vec[2]=-1*hall_out[2];
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <main+0x1e0>)
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	425b      	negs	r3, r3
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <main+0x1ec>)
 80009b6:	edc3 7a02 	vstr	s15, [r3, #8]
 80009ba:	e01a      	b.n	80009f2 <main+0x186>

  }
  else
  {
	  hall_vec[0]=1*hall_out[0];
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <main+0x1e0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <main+0x1ec>)
 80009ca:	edc3 7a00 	vstr	s15, [r3]
	  hall_vec[1]=1*hall_out[1];
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <main+0x1e0>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	ee07 3a90 	vmov	s15, r3
 80009d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <main+0x1ec>)
 80009dc:	edc3 7a01 	vstr	s15, [r3, #4]
	  hall_vec[2]=1*hall_out[2];
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <main+0x1e0>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	ee07 3a90 	vmov	s15, r3
 80009e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <main+0x1ec>)
 80009ee:	edc3 7a02 	vstr	s15, [r3, #8]
  }
  while (1)
  {
HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009f2:	2102      	movs	r1, #2
 80009f4:	4819      	ldr	r0, [pc, #100]	; (8000a5c <main+0x1f0>)
 80009f6:	f000 ffa0 	bl	800193a <HAL_GPIO_TogglePin>
HAL_Delay(200);
 80009fa:	20c8      	movs	r0, #200	; 0xc8
 80009fc:	f000 fcc2 	bl	8001384 <HAL_Delay>

//HAL_UART_Transmit(&huart3,(uint8_t*)data2,len_of_data1,1);

HAL_Delay(300);
 8000a00:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a04:	f000 fcbe 	bl	8001384 <HAL_Delay>
HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a08:	e7f3      	b.n	80009f2 <main+0x186>
 8000a0a:	bf00      	nop
 8000a0c:	24000008 	.word	0x24000008
 8000a10:	2400000c 	.word	0x2400000c
 8000a14:	24000010 	.word	0x24000010
 8000a18:	24000014 	.word	0x24000014
 8000a1c:	24000130 	.word	0x24000130
 8000a20:	24000128 	.word	0x24000128
 8000a24:	24000140 	.word	0x24000140
 8000a28:	24000004 	.word	0x24000004
 8000a2c:	240001e0 	.word	0x240001e0
 8000a30:	24000018 	.word	0x24000018
 8000a34:	2400001c 	.word	0x2400001c
 8000a38:	2400013c 	.word	0x2400013c
 8000a3c:	24000028 	.word	0x24000028
 8000a40:	24000020 	.word	0x24000020
 8000a44:	24000024 	.word	0x24000024
 8000a48:	240001dc 	.word	0x240001dc
 8000a4c:	24000068 	.word	0x24000068
 8000a50:	2400002c 	.word	0x2400002c
 8000a54:	2400012c 	.word	0x2400012c
 8000a58:	24000144 	.word	0x24000144
 8000a5c:	58021000 	.word	0x58021000

08000a60 <derivative>:




float derivative(float Prev_Position,float Current_position,float time)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	ed87 0a03 	vstr	s0, [r7, #12]
 8000a6a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000a6e:	ed87 1a01 	vstr	s2, [r7, #4]

	deriv=(Current_position-Prev_Position)/time;
 8000a72:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a7a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000a7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <derivative+0x44>)
 8000a88:	edc3 7a00 	vstr	s15, [r3]
	return deriv;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <derivative+0x44>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	ee07 3a90 	vmov	s15, r3
}
 8000a94:	eeb0 0a67 	vmov.f32	s0, s15
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	240001e0 	.word	0x240001e0

08000aa8 <SystemClock_Config>:



void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b0cc      	sub	sp, #304	; 0x130
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ab2:	224c      	movs	r2, #76	; 0x4c
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f005 fe40 	bl	800673c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ac0:	2220      	movs	r2, #32
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 fe39 	bl	800673c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4618      	mov	r0, r3
 8000ad0:	23bc      	movs	r3, #188	; 0xbc
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	f005 fe31 	bl	800673c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ada:	2002      	movs	r0, #2
 8000adc:	f000 ff48 	bl	8001970 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	4b3a      	ldr	r3, [pc, #232]	; (8000bd0 <SystemClock_Config+0x128>)
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	4a39      	ldr	r2, [pc, #228]	; (8000bd0 <SystemClock_Config+0x128>)
 8000aec:	f023 0301 	bic.w	r3, r3, #1
 8000af0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000af2:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <SystemClock_Config+0x128>)
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	f003 0201 	and.w	r2, r3, #1
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <SystemClock_Config+0x12c>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b06:	4a33      	ldr	r2, [pc, #204]	; (8000bd4 <SystemClock_Config+0x12c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6193      	str	r3, [r2, #24]
 8000b0e:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <SystemClock_Config+0x12c>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b1e:	bf00      	nop
 8000b20:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <SystemClock_Config+0x12c>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b2c:	d1f8      	bne.n	8000b20 <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3a:	2320      	movs	r3, #32
 8000b3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 ff48 	bl	80019e0 <HAL_RCC_OscConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b56:	f000 fa09 	bl	8000f6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5a:	233f      	movs	r3, #63	; 0x3f
 8000b5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b8a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 fadd 	bl	8002150 <HAL_RCC_ClockConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000b9c:	f000 f9e6 	bl	8000f6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2;
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	2200      	movs	r2, #0
 8000bae:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f001 fe29 	bl	800280c <HAL_RCCEx_PeriphCLKConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000bc0:	f000 f9d4 	bl	8000f6c <Error_Handler>
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	58000400 	.word	0x58000400
 8000bd4:	58024800 	.word	0x58024800

08000bd8 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000bde:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c20:	4811      	ldr	r0, [pc, #68]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c22:	f003 f911 	bl	8003e48 <HAL_UART_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c2c:	f000 f99e 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c34:	f005 fc79 	bl	800652a <HAL_UARTEx_SetTxFifoThreshold>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c3e:	f000 f995 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c46:	f005 fcae 	bl	80065a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c50:	f000 f98c 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c56:	f005 fc2f 	bl	80064b8 <HAL_UARTEx_DisableFifoMode>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c60:	f000 f984 	bl	8000f6c <Error_Handler>
  }


}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	24000150 	.word	0x24000150
 8000c6c:	40004400 	.word	0x40004400

08000c70 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

   huart3.Instance = USART3;
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c76:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <MX_USART3_UART_Init+0x94>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb8:	4811      	ldr	r0, [pc, #68]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cba:	f003 f8c5 	bl	8003e48 <HAL_UART_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cc4:	f000 f952 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	480d      	ldr	r0, [pc, #52]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000ccc:	f005 fc2d 	bl	800652a <HAL_UARTEx_SetTxFifoThreshold>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cd6:	f000 f949 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cde:	f005 fc62 	bl	80065a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce8:	f000 f940 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cee:	f005 fbe3 	bl	80064b8 <HAL_UARTEx_DisableFifoMode>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf8:	f000 f938 	bl	8000f6c <Error_Handler>
  }


}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2400009c 	.word	0x2400009c
 8000d04:	40004800 	.word	0x40004800

08000d08 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08c      	sub	sp, #48	; 0x30
 8000d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	4b8b      	ldr	r3, [pc, #556]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a89      	ldr	r2, [pc, #548]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b87      	ldr	r3, [pc, #540]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3c:	4b83      	ldr	r3, [pc, #524]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	4a82      	ldr	r2, [pc, #520]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4c:	4b7f      	ldr	r3, [pc, #508]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b7c      	ldr	r3, [pc, #496]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	4a7a      	ldr	r2, [pc, #488]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6a:	4b78      	ldr	r3, [pc, #480]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b74      	ldr	r3, [pc, #464]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	4a73      	ldr	r2, [pc, #460]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d88:	4b70      	ldr	r3, [pc, #448]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d96:	4b6d      	ldr	r3, [pc, #436]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a6b      	ldr	r2, [pc, #428]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000d9e:	f043 0308 	orr.w	r3, r3, #8
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b69      	ldr	r3, [pc, #420]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 0308 	and.w	r3, r3, #8
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db4:	4b65      	ldr	r3, [pc, #404]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	4a64      	ldr	r2, [pc, #400]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc4:	4b61      	ldr	r3, [pc, #388]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd2:	4b5e      	ldr	r3, [pc, #376]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	4a5c      	ldr	r2, [pc, #368]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de2:	4b5a      	ldr	r3, [pc, #360]	; (8000f4c <MX_GPIO_Init+0x244>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f244 0101 	movw	r1, #16385	; 0x4001
 8000df6:	4856      	ldr	r0, [pc, #344]	; (8000f50 <MX_GPIO_Init+0x248>)
 8000df8:	f000 fd86 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e02:	4854      	ldr	r0, [pc, #336]	; (8000f54 <MX_GPIO_Init+0x24c>)
 8000e04:	f000 fd80 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	4852      	ldr	r0, [pc, #328]	; (8000f58 <MX_GPIO_Init+0x250>)
 8000e0e:	f000 fd7b 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	484d      	ldr	r0, [pc, #308]	; (8000f5c <MX_GPIO_Init+0x254>)
 8000e28:	f000 fbbe 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e2c:	2332      	movs	r3, #50	; 0x32
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3c:	230b      	movs	r3, #11
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4619      	mov	r1, r3
 8000e46:	4845      	ldr	r0, [pc, #276]	; (8000f5c <MX_GPIO_Init+0x254>)
 8000e48:	f000 fbae 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e4c:	2386      	movs	r3, #134	; 0x86
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	483e      	ldr	r0, [pc, #248]	; (8000f60 <MX_GPIO_Init+0x258>)
 8000e68:	f000 fb9e 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e6c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	4832      	ldr	r0, [pc, #200]	; (8000f50 <MX_GPIO_Init+0x248>)
 8000e86:	f000 fb8f 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9c:	230b      	movs	r3, #11
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	482a      	ldr	r0, [pc, #168]	; (8000f50 <MX_GPIO_Init+0x248>)
 8000ea8:	f000 fb7e 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4823      	ldr	r0, [pc, #140]	; (8000f54 <MX_GPIO_Init+0x24c>)
 8000ec6:	f000 fb6f 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <MX_GPIO_Init+0x25c>)
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4822      	ldr	r0, [pc, #136]	; (8000f68 <MX_GPIO_Init+0x260>)
 8000ede:	f000 fb63 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ee2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4818      	ldr	r0, [pc, #96]	; (8000f60 <MX_GPIO_Init+0x258>)
 8000f00:	f000 fb52 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f04:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f16:	230b      	movs	r3, #11
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4811      	ldr	r0, [pc, #68]	; (8000f68 <MX_GPIO_Init+0x260>)
 8000f22:	f000 fb41 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4806      	ldr	r0, [pc, #24]	; (8000f58 <MX_GPIO_Init+0x250>)
 8000f3e:	f000 fb33 	bl	80015a8 <HAL_GPIO_Init>

}
 8000f42:	bf00      	nop
 8000f44:	3730      	adds	r7, #48	; 0x30
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	58024400 	.word	0x58024400
 8000f50:	58020400 	.word	0x58020400
 8000f54:	58020c00 	.word	0x58020c00
 8000f58:	58021000 	.word	0x58021000
 8000f5c:	58020800 	.word	0x58020800
 8000f60:	58020000 	.word	0x58020000
 8000f64:	11110000 	.word	0x11110000
 8000f68:	58021800 	.word	0x58021800

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_MspInit+0x30>)
 8000f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x30>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x30>)
 8000f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	58024400 	.word	0x58024400

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08c      	sub	sp, #48	; 0x30
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a44      	ldr	r2, [pc, #272]	; (80010e0 <HAL_UART_MspInit+0x130>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d14d      	bne.n	800106e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd2:	4b44      	ldr	r3, [pc, #272]	; (80010e4 <HAL_UART_MspInit+0x134>)
 8000fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fd8:	4a42      	ldr	r2, [pc, #264]	; (80010e4 <HAL_UART_MspInit+0x134>)
 8000fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <HAL_UART_MspInit+0x134>)
 8000fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <HAL_UART_MspInit+0x134>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff6:	4a3b      	ldr	r2, [pc, #236]	; (80010e4 <HAL_UART_MspInit+0x134>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001000:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <HAL_UART_MspInit+0x134>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800100e:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <HAL_UART_MspInit+0x134>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	4a33      	ldr	r2, [pc, #204]	; (80010e4 <HAL_UART_MspInit+0x134>)
 8001016:	f043 0308 	orr.w	r3, r3, #8
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101e:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <HAL_UART_MspInit+0x134>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800102c:	2308      	movs	r3, #8
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800103c:	2307      	movs	r3, #7
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4828      	ldr	r0, [pc, #160]	; (80010e8 <HAL_UART_MspInit+0x138>)
 8001048:	f000 faae 	bl	80015a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800104c:	2320      	movs	r3, #32
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105c:	2307      	movs	r3, #7
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4821      	ldr	r0, [pc, #132]	; (80010ec <HAL_UART_MspInit+0x13c>)
 8001068:	f000 fa9e 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800106c:	e033      	b.n	80010d6 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART3)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <HAL_UART_MspInit+0x140>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d12e      	bne.n	80010d6 <HAL_UART_MspInit+0x126>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_UART_MspInit+0x134>)
 800107a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800107e:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_UART_MspInit+0x134>)
 8001080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001084:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_UART_MspInit+0x134>)
 800108a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800108e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_UART_MspInit+0x134>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <HAL_UART_MspInit+0x134>)
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_UART_MspInit+0x134>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c6:	2307      	movs	r3, #7
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4806      	ldr	r0, [pc, #24]	; (80010ec <HAL_UART_MspInit+0x13c>)
 80010d2:	f000 fa69 	bl	80015a8 <HAL_GPIO_Init>
}
 80010d6:	bf00      	nop
 80010d8:	3730      	adds	r7, #48	; 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40004400 	.word	0x40004400
 80010e4:	58024400 	.word	0x58024400
 80010e8:	58020000 	.word	0x58020000
 80010ec:	58020c00 	.word	0x58020c00
 80010f0:	40004800 	.word	0x40004800

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 f8fc 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <SystemInit+0xac>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a28      	ldr	r2, [pc, #160]	; (80011fc <SystemInit+0xac>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <SystemInit+0xb0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a25      	ldr	r2, [pc, #148]	; (8001200 <SystemInit+0xb0>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <SystemInit+0xb0>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <SystemInit+0xb0>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4921      	ldr	r1, [pc, #132]	; (8001200 <SystemInit+0xb0>)
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <SystemInit+0xb4>)
 800117e:	4013      	ands	r3, r2
 8001180:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <SystemInit+0xb0>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <SystemInit+0xb0>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <SystemInit+0xb0>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <SystemInit+0xb0>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <SystemInit+0xb0>)
 800119c:	2200      	movs	r2, #0
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <SystemInit+0xb0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <SystemInit+0xb0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <SystemInit+0xb0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <SystemInit+0xb0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <SystemInit+0xb0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <SystemInit+0xb0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <SystemInit+0xb0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <SystemInit+0xb0>)
 80011ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <SystemInit+0xb0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <SystemInit+0xb8>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <SystemInit+0xbc>)
 80011dc:	4013      	ands	r3, r2
 80011de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011e2:	d202      	bcs.n	80011ea <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <SystemInit+0xc0>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <SystemInit+0xac>)
 80011ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011f0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00
 8001200:	58024400 	.word	0x58024400
 8001204:	eaf6ed7f 	.word	0xeaf6ed7f
 8001208:	5c001000 	.word	0x5c001000
 800120c:	ffff0000 	.word	0xffff0000
 8001210:	51008108 	.word	0x51008108

08001214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800124c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001218:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800121a:	e003      	b.n	8001224 <LoopCopyDataInit>

0800121c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800121e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001220:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001222:	3104      	adds	r1, #4

08001224 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001228:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800122a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800122c:	d3f6      	bcc.n	800121c <CopyDataInit>
  ldr  r2, =_sbss
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001230:	e002      	b.n	8001238 <LoopFillZerobss>

08001232 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001232:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001234:	f842 3b04 	str.w	r3, [r2], #4

08001238 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800123a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800123c:	d3f9      	bcc.n	8001232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800123e:	f7ff ff87 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001242:	f005 fa57 	bl	80066f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001246:	f7ff fb11 	bl	800086c <main>
  bx  lr    
 800124a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800124c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001250:	08006794 	.word	0x08006794
  ldr  r0, =_sdata
 8001254:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001258:	24000048 	.word	0x24000048
  ldr  r2, =_sbss
 800125c:	24000048 	.word	0x24000048
  ldr  r3, = _ebss
 8001260:	240001e8 	.word	0x240001e8

08001264 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC3_IRQHandler>
	...

08001268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f000 f969 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001272:	f001 f911 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8001276:	4601      	mov	r1, r0
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_Init+0x60>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <HAL_Init+0x64>)
 8001284:	5cd3      	ldrb	r3, [r2, r3]
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	fa21 f303 	lsr.w	r3, r1, r3
 800128e:	4a10      	ldr	r2, [pc, #64]	; (80012d0 <HAL_Init+0x68>)
 8001290:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_Init+0x68>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_Init+0x60>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	490b      	ldr	r1, [pc, #44]	; (80012cc <HAL_Init+0x64>)
 80012a0:	5ccb      	ldrb	r3, [r1, r3]
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	fa22 f303 	lsr.w	r3, r2, r3
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_Init+0x6c>)
 80012ac:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 f812 	bl	80012d8 <HAL_InitTick>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e002      	b.n	80012c4 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012be:	f7ff fe5d 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	58024400 	.word	0x58024400
 80012cc:	08006774 	.word	0x08006774
 80012d0:	24000038 	.word	0x24000038
 80012d4:	2400003c 	.word	0x2400003c

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_InitTick+0x60>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e021      	b.n	8001330 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_InitTick+0x64>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_InitTick+0x60>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f943 	bl	800158e <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f000 f91b 	bl	800155a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_InitTick+0x68>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	24000044 	.word	0x24000044
 800133c:	24000038 	.word	0x24000038
 8001340:	24000040 	.word	0x24000040

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	24000044 	.word	0x24000044
 8001368:	240001e4 	.word	0x240001e4

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	240001e4 	.word	0x240001e4

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_Delay+0x40>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	24000044 	.word	0x24000044

080013c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_GetREVID+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0c1b      	lsrs	r3, r3, #16
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	5c001000 	.word	0x5c001000

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <__NVIC_SetPriorityGrouping+0x40>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	4313      	orrs	r3, r2
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x40>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00
 8001424:	05fa0000 	.word	0x05fa0000

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	210f      	movs	r1, #15
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f7ff ff8e 	bl	8001444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff47 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001568:	f7ff ff5e 	bl	8001428 <__NVIC_GetPriorityGrouping>
 800156c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ff90 	bl	8001498 <NVIC_EncodePriority>
 8001578:	4602      	mov	r2, r0
 800157a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff5f 	bl	8001444 <__NVIC_SetPriority>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffb2 	bl	8001500 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015b6:	4b89      	ldr	r3, [pc, #548]	; (80017dc <HAL_GPIO_Init+0x234>)
 80015b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015ba:	e194      	b.n	80018e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2101      	movs	r1, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8186 	beq.w	80018e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x3c>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b12      	cmp	r3, #18
 80015e2:	d123      	bne.n	800162c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	08da      	lsrs	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3208      	adds	r2, #8
 80015ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3208      	adds	r2, #8
 8001626:	69b9      	ldr	r1, [r7, #24]
 8001628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0203 	and.w	r2, r3, #3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d00b      	beq.n	8001680 <HAL_GPIO_Init+0xd8>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d007      	beq.n	8001680 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001674:	2b11      	cmp	r3, #17
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b12      	cmp	r3, #18
 800167e:	d130      	bne.n	80016e2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016b6:	2201      	movs	r2, #1
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	f003 0201 	and.w	r2, r3, #1
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 80e0 	beq.w	80018e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001720:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_GPIO_Init+0x238>)
 8001722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001726:	4a2e      	ldr	r2, [pc, #184]	; (80017e0 <HAL_GPIO_Init+0x238>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_GPIO_Init+0x238>)
 8001732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800173e:	4a29      	ldr	r2, [pc, #164]	; (80017e4 <HAL_GPIO_Init+0x23c>)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	220f      	movs	r2, #15
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <HAL_GPIO_Init+0x240>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d052      	beq.n	8001810 <HAL_GPIO_Init+0x268>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <HAL_GPIO_Init+0x244>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d031      	beq.n	80017d6 <HAL_GPIO_Init+0x22e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <HAL_GPIO_Init+0x248>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d02b      	beq.n	80017d2 <HAL_GPIO_Init+0x22a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_GPIO_Init+0x24c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d025      	beq.n	80017ce <HAL_GPIO_Init+0x226>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_GPIO_Init+0x250>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01f      	beq.n	80017ca <HAL_GPIO_Init+0x222>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <HAL_GPIO_Init+0x254>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d019      	beq.n	80017c6 <HAL_GPIO_Init+0x21e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_GPIO_Init+0x258>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0x21a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_GPIO_Init+0x25c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00d      	beq.n	80017be <HAL_GPIO_Init+0x216>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a18      	ldr	r2, [pc, #96]	; (8001808 <HAL_GPIO_Init+0x260>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d007      	beq.n	80017ba <HAL_GPIO_Init+0x212>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_GPIO_Init+0x264>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_GPIO_Init+0x20e>
 80017b2:	2309      	movs	r3, #9
 80017b4:	e02d      	b.n	8001812 <HAL_GPIO_Init+0x26a>
 80017b6:	230a      	movs	r3, #10
 80017b8:	e02b      	b.n	8001812 <HAL_GPIO_Init+0x26a>
 80017ba:	2308      	movs	r3, #8
 80017bc:	e029      	b.n	8001812 <HAL_GPIO_Init+0x26a>
 80017be:	2307      	movs	r3, #7
 80017c0:	e027      	b.n	8001812 <HAL_GPIO_Init+0x26a>
 80017c2:	2306      	movs	r3, #6
 80017c4:	e025      	b.n	8001812 <HAL_GPIO_Init+0x26a>
 80017c6:	2305      	movs	r3, #5
 80017c8:	e023      	b.n	8001812 <HAL_GPIO_Init+0x26a>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e021      	b.n	8001812 <HAL_GPIO_Init+0x26a>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e01f      	b.n	8001812 <HAL_GPIO_Init+0x26a>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e01d      	b.n	8001812 <HAL_GPIO_Init+0x26a>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e01b      	b.n	8001812 <HAL_GPIO_Init+0x26a>
 80017da:	bf00      	nop
 80017dc:	58000080 	.word	0x58000080
 80017e0:	58024400 	.word	0x58024400
 80017e4:	58000400 	.word	0x58000400
 80017e8:	58020000 	.word	0x58020000
 80017ec:	58020400 	.word	0x58020400
 80017f0:	58020800 	.word	0x58020800
 80017f4:	58020c00 	.word	0x58020c00
 80017f8:	58021000 	.word	0x58021000
 80017fc:	58021400 	.word	0x58021400
 8001800:	58021800 	.word	0x58021800
 8001804:	58021c00 	.word	0x58021c00
 8001808:	58022000 	.word	0x58022000
 800180c:	58022400 	.word	0x58022400
 8001810:	2300      	movs	r3, #0
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	f002 0203 	and.w	r2, r2, #3
 8001818:	0092      	lsls	r2, r2, #2
 800181a:	4093      	lsls	r3, r2
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001822:	4938      	ldr	r1, [pc, #224]	; (8001904 <HAL_GPIO_Init+0x35c>)
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	3301      	adds	r3, #1
 80018e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f47f ae63 	bne.w	80015bc <HAL_GPIO_Init+0x14>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	58000400 	.word	0x58000400

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001924:	e003      	b.n	800192e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	041a      	lsls	r2, r3, #16
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	619a      	str	r2, [r3, #24]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	401a      	ands	r2, r3
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	429a      	cmp	r2, r3
 8001952:	d104      	bne.n	800195e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	041a      	lsls	r2, r3, #16
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800195c:	e002      	b.n	8001964 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	619a      	str	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_PWREx_ConfigSupply+0x6c>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b04      	cmp	r3, #4
 8001982:	d008      	beq.n	8001996 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_PWREx_ConfigSupply+0x6c>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e01d      	b.n	80019d2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_PWREx_ConfigSupply+0x6c>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f023 0207 	bic.w	r2, r3, #7
 800199e:	490f      	ldr	r1, [pc, #60]	; (80019dc <HAL_PWREx_ConfigSupply+0x6c>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019a6:	f7ff fce1 	bl	800136c <HAL_GetTick>
 80019aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80019ac:	e009      	b.n	80019c2 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 80019ae:	f7ff fcdd 	bl	800136c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019bc:	d901      	bls.n	80019c2 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e007      	b.n	80019d2 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_PWREx_ConfigSupply+0x6c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ce:	d1ee      	bne.n	80019ae <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	58024800 	.word	0x58024800

080019e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e3a4      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8087 	beq.w	8001b0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a00:	4b9a      	ldr	r3, [pc, #616]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a0a:	4b98      	ldr	r3, [pc, #608]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	d007      	beq.n	8001a26 <HAL_RCC_OscConfig+0x46>
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	2b18      	cmp	r3, #24
 8001a1a:	d110      	bne.n	8001a3e <HAL_RCC_OscConfig+0x5e>
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d10b      	bne.n	8001a3e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a26:	4b91      	ldr	r3, [pc, #580]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d06c      	beq.n	8001b0c <HAL_RCC_OscConfig+0x12c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d168      	bne.n	8001b0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e37e      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x76>
 8001a48:	4b88      	ldr	r3, [pc, #544]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a87      	ldr	r2, [pc, #540]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e02e      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x98>
 8001a5e:	4b83      	ldr	r3, [pc, #524]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a82      	ldr	r2, [pc, #520]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b80      	ldr	r3, [pc, #512]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7f      	ldr	r2, [pc, #508]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e01d      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0xbc>
 8001a82:	4b7a      	ldr	r3, [pc, #488]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a79      	ldr	r2, [pc, #484]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b77      	ldr	r3, [pc, #476]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a76      	ldr	r2, [pc, #472]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a9c:	4b73      	ldr	r3, [pc, #460]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a72      	ldr	r2, [pc, #456]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b70      	ldr	r3, [pc, #448]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6f      	ldr	r2, [pc, #444]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d013      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff fc56 	bl	800136c <HAL_GetTick>
 8001ac0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fc52 	bl	800136c <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e332      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ad6:	4b65      	ldr	r3, [pc, #404]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xe4>
 8001ae2:	e014      	b.n	8001b0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fc42 	bl	800136c <HAL_GetTick>
 8001ae8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff fc3e 	bl	800136c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e31e      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001afe:	4b5b      	ldr	r3, [pc, #364]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x10c>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 80b0 	beq.w	8001c7c <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b24:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b26:	4b51      	ldr	r3, [pc, #324]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <HAL_RCC_OscConfig+0x162>
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2b18      	cmp	r3, #24
 8001b36:	d149      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1ec>
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d144      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b42:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x17a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e2f0      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 0219 	bic.w	r2, r3, #25
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	4941      	ldr	r1, [pc, #260]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fbfe 	bl	800136c <HAL_GetTick>
 8001b70:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b74:	f7ff fbfa 	bl	800136c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e2da      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b86:	4b39      	ldr	r3, [pc, #228]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b92:	f7ff fc19 	bl	80013c8 <HAL_GetREVID>
 8001b96:	4602      	mov	r2, r0
 8001b98:	f241 0303 	movw	r3, #4099	; 0x1003
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d80a      	bhi.n	8001bb6 <HAL_RCC_OscConfig+0x1d6>
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	031b      	lsls	r3, r3, #12
 8001bae:	492f      	ldr	r1, [pc, #188]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb4:	e062      	b.n	8001c7c <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	061b      	lsls	r3, r3, #24
 8001bc4:	4929      	ldr	r1, [pc, #164]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bca:	e057      	b.n	8001c7c <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d038      	beq.n	8001c46 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 0219 	bic.w	r2, r3, #25
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4922      	ldr	r1, [pc, #136]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be6:	f7ff fbc1 	bl	800136c <HAL_GetTick>
 8001bea:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bee:	f7ff fbbd 	bl	800136c <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e29d      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0c:	f7ff fbdc 	bl	80013c8 <HAL_GetREVID>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d80a      	bhi.n	8001c30 <HAL_RCC_OscConfig+0x250>
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	031b      	lsls	r3, r3, #12
 8001c28:	4910      	ldr	r1, [pc, #64]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
 8001c2e:	e025      	b.n	8001c7c <HAL_RCC_OscConfig+0x29c>
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	061b      	lsls	r3, r3, #24
 8001c3e:	490b      	ldr	r1, [pc, #44]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
 8001c44:	e01a      	b.n	8001c7c <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <HAL_RCC_OscConfig+0x28c>)
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff fb8b 	bl	800136c <HAL_GetTick>
 8001c56:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff fb87 	bl	800136c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d903      	bls.n	8001c70 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e267      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
 8001c6c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c70:	4ba0      	ldr	r3, [pc, #640]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ee      	bne.n	8001c5a <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 808f 	beq.w	8001da8 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c8a:	4b9a      	ldr	r3, [pc, #616]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c92:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c94:	4b97      	ldr	r3, [pc, #604]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d007      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x2d0>
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b18      	cmp	r3, #24
 8001ca4:	d12d      	bne.n	8001d02 <HAL_RCC_OscConfig+0x322>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d128      	bne.n	8001d02 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cb0:	4b90      	ldr	r3, [pc, #576]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x2e8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	2b80      	cmp	r3, #128	; 0x80
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e239      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cc8:	f7ff fb7e 	bl	80013c8 <HAL_GetREVID>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f241 0303 	movw	r3, #4099	; 0x1003
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d80a      	bhi.n	8001cec <HAL_RCC_OscConfig+0x30c>
 8001cd6:	4b87      	ldr	r3, [pc, #540]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	069b      	lsls	r3, r3, #26
 8001ce4:	4983      	ldr	r1, [pc, #524]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cea:	e05d      	b.n	8001da8 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cec:	4b81      	ldr	r3, [pc, #516]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	497e      	ldr	r1, [pc, #504]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d00:	e052      	b.n	8001da8 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d035      	beq.n	8001d76 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d0a:	4b7a      	ldr	r3, [pc, #488]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a79      	ldr	r2, [pc, #484]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff fb29 	bl	800136c <HAL_GetTick>
 8001d1a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fb25 	bl	800136c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e205      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d30:	4b70      	ldr	r3, [pc, #448]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d3c:	f7ff fb44 	bl	80013c8 <HAL_GetREVID>
 8001d40:	4602      	mov	r2, r0
 8001d42:	f241 0303 	movw	r3, #4099	; 0x1003
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d80a      	bhi.n	8001d60 <HAL_RCC_OscConfig+0x380>
 8001d4a:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	069b      	lsls	r3, r3, #26
 8001d58:	4966      	ldr	r1, [pc, #408]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
 8001d5e:	e023      	b.n	8001da8 <HAL_RCC_OscConfig+0x3c8>
 8001d60:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	4961      	ldr	r1, [pc, #388]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60cb      	str	r3, [r1, #12]
 8001d74:	e018      	b.n	8001da8 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d76:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a5e      	ldr	r2, [pc, #376]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001d7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d82:	f7ff faf3 	bl	800136c <HAL_GetTick>
 8001d86:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d8a:	f7ff faef 	bl	800136c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e1cf      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d9c:	4b55      	ldr	r3, [pc, #340]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d036      	beq.n	8001e22 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d019      	beq.n	8001df0 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dbc:	4b4d      	ldr	r3, [pc, #308]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc0:	4a4c      	ldr	r2, [pc, #304]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7ff fad0 	bl	800136c <HAL_GetTick>
 8001dcc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7ff facc 	bl	800136c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1ac      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001de2:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x3f0>
 8001dee:	e018      	b.n	8001e22 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df0:	4b40      	ldr	r3, [pc, #256]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df4:	4a3f      	ldr	r2, [pc, #252]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff fab6 	bl	800136c <HAL_GetTick>
 8001e00:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e04:	f7ff fab2 	bl	800136c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e192      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e16:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d036      	beq.n	8001e9c <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d019      	beq.n	8001e6a <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e36:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2e      	ldr	r2, [pc, #184]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001e3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e42:	f7ff fa93 	bl	800136c <HAL_GetTick>
 8001e46:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e4a:	f7ff fa8f 	bl	800136c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e16f      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x46a>
 8001e68:	e018      	b.n	8001e9c <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e6a:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fa79 	bl	800136c <HAL_GetTick>
 8001e7a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e7e:	f7ff fa75 	bl	800136c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e155      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f0      	bne.n	8001e7e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8086 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001eaa:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HAL_RCC_OscConfig+0x518>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <HAL_RCC_OscConfig+0x518>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb6:	f7ff fa59 	bl	800136c <HAL_GetTick>
 8001eba:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7ff fa55 	bl	800136c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b64      	cmp	r3, #100	; 0x64
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e135      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_OscConfig+0x518>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d10b      	bne.n	8001efc <HAL_RCC_OscConfig+0x51c>
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	4a02      	ldr	r2, [pc, #8]	; (8001ef4 <HAL_RCC_OscConfig+0x514>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef0:	e032      	b.n	8001f58 <HAL_RCC_OscConfig+0x578>
 8001ef2:	bf00      	nop
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	58024800 	.word	0x58024800
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10c      	bne.n	8001f1e <HAL_RCC_OscConfig+0x53e>
 8001f04:	4b8f      	ldr	r3, [pc, #572]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	4a8e      	ldr	r2, [pc, #568]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f10:	4b8c      	ldr	r3, [pc, #560]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	4a8b      	ldr	r2, [pc, #556]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001f16:	f023 0304 	bic.w	r3, r3, #4
 8001f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1c:	e01c      	b.n	8001f58 <HAL_RCC_OscConfig+0x578>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x560>
 8001f26:	4b87      	ldr	r3, [pc, #540]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	4a86      	ldr	r2, [pc, #536]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6713      	str	r3, [r2, #112]	; 0x70
 8001f32:	4b84      	ldr	r3, [pc, #528]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	4a83      	ldr	r2, [pc, #524]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0x578>
 8001f40:	4b80      	ldr	r3, [pc, #512]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	4a7f      	ldr	r2, [pc, #508]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4c:	4b7d      	ldr	r3, [pc, #500]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a7c      	ldr	r2, [pc, #496]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001f52:	f023 0304 	bic.w	r3, r3, #4
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d015      	beq.n	8001f8c <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f60:	f7ff fa04 	bl	800136c <HAL_GetTick>
 8001f64:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f7ff fa00 	bl	800136c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e0de      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f7e:	4b71      	ldr	r3, [pc, #452]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0ee      	beq.n	8001f68 <HAL_RCC_OscConfig+0x588>
 8001f8a:	e014      	b.n	8001fb6 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7ff f9ee 	bl	800136c <HAL_GetTick>
 8001f90:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f94:	f7ff f9ea 	bl	800136c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0c8      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001faa:	4b66      	ldr	r3, [pc, #408]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1ee      	bne.n	8001f94 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80bd 	beq.w	800213a <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fc0:	4b60      	ldr	r3, [pc, #384]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fc8:	2b18      	cmp	r3, #24
 8001fca:	f000 80b4 	beq.w	8002136 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	f040 8095 	bne.w	8002102 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd8:	4b5a      	ldr	r3, [pc, #360]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a59      	ldr	r2, [pc, #356]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8001fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff f9c2 	bl	800136c <HAL_GetTick>
 8001fe8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff f9be 	bl	800136c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e09e      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ffe:	4b51      	ldr	r3, [pc, #324]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200a:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 800200c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800200e:	4b4e      	ldr	r3, [pc, #312]	; (8002148 <HAL_RCC_OscConfig+0x768>)
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	430a      	orrs	r2, r1
 800201e:	4949      	ldr	r1, [pc, #292]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8002020:	4313      	orrs	r3, r2
 8002022:	628b      	str	r3, [r1, #40]	; 0x28
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	3b01      	subs	r3, #1
 800202a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002032:	3b01      	subs	r3, #1
 8002034:	025b      	lsls	r3, r3, #9
 8002036:	b29b      	uxth	r3, r3
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203e:	3b01      	subs	r3, #1
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204c:	3b01      	subs	r3, #1
 800204e:	061b      	lsls	r3, r3, #24
 8002050:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002054:	493b      	ldr	r1, [pc, #236]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8002056:	4313      	orrs	r3, r2
 8002058:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800205a:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	4a39      	ldr	r2, [pc, #228]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002066:	4b37      	ldr	r3, [pc, #220]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8002068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800206a:	4b38      	ldr	r3, [pc, #224]	; (800214c <HAL_RCC_OscConfig+0x76c>)
 800206c:	4013      	ands	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002072:	00d2      	lsls	r2, r2, #3
 8002074:	4933      	ldr	r1, [pc, #204]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8002076:	4313      	orrs	r3, r2
 8002078:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800207a:	4b32      	ldr	r3, [pc, #200]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	f023 020c 	bic.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	492f      	ldr	r1, [pc, #188]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8002088:	4313      	orrs	r3, r2
 800208a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	f023 0202 	bic.w	r2, r3, #2
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	492a      	ldr	r1, [pc, #168]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 800209a:	4313      	orrs	r3, r2
 800209c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	4a28      	ldr	r2, [pc, #160]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	4a25      	ldr	r2, [pc, #148]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 80020b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	4a22      	ldr	r2, [pc, #136]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 80020bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 80020d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7ff f947 	bl	800136c <HAL_GetTick>
 80020de:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e2:	f7ff f943 	bl	800136c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e023      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x702>
 8002100:	e01b      	b.n	800213a <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 8002108:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800210c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7ff f92d 	bl	800136c <HAL_GetTick>
 8002112:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002116:	f7ff f929 	bl	800136c <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e009      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_OscConfig+0x764>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f0      	bne.n	8002116 <HAL_RCC_OscConfig+0x736>
 8002134:	e001      	b.n	800213a <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3728      	adds	r7, #40	; 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	58024400 	.word	0x58024400
 8002148:	fffffc0c 	.word	0xfffffc0c
 800214c:	ffff0007 	.word	0xffff0007

08002150 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e18d      	b.n	8002480 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002164:	4b8a      	ldr	r3, [pc, #552]	; (8002390 <HAL_RCC_ClockConfig+0x240>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d910      	bls.n	8002194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b87      	ldr	r3, [pc, #540]	; (8002390 <HAL_RCC_ClockConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 020f 	bic.w	r2, r3, #15
 800217a:	4985      	ldr	r1, [pc, #532]	; (8002390 <HAL_RCC_ClockConfig+0x240>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b83      	ldr	r3, [pc, #524]	; (8002390 <HAL_RCC_ClockConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e175      	b.n	8002480 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d010      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	4b7b      	ldr	r3, [pc, #492]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d908      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021b0:	4b78      	ldr	r3, [pc, #480]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	4975      	ldr	r1, [pc, #468]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d010      	beq.n	80021f0 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	4b70      	ldr	r3, [pc, #448]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021da:	429a      	cmp	r2, r3
 80021dc:	d908      	bls.n	80021f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021de:	4b6d      	ldr	r3, [pc, #436]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	496a      	ldr	r1, [pc, #424]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d010      	beq.n	800221e <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	4b64      	ldr	r3, [pc, #400]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002208:	429a      	cmp	r2, r3
 800220a:	d908      	bls.n	800221e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800220c:	4b61      	ldr	r3, [pc, #388]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	495e      	ldr	r1, [pc, #376]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 800221a:	4313      	orrs	r3, r2
 800221c:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	2b00      	cmp	r3, #0
 8002228:	d010      	beq.n	800224c <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69da      	ldr	r2, [r3, #28]
 800222e:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002236:	429a      	cmp	r2, r3
 8002238:	d908      	bls.n	800224c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800223a:	4b56      	ldr	r3, [pc, #344]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4953      	ldr	r1, [pc, #332]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 8002248:	4313      	orrs	r3, r2
 800224a:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	4b4d      	ldr	r3, [pc, #308]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	429a      	cmp	r2, r3
 8002266:	d908      	bls.n	800227a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f023 020f 	bic.w	r2, r3, #15
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4947      	ldr	r1, [pc, #284]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 8002276:	4313      	orrs	r3, r2
 8002278:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d055      	beq.n	8002332 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002286:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4940      	ldr	r1, [pc, #256]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 8002294:	4313      	orrs	r3, r2
 8002296:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d107      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022a0:	4b3c      	ldr	r3, [pc, #240]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d121      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0e7      	b.n	8002480 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d107      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022b8:	4b36      	ldr	r3, [pc, #216]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d115      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0db      	b.n	8002480 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022d0:	4b30      	ldr	r3, [pc, #192]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0cf      	b.n	8002480 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022e0:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0c7      	b.n	8002480 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022f0:	4b28      	ldr	r3, [pc, #160]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f023 0207 	bic.w	r2, r3, #7
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4925      	ldr	r1, [pc, #148]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002302:	f7ff f833 	bl	800136c <HAL_GetTick>
 8002306:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002308:	e00a      	b.n	8002320 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230a:	f7ff f82f 	bl	800136c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f241 3288 	movw	r2, #5000	; 0x1388
 8002318:	4293      	cmp	r3, r2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0af      	b.n	8002480 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002320:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	429a      	cmp	r2, r3
 8002330:	d1eb      	bne.n	800230a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d010      	beq.n	8002360 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	429a      	cmp	r2, r3
 800234c:	d208      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f023 020f 	bic.w	r2, r3, #15
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	490e      	ldr	r1, [pc, #56]	; (8002394 <HAL_RCC_ClockConfig+0x244>)
 800235c:	4313      	orrs	r3, r2
 800235e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCC_ClockConfig+0x240>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d214      	bcs.n	8002398 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_RCC_ClockConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 020f 	bic.w	r2, r3, #15
 8002376:	4906      	ldr	r1, [pc, #24]	; (8002390 <HAL_RCC_ClockConfig+0x240>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <HAL_RCC_ClockConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e077      	b.n	8002480 <HAL_RCC_ClockConfig+0x330>
 8002390:	52002000 	.word	0x52002000
 8002394:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d010      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	4b37      	ldr	r3, [pc, #220]	; (8002488 <HAL_RCC_ClockConfig+0x338>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d208      	bcs.n	80023c6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023b4:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCC_ClockConfig+0x338>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	4931      	ldr	r1, [pc, #196]	; (8002488 <HAL_RCC_ClockConfig+0x338>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d010      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <HAL_RCC_ClockConfig+0x338>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023de:	429a      	cmp	r2, r3
 80023e0:	d208      	bcs.n	80023f4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <HAL_RCC_ClockConfig+0x338>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	4926      	ldr	r1, [pc, #152]	; (8002488 <HAL_RCC_ClockConfig+0x338>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d010      	beq.n	8002422 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_RCC_ClockConfig+0x338>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800240c:	429a      	cmp	r2, r3
 800240e:	d208      	bcs.n	8002422 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_RCC_ClockConfig+0x338>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	491a      	ldr	r1, [pc, #104]	; (8002488 <HAL_RCC_ClockConfig+0x338>)
 800241e:	4313      	orrs	r3, r2
 8002420:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	2b00      	cmp	r3, #0
 800242c:	d010      	beq.n	8002450 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_RCC_ClockConfig+0x338>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800243a:	429a      	cmp	r2, r3
 800243c:	d208      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_RCC_ClockConfig+0x338>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	490f      	ldr	r1, [pc, #60]	; (8002488 <HAL_RCC_ClockConfig+0x338>)
 800244c:	4313      	orrs	r3, r2
 800244e:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002450:	f000 f822 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8002454:	4601      	mov	r1, r0
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_RCC_ClockConfig+0x338>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <HAL_RCC_ClockConfig+0x33c>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	fa21 f303 	lsr.w	r3, r1, r3
 800246c:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_RCC_ClockConfig+0x340>)
 800246e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_RCC_ClockConfig+0x344>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe ff2f 	bl	80012d8 <HAL_InitTick>
 800247a:	4603      	mov	r3, r0
 800247c:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800247e:	7afb      	ldrb	r3, [r7, #11]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	58024400 	.word	0x58024400
 800248c:	08006774 	.word	0x08006774
 8002490:	24000038 	.word	0x24000038
 8002494:	24000040 	.word	0x24000040

08002498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800249e:	4baf      	ldr	r3, [pc, #700]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024a6:	2b18      	cmp	r3, #24
 80024a8:	f200 814e 	bhi.w	8002748 <HAL_RCC_GetSysClockFreq+0x2b0>
 80024ac:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80024ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b2:	bf00      	nop
 80024b4:	08002519 	.word	0x08002519
 80024b8:	08002749 	.word	0x08002749
 80024bc:	08002749 	.word	0x08002749
 80024c0:	08002749 	.word	0x08002749
 80024c4:	08002749 	.word	0x08002749
 80024c8:	08002749 	.word	0x08002749
 80024cc:	08002749 	.word	0x08002749
 80024d0:	08002749 	.word	0x08002749
 80024d4:	0800253f 	.word	0x0800253f
 80024d8:	08002749 	.word	0x08002749
 80024dc:	08002749 	.word	0x08002749
 80024e0:	08002749 	.word	0x08002749
 80024e4:	08002749 	.word	0x08002749
 80024e8:	08002749 	.word	0x08002749
 80024ec:	08002749 	.word	0x08002749
 80024f0:	08002749 	.word	0x08002749
 80024f4:	08002545 	.word	0x08002545
 80024f8:	08002749 	.word	0x08002749
 80024fc:	08002749 	.word	0x08002749
 8002500:	08002749 	.word	0x08002749
 8002504:	08002749 	.word	0x08002749
 8002508:	08002749 	.word	0x08002749
 800250c:	08002749 	.word	0x08002749
 8002510:	08002749 	.word	0x08002749
 8002514:	0800254b 	.word	0x0800254b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002518:	4b90      	ldr	r3, [pc, #576]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002524:	4b8d      	ldr	r3, [pc, #564]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	08db      	lsrs	r3, r3, #3
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	4a8c      	ldr	r2, [pc, #560]	; (8002760 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002536:	e10a      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002538:	4b89      	ldr	r3, [pc, #548]	; (8002760 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800253a:	61bb      	str	r3, [r7, #24]
    break;
 800253c:	e107      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800253e:	4b89      	ldr	r3, [pc, #548]	; (8002764 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002540:	61bb      	str	r3, [r7, #24]
    break;
 8002542:	e104      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002544:	4b88      	ldr	r3, [pc, #544]	; (8002768 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002546:	61bb      	str	r3, [r7, #24]
    break;
 8002548:	e101      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800254a:	4b84      	ldr	r3, [pc, #528]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002554:	4b81      	ldr	r3, [pc, #516]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800255e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002560:	4b7e      	ldr	r3, [pc, #504]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800256a:	4b7c      	ldr	r3, [pc, #496]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256e:	08db      	lsrs	r3, r3, #3
 8002570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	fb02 f303 	mul.w	r3, r2, r3
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002582:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80da 	beq.w	8002742 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d05a      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x1b2>
 8002594:	2b01      	cmp	r3, #1
 8002596:	d302      	bcc.n	800259e <HAL_RCC_GetSysClockFreq+0x106>
 8002598:	2b02      	cmp	r3, #2
 800259a:	d078      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0x1f6>
 800259c:	e099      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800259e:	4b6f      	ldr	r3, [pc, #444]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d02d      	beq.n	8002606 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025aa:	4b6c      	ldr	r3, [pc, #432]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	08db      	lsrs	r3, r3, #3
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	4a6a      	ldr	r2, [pc, #424]	; (8002760 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d4:	4b61      	ldr	r3, [pc, #388]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025dc:	ee07 3a90 	vmov	s15, r3
 80025e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80025e8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800276c <HAL_RCC_GetSysClockFreq+0x2d4>
 80025ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002600:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002604:	e087      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002610:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002770 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002618:	4b50      	ldr	r3, [pc, #320]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002628:	ed97 6a02 	vldr	s12, [r7, #8]
 800262c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800276c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800263c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002644:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002648:	e065      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	ee07 3a90 	vmov	s15, r3
 8002650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002654:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002774 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800265c:	4b3f      	ldr	r3, [pc, #252]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002664:	ee07 3a90 	vmov	s15, r3
 8002668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800266c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002670:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800276c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800267c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002688:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800268c:	e043      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002698:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002778 <HAL_RCC_GetSysClockFreq+0x2e0>
 800269c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026a0:	4b2e      	ldr	r3, [pc, #184]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80026b4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800276c <HAL_RCC_GetSysClockFreq+0x2d4>
 80026b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026d0:	e021      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	ee07 3a90 	vmov	s15, r3
 80026d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026dc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002774 <HAL_RCC_GetSysClockFreq+0x2dc>
 80026e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80026f8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800276c <HAL_RCC_GetSysClockFreq+0x2d4>
 80026fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800270c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002710:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002714:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	0a5b      	lsrs	r3, r3, #9
 800271c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002720:	3301      	adds	r3, #1
 8002722:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800272e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800273a:	ee17 3a90 	vmov	r3, s15
 800273e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002740:	e005      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
    break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800274a:	61bb      	str	r3, [r7, #24]
    break;
 800274c:	bf00      	nop
  }

  return sysclockfreq;
 800274e:	69bb      	ldr	r3, [r7, #24]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3724      	adds	r7, #36	; 0x24
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	58024400 	.word	0x58024400
 8002760:	03d09000 	.word	0x03d09000
 8002764:	003d0900 	.word	0x003d0900
 8002768:	017d7840 	.word	0x017d7840
 800276c:	46000000 	.word	0x46000000
 8002770:	4c742400 	.word	0x4c742400
 8002774:	4a742400 	.word	0x4a742400
 8002778:	4bbebc20 	.word	0x4bbebc20

0800277c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002780:	f001 f9e2 	bl	8003b48 <HAL_RCCEx_GetD1SysClockFreq>
 8002784:	4601      	mov	r1, r0
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	4a07      	ldr	r2, [pc, #28]	; (80027ac <HAL_RCC_GetHCLKFreq+0x30>)
 8002790:	5cd3      	ldrb	r3, [r2, r3]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	fa21 f303 	lsr.w	r3, r1, r3
 800279a:	4a05      	ldr	r2, [pc, #20]	; (80027b0 <HAL_RCC_GetHCLKFreq+0x34>)
 800279c:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 800279e:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <HAL_RCC_GetHCLKFreq+0x34>)
 80027a0:	681b      	ldr	r3, [r3, #0]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	58024400 	.word	0x58024400
 80027ac:	08006774 	.word	0x08006774
 80027b0:	2400003c 	.word	0x2400003c

080027b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80027b8:	f7ff ffe0 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80027bc:	4601      	mov	r1, r0
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	58024400 	.word	0x58024400
 80027dc:	08006774 	.word	0x08006774

080027e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80027e4:	f7ff ffca 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80027e8:	4601      	mov	r1, r0
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	58024400 	.word	0x58024400
 8002808:	08006774 	.word	0x08006774

0800280c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002814:	2300      	movs	r3, #0
 8002816:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002818:	2300      	movs	r3, #0
 800281a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d03d      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800282c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002830:	d013      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002836:	d802      	bhi.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800283c:	e01f      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800283e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002842:	d013      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002844:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002848:	d01c      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800284a:	e018      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800284c:	4baf      	ldr	r3, [pc, #700]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	4aae      	ldr	r2, [pc, #696]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002856:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002858:	e015      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3304      	adds	r3, #4
 800285e:	2102      	movs	r1, #2
 8002860:	4618      	mov	r0, r3
 8002862:	f001 f98d 	bl	8003b80 <RCCEx_PLL2_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800286a:	e00c      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3324      	adds	r3, #36	; 0x24
 8002870:	2102      	movs	r1, #2
 8002872:	4618      	mov	r0, r3
 8002874:	f001 fa36 	bl	8003ce4 <RCCEx_PLL3_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800287c:	e003      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	75fb      	strb	r3, [r7, #23]
      break;
 8002882:	e000      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002884:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002886:	7dfb      	ldrb	r3, [r7, #23]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800288c:	4b9f      	ldr	r3, [pc, #636]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800288e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002890:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002898:	499c      	ldr	r1, [pc, #624]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800289a:	4313      	orrs	r3, r2
 800289c:	650b      	str	r3, [r1, #80]	; 0x50
 800289e:	e001      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d03d      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d826      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80028b8:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	080028d5 	.word	0x080028d5
 80028c4:	080028e3 	.word	0x080028e3
 80028c8:	080028f5 	.word	0x080028f5
 80028cc:	0800290d 	.word	0x0800290d
 80028d0:	0800290d 	.word	0x0800290d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d4:	4b8d      	ldr	r3, [pc, #564]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	4a8c      	ldr	r2, [pc, #560]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028e0:	e015      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f001 f949 	bl	8003b80 <RCCEx_PLL2_Config>
 80028ee:	4603      	mov	r3, r0
 80028f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028f2:	e00c      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3324      	adds	r3, #36	; 0x24
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 f9f2 	bl	8003ce4 <RCCEx_PLL3_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002904:	e003      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
      break;
 800290a:	e000      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800290c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002914:	4b7d      	ldr	r3, [pc, #500]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002918:	f023 0207 	bic.w	r2, r3, #7
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	497a      	ldr	r1, [pc, #488]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002922:	4313      	orrs	r3, r2
 8002924:	650b      	str	r3, [r1, #80]	; 0x50
 8002926:	e001      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002934:	2b00      	cmp	r3, #0
 8002936:	d03e      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d01c      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002940:	2b80      	cmp	r3, #128	; 0x80
 8002942:	d804      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002948:	2b40      	cmp	r3, #64	; 0x40
 800294a:	d00d      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800294c:	e01e      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800294e:	2bc0      	cmp	r3, #192	; 0xc0
 8002950:	d01f      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002956:	d01e      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002958:	e018      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800295a:	4b6c      	ldr	r3, [pc, #432]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	4a6b      	ldr	r2, [pc, #428]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002964:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002966:	e017      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f001 f906 	bl	8003b80 <RCCEx_PLL2_Config>
 8002974:	4603      	mov	r3, r0
 8002976:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002978:	e00e      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3324      	adds	r3, #36	; 0x24
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f001 f9af 	bl	8003ce4 <RCCEx_PLL3_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800298a:	e005      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	75fb      	strb	r3, [r7, #23]
      break;
 8002990:	e002      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002992:	bf00      	nop
 8002994:	e000      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800299e:	4b5b      	ldr	r3, [pc, #364]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	4958      	ldr	r1, [pc, #352]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	650b      	str	r3, [r1, #80]	; 0x50
 80029b0:	e001      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d044      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029cc:	d01f      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80029ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d2:	d805      	bhi.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029dc:	d00e      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80029de:	e01f      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80029e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029e4:	d01f      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80029e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ea:	d01e      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80029ec:	e018      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	4a46      	ldr	r2, [pc, #280]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029fa:	e017      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3304      	adds	r3, #4
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 f8bc 	bl	8003b80 <RCCEx_PLL2_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a0c:	e00e      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3324      	adds	r3, #36	; 0x24
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 f965 	bl	8003ce4 <RCCEx_PLL3_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a1e:	e005      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
      break;
 8002a24:	e002      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002a2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a32:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a40:	4932      	ldr	r1, [pc, #200]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	658b      	str	r3, [r1, #88]	; 0x58
 8002a46:	e001      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d044      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a62:	d01f      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002a64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a68:	d805      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002a6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a72:	d00e      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a74:	e01f      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002a76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a7a:	d01f      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002a7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a80:	d01e      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002a82:	e018      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a84:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a90:	e017      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3304      	adds	r3, #4
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f001 f871 	bl	8003b80 <RCCEx_PLL2_Config>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002aa2:	e00e      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3324      	adds	r3, #36	; 0x24
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 f91a 	bl	8003ce4 <RCCEx_PLL3_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ab4:	e005      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8002aba:	e002      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002abc:	bf00      	nop
 8002abe:	e000      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ad6:	490d      	ldr	r1, [pc, #52]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	658b      	str	r3, [r1, #88]	; 0x58
 8002adc:	e001      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ade:	7dfb      	ldrb	r3, [r7, #23]
 8002ae0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d035      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d00c      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d802      	bhi.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d01b      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002afe:	e017      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d00c      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002b04:	2b30      	cmp	r3, #48	; 0x30
 8002b06:	d018      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002b08:	e012      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002b0a:	bf00      	nop
 8002b0c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b10:	4baf      	ldr	r3, [pc, #700]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	4aae      	ldr	r2, [pc, #696]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b1c:	e00e      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2102      	movs	r1, #2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 f82b 	bl	8003b80 <RCCEx_PLL2_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b2e:	e005      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	75fb      	strb	r3, [r7, #23]
      break;
 8002b34:	e002      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b42:	4ba3      	ldr	r3, [pc, #652]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4e:	49a0      	ldr	r1, [pc, #640]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b54:	e001      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d042      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6e:	d01f      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b74:	d805      	bhi.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7e:	d00e      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002b80:	e01f      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002b82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b86:	d01f      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b8c:	d01e      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002b8e:	e018      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b90:	4b8f      	ldr	r3, [pc, #572]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	4a8e      	ldr	r2, [pc, #568]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b9c:	e017      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 ffeb 	bl	8003b80 <RCCEx_PLL2_Config>
 8002baa:	4603      	mov	r3, r0
 8002bac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002bae:	e00e      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3324      	adds	r3, #36	; 0x24
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 f894 	bl	8003ce4 <RCCEx_PLL3_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002bc0:	e005      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8002bc6:	e002      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002bc8:	bf00      	nop
 8002bca:	e000      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002bd4:	4b7e      	ldr	r3, [pc, #504]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	497b      	ldr	r1, [pc, #492]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	650b      	str	r3, [r1, #80]	; 0x50
 8002be6:	e001      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d042      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c00:	d01b      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c06:	d805      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d022      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002c12:	e01b      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002c14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c18:	d01d      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002c1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c1e:	d01c      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002c20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c24:	d01b      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002c26:	e011      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 ffa6 	bl	8003b80 <RCCEx_PLL2_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c38:	e012      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3324      	adds	r3, #36	; 0x24
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 f84f 	bl	8003ce4 <RCCEx_PLL3_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c4a:	e009      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c50:	e006      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002c52:	bf00      	nop
 8002c54:	e004      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002c56:	bf00      	nop
 8002c58:	e002      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e000      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c66:	4b5a      	ldr	r3, [pc, #360]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c72:	4957      	ldr	r1, [pc, #348]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	650b      	str	r3, [r1, #80]	; 0x50
 8002c78:	e001      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d044      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c94:	d01b      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c9a:	d805      	bhi.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d022      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002ca6:	e01b      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cac:	d01d      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cb2:	d01c      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002cb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cb8:	d01b      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002cba:	e011      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 ff5c 	bl	8003b80 <RCCEx_PLL2_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ccc:	e012      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3324      	adds	r3, #36	; 0x24
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 f805 	bl	8003ce4 <RCCEx_PLL3_Config>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002cde:	e009      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ce4:	e006      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e004      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002cea:	bf00      	nop
 8002cec:	e002      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002cee:	bf00      	nop
 8002cf0:	e000      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002cfa:	4b35      	ldr	r3, [pc, #212]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d08:	4931      	ldr	r1, [pc, #196]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	658b      	str	r3, [r1, #88]	; 0x58
 8002d0e:	e001      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d02d      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d28:	d005      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d2e:	d009      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d013      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002d34:	e00f      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d36:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d42:	e00c      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 ff18 	bl	8003b80 <RCCEx_PLL2_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d54:	e003      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5a:	e000      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d64:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d70:	4917      	ldr	r1, [pc, #92]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	650b      	str	r3, [r1, #80]	; 0x50
 8002d76:	e001      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d035      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d81b      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d90:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002dd5 	.word	0x08002dd5
 8002d9c:	08002da9 	.word	0x08002da9
 8002da0:	08002db7 	.word	0x08002db7
 8002da4:	08002dd5 	.word	0x08002dd5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002db4:	e00f      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2102      	movs	r1, #2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fedf 	bl	8003b80 <RCCEx_PLL2_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002dc6:	e006      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	75fb      	strb	r3, [r7, #23]
      break;
 8002dcc:	e003      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002dce:	bf00      	nop
 8002dd0:	58024400 	.word	0x58024400
      break;
 8002dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ddc:	4bba      	ldr	r3, [pc, #744]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de0:	f023 0203 	bic.w	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	49b7      	ldr	r1, [pc, #732]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002dee:	e001      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 8086 	beq.w	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e02:	4bb2      	ldr	r3, [pc, #712]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4ab1      	ldr	r2, [pc, #708]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e0e:	f7fe faad 	bl	800136c <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e14:	e009      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e16:	f7fe faa9 	bl	800136c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b64      	cmp	r3, #100	; 0x64
 8002e22:	d902      	bls.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	75fb      	strb	r3, [r7, #23]
        break;
 8002e28:	e005      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e2a:	4ba8      	ldr	r3, [pc, #672]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0ef      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d166      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e3c:	4ba2      	ldr	r3, [pc, #648]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e46:	4053      	eors	r3, r2
 8002e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e50:	4b9d      	ldr	r3, [pc, #628]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e58:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e5a:	4b9b      	ldr	r3, [pc, #620]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a9a      	ldr	r2, [pc, #616]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e66:	4b98      	ldr	r3, [pc, #608]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	4a97      	ldr	r2, [pc, #604]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e70:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e72:	4a95      	ldr	r2, [pc, #596]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e82:	d115      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe fa72 	bl	800136c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fa6e 	bl	800136c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d902      	bls.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	75fb      	strb	r3, [r7, #23]
            break;
 8002ea2:	e005      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ea4:	4b88      	ldr	r3, [pc, #544]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ed      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d126      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec4:	d10d      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002ec6:	4b80      	ldr	r3, [pc, #512]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ed4:	0919      	lsrs	r1, r3, #4
 8002ed6:	4b7e      	ldr	r3, [pc, #504]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002ed8:	400b      	ands	r3, r1
 8002eda:	497b      	ldr	r1, [pc, #492]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	610b      	str	r3, [r1, #16]
 8002ee0:	e005      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002ee2:	4b79      	ldr	r3, [pc, #484]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	4a78      	ldr	r2, [pc, #480]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ee8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002eec:	6113      	str	r3, [r2, #16]
 8002eee:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ef0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	4972      	ldr	r1, [pc, #456]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	670b      	str	r3, [r1, #112]	; 0x70
 8002f02:	e004      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	75bb      	strb	r3, [r7, #22]
 8002f08:	e001      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
 8002f0c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d07d      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f1e:	2b28      	cmp	r3, #40	; 0x28
 8002f20:	d866      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002f22:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	08002ff7 	.word	0x08002ff7
 8002f2c:	08002ff1 	.word	0x08002ff1
 8002f30:	08002ff1 	.word	0x08002ff1
 8002f34:	08002ff1 	.word	0x08002ff1
 8002f38:	08002ff1 	.word	0x08002ff1
 8002f3c:	08002ff1 	.word	0x08002ff1
 8002f40:	08002ff1 	.word	0x08002ff1
 8002f44:	08002ff1 	.word	0x08002ff1
 8002f48:	08002fcd 	.word	0x08002fcd
 8002f4c:	08002ff1 	.word	0x08002ff1
 8002f50:	08002ff1 	.word	0x08002ff1
 8002f54:	08002ff1 	.word	0x08002ff1
 8002f58:	08002ff1 	.word	0x08002ff1
 8002f5c:	08002ff1 	.word	0x08002ff1
 8002f60:	08002ff1 	.word	0x08002ff1
 8002f64:	08002ff1 	.word	0x08002ff1
 8002f68:	08002fdf 	.word	0x08002fdf
 8002f6c:	08002ff1 	.word	0x08002ff1
 8002f70:	08002ff1 	.word	0x08002ff1
 8002f74:	08002ff1 	.word	0x08002ff1
 8002f78:	08002ff1 	.word	0x08002ff1
 8002f7c:	08002ff1 	.word	0x08002ff1
 8002f80:	08002ff1 	.word	0x08002ff1
 8002f84:	08002ff1 	.word	0x08002ff1
 8002f88:	08002ff7 	.word	0x08002ff7
 8002f8c:	08002ff1 	.word	0x08002ff1
 8002f90:	08002ff1 	.word	0x08002ff1
 8002f94:	08002ff1 	.word	0x08002ff1
 8002f98:	08002ff1 	.word	0x08002ff1
 8002f9c:	08002ff1 	.word	0x08002ff1
 8002fa0:	08002ff1 	.word	0x08002ff1
 8002fa4:	08002ff1 	.word	0x08002ff1
 8002fa8:	08002ff7 	.word	0x08002ff7
 8002fac:	08002ff1 	.word	0x08002ff1
 8002fb0:	08002ff1 	.word	0x08002ff1
 8002fb4:	08002ff1 	.word	0x08002ff1
 8002fb8:	08002ff1 	.word	0x08002ff1
 8002fbc:	08002ff1 	.word	0x08002ff1
 8002fc0:	08002ff1 	.word	0x08002ff1
 8002fc4:	08002ff1 	.word	0x08002ff1
 8002fc8:	08002ff7 	.word	0x08002ff7
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fdd4 	bl	8003b80 <RCCEx_PLL2_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002fdc:	e00c      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3324      	adds	r3, #36	; 0x24
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fe7d 	bl	8003ce4 <RCCEx_PLL3_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002fee:	e003      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff4:	e000      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002ffe:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800300a:	492f      	ldr	r1, [pc, #188]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800300c:	4313      	orrs	r3, r2
 800300e:	654b      	str	r3, [r1, #84]	; 0x54
 8003010:	e001      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d037      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003026:	2b05      	cmp	r3, #5
 8003028:	d820      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800302a:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	08003073 	.word	0x08003073
 8003034:	08003049 	.word	0x08003049
 8003038:	0800305b 	.word	0x0800305b
 800303c:	08003073 	.word	0x08003073
 8003040:	08003073 	.word	0x08003073
 8003044:	08003073 	.word	0x08003073
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	2101      	movs	r1, #1
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fd96 	bl	8003b80 <RCCEx_PLL2_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003058:	e00c      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3324      	adds	r3, #36	; 0x24
 800305e:	2101      	movs	r1, #1
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fe3f 	bl	8003ce4 <RCCEx_PLL3_Config>
 8003066:	4603      	mov	r3, r0
 8003068:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800306a:	e003      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
      break;
 8003070:	e000      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800307a:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	f023 0207 	bic.w	r2, r3, #7
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003086:	4910      	ldr	r1, [pc, #64]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	654b      	str	r3, [r1, #84]	; 0x54
 800308c:	e001      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308e:	7dfb      	ldrb	r3, [r7, #23]
 8003090:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	d040      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	2b05      	cmp	r3, #5
 80030a6:	d827      	bhi.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80030a8:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030ff 	.word	0x080030ff
 80030b4:	080030d5 	.word	0x080030d5
 80030b8:	080030e7 	.word	0x080030e7
 80030bc:	080030ff 	.word	0x080030ff
 80030c0:	080030ff 	.word	0x080030ff
 80030c4:	080030ff 	.word	0x080030ff
 80030c8:	58024400 	.word	0x58024400
 80030cc:	58024800 	.word	0x58024800
 80030d0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3304      	adds	r3, #4
 80030d8:	2101      	movs	r1, #1
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fd50 	bl	8003b80 <RCCEx_PLL2_Config>
 80030e0:	4603      	mov	r3, r0
 80030e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030e4:	e00c      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3324      	adds	r3, #36	; 0x24
 80030ea:	2101      	movs	r1, #1
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fdf9 	bl	8003ce4 <RCCEx_PLL3_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030f6:	e003      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	75fb      	strb	r3, [r7, #23]
      break;
 80030fc:	e000      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80030fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003106:	4bb3      	ldr	r3, [pc, #716]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	f023 0207 	bic.w	r2, r3, #7
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003114:	49af      	ldr	r1, [pc, #700]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	658b      	str	r3, [r1, #88]	; 0x58
 800311a:	e001      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d044      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003136:	d01b      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800313c:	d805      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d022      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003148:	e01b      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314e:	d01d      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003154:	d01c      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003156:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800315a:	d01b      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800315c:	e011      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3304      	adds	r3, #4
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fd0b 	bl	8003b80 <RCCEx_PLL2_Config>
 800316a:	4603      	mov	r3, r0
 800316c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800316e:	e012      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3324      	adds	r3, #36	; 0x24
 8003174:	2102      	movs	r1, #2
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fdb4 	bl	8003ce4 <RCCEx_PLL3_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003180:	e009      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
      break;
 8003186:	e006      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003188:	bf00      	nop
 800318a:	e004      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800318c:	bf00      	nop
 800318e:	e002      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003190:	bf00      	nop
 8003192:	e000      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003196:	7dfb      	ldrb	r3, [r7, #23]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800319c:	4b8d      	ldr	r3, [pc, #564]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031aa:	498a      	ldr	r1, [pc, #552]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	654b      	str	r3, [r1, #84]	; 0x54
 80031b0:	e001      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d044      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031cc:	d01b      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80031ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d2:	d805      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d022      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80031d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80031de:	e01b      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80031e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e4:	d01d      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80031e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031ea:	d01c      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80031ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031f0:	d01b      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80031f2:	e011      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3304      	adds	r3, #4
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fcc0 	bl	8003b80 <RCCEx_PLL2_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003204:	e012      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3324      	adds	r3, #36	; 0x24
 800320a:	2102      	movs	r1, #2
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fd69 	bl	8003ce4 <RCCEx_PLL3_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003216:	e009      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	75fb      	strb	r3, [r7, #23]
      break;
 800321c:	e006      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800321e:	bf00      	nop
 8003220:	e004      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800322a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800322c:	7dfb      	ldrb	r3, [r7, #23]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003232:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003240:	4964      	ldr	r1, [pc, #400]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003242:	4313      	orrs	r3, r2
 8003244:	658b      	str	r3, [r1, #88]	; 0x58
 8003246:	e001      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b00      	cmp	r3, #0
 8003256:	d044      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800325e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003262:	d01b      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003268:	d805      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800326a:	2b00      	cmp	r3, #0
 800326c:	d022      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800326e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003272:	d00a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003274:	e01b      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327a:	d01d      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800327c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003280:	d01c      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003282:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003286:	d01b      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003288:	e011      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fc75 	bl	8003b80 <RCCEx_PLL2_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800329a:	e012      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3324      	adds	r3, #36	; 0x24
 80032a0:	2102      	movs	r1, #2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fd1e 	bl	8003ce4 <RCCEx_PLL3_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032ac:	e009      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	75fb      	strb	r3, [r7, #23]
      break;
 80032b2:	e006      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80032b4:	bf00      	nop
 80032b6:	e004      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80032b8:	bf00      	nop
 80032ba:	e002      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80032bc:	bf00      	nop
 80032be:	e000      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80032c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80032c8:	4b42      	ldr	r3, [pc, #264]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032d6:	493f      	ldr	r1, [pc, #252]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	658b      	str	r3, [r1, #88]	; 0x58
 80032dc:	e001      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032de:	7dfb      	ldrb	r3, [r7, #23]
 80032e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01b      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f8:	d10b      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3324      	adds	r3, #36	; 0x24
 80032fe:	2102      	movs	r1, #2
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fcef 	bl	8003ce4 <RCCEx_PLL3_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00c      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	75bb      	strb	r3, [r7, #22]
 8003310:	e009      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003312:	4b30      	ldr	r3, [pc, #192]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003320:	492c      	ldr	r1, [pc, #176]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003322:	4313      	orrs	r3, r2
 8003324:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01b      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333c:	d10b      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3324      	adds	r3, #36	; 0x24
 8003342:	2102      	movs	r1, #2
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fccd 	bl	8003ce4 <RCCEx_PLL3_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00c      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	75bb      	strb	r3, [r7, #22]
 8003354:	e009      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003356:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003364:	491b      	ldr	r1, [pc, #108]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003366:	4313      	orrs	r3, r2
 8003368:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d032      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003380:	d00d      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8003382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003386:	d016      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d111      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fbf4 	bl	8003b80 <RCCEx_PLL2_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800339c:	e00c      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3324      	adds	r3, #36	; 0x24
 80033a2:	2102      	movs	r1, #2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fc9d 	bl	8003ce4 <RCCEx_PLL3_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033ae:	e003      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	75fb      	strb	r3, [r7, #23]
      break;
 80033b4:	e000      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 80033b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033cc:	4901      	ldr	r1, [pc, #4]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	658b      	str	r3, [r1, #88]	; 0x58
 80033d2:	e003      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80033d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02f      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033f2:	d00c      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80033f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033f8:	d015      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80033fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033fe:	d10f      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003400:	4b79      	ldr	r3, [pc, #484]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	4a78      	ldr	r2, [pc, #480]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800340c:	e00c      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3324      	adds	r3, #36	; 0x24
 8003412:	2101      	movs	r1, #1
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fc65 	bl	8003ce4 <RCCEx_PLL3_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800341e:	e003      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	75fb      	strb	r3, [r7, #23]
      break;
 8003424:	e000      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8003426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10a      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800342e:	4b6e      	ldr	r3, [pc, #440]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003432:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343c:	496a      	ldr	r1, [pc, #424]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800343e:	4313      	orrs	r3, r2
 8003440:	654b      	str	r3, [r1, #84]	; 0x54
 8003442:	e001      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d029      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 800345c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003460:	d007      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8003462:	e00f      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003464:	4b60      	ldr	r3, [pc, #384]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	4a5f      	ldr	r2, [pc, #380]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800346a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003470:	e00b      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3304      	adds	r3, #4
 8003476:	2102      	movs	r1, #2
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fb81 	bl	8003b80 <RCCEx_PLL2_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003482:	e002      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	75fb      	strb	r3, [r7, #23]
      break;
 8003488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800348a:	7dfb      	ldrb	r3, [r7, #23]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003490:	4b55      	ldr	r3, [pc, #340]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003494:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349c:	4952      	ldr	r1, [pc, #328]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034a2:	e001      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3324      	adds	r3, #36	; 0x24
 80034b8:	2102      	movs	r1, #2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fc12 	bl	8003ce4 <RCCEx_PLL3_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d02f      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034de:	d00c      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xcee>
 80034e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e4:	d802      	bhi.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xce0>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d011      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80034ea:	e00d      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 80034ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f0:	d00f      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80034f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f6:	d00e      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 80034f8:	e006      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034fa:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	4a3a      	ldr	r2, [pc, #232]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003506:	e007      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	75fb      	strb	r3, [r7, #23]
      break;
 800350c:	e004      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8003516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800351e:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800352a:	492f      	ldr	r1, [pc, #188]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800352c:	4313      	orrs	r3, r2
 800352e:	654b      	str	r3, [r1, #84]	; 0x54
 8003530:	e001      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d008      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003546:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4926      	ldr	r1, [pc, #152]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003550:	4313      	orrs	r3, r2
 8003552:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d009      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003560:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800356e:	491e      	ldr	r1, [pc, #120]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003570:	4313      	orrs	r3, r2
 8003572:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003584:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358c:	4916      	ldr	r1, [pc, #88]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80035a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035a8:	6113      	str	r3, [r2, #16]
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035b4:	490c      	ldr	r1, [pc, #48]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	da08      	bge.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80035c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ce:	4906      	ldr	r1, [pc, #24]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80035d4:	7dbb      	ldrb	r3, [r7, #22]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	58024400 	.word	0x58024400

080035ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80035f0:	f7ff f8c4 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80035f4:	4601      	mov	r1, r0
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	4a04      	ldr	r2, [pc, #16]	; (8003614 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003602:	5cd3      	ldrb	r3, [r2, r3]
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	fa21 f303 	lsr.w	r3, r1, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	58024400 	.word	0x58024400
 8003614:	08006774 	.word	0x08006774

08003618 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003620:	4b9d      	ldr	r3, [pc, #628]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 800362a:	4b9b      	ldr	r3, [pc, #620]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	0b1b      	lsrs	r3, r3, #12
 8003630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003634:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8003636:	4b98      	ldr	r3, [pc, #608]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003640:	4b95      	ldr	r3, [pc, #596]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	08db      	lsrs	r3, r3, #3
 8003646:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	ee07 3a90 	vmov	s15, r3
 8003654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003658:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 810a 	beq.w	8003878 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d05a      	beq.n	8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 800366a:	2b01      	cmp	r3, #1
 800366c:	d302      	bcc.n	8003674 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 800366e:	2b02      	cmp	r3, #2
 8003670:	d078      	beq.n	8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8003672:	e099      	b.n	80037a8 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003674:	4b88      	ldr	r3, [pc, #544]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d02d      	beq.n	80036dc <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003680:	4b85      	ldr	r3, [pc, #532]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	08db      	lsrs	r3, r3, #3
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	4a84      	ldr	r2, [pc, #528]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
 8003690:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036aa:	4b7b      	ldr	r3, [pc, #492]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80036be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80038a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80036c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80036da:	e087      	b.n	80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80038a4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80036ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ee:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003702:	eddf 5a67 	vldr	s11, [pc, #412]	; 80038a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800370a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800370e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800371e:	e065      	b.n	80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80038a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800372e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003732:	4b59      	ldr	r3, [pc, #356]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003742:	ed97 6a03 	vldr	s12, [r7, #12]
 8003746:	eddf 5a56 	vldr	s11, [pc, #344]	; 80038a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800374a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800375a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003762:	e043      	b.n	80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80038ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003776:	4b48      	ldr	r3, [pc, #288]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003786:	ed97 6a03 	vldr	s12, [r7, #12]
 800378a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80038a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800378e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037a6:	e021      	b.n	80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80038a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80037b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ba:	4b37      	ldr	r3, [pc, #220]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80038a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80037d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80037ec:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	0a5b      	lsrs	r3, r3, #9
 80037f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003802:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003806:	edd7 6a07 	vldr	s13, [r7, #28]
 800380a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800380e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003812:	ee17 2a90 	vmov	r2, s15
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800381a:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	0c1b      	lsrs	r3, r3, #16
 8003820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003824:	ee07 3a90 	vmov	s15, r3
 8003828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003830:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003834:	edd7 6a07 	vldr	s13, [r7, #28]
 8003838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800383c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003840:	ee17 2a90 	vmov	r2, s15
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	0e1b      	lsrs	r3, r3, #24
 800384e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800385e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003862:	edd7 6a07 	vldr	s13, [r7, #28]
 8003866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800386a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800386e:	ee17 2a90 	vmov	r2, s15
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003876:	e008      	b.n	800388a <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]
}
 800388a:	bf00      	nop
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	58024400 	.word	0x58024400
 800389c:	03d09000 	.word	0x03d09000
 80038a0:	46000000 	.word	0x46000000
 80038a4:	4c742400 	.word	0x4c742400
 80038a8:	4a742400 	.word	0x4a742400
 80038ac:	4bbebc20 	.word	0x4bbebc20

080038b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b089      	sub	sp, #36	; 0x24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038b8:	4b9d      	ldr	r3, [pc, #628]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80038c2:	4b9b      	ldr	r3, [pc, #620]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	0d1b      	lsrs	r3, r3, #20
 80038c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038cc:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80038ce:	4b98      	ldr	r3, [pc, #608]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80038d8:	4b95      	ldr	r3, [pc, #596]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038dc:	08db      	lsrs	r3, r3, #3
 80038de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	fb02 f303 	mul.w	r3, r2, r3
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 810a 	beq.w	8003b10 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d05a      	beq.n	80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8003902:	2b01      	cmp	r3, #1
 8003904:	d302      	bcc.n	800390c <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8003906:	2b02      	cmp	r3, #2
 8003908:	d078      	beq.n	80039fc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800390a:	e099      	b.n	8003a40 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800390c:	4b88      	ldr	r3, [pc, #544]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02d      	beq.n	8003974 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003918:	4b85      	ldr	r3, [pc, #532]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	08db      	lsrs	r3, r3, #3
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	4a84      	ldr	r2, [pc, #528]	; (8003b34 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
 8003928:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	ee07 3a90 	vmov	s15, r3
 8003930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003942:	4b7b      	ldr	r3, [pc, #492]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003952:	ed97 6a03 	vldr	s12, [r7, #12]
 8003956:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800395a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800395e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003972:	e087      	b.n	8003a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b3c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003986:	4b6a      	ldr	r3, [pc, #424]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003996:	ed97 6a03 	vldr	s12, [r7, #12]
 800399a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800399e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039b6:	e065      	b.n	8003a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80039c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ca:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039da:	ed97 6a03 	vldr	s12, [r7, #12]
 80039de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80039e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039fa:	e043      	b.n	8003a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a0e:	4b48      	ldr	r3, [pc, #288]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a3e:	e021      	b.n	8003a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a52:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003a84:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	0a5b      	lsrs	r3, r3, #9
 8003a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aaa:	ee17 2a90 	vmov	r2, s15
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003ab2:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003abc:	ee07 3a90 	vmov	s15, r3
 8003ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad8:	ee17 2a90 	vmov	r2, s15
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	0e1b      	lsrs	r3, r3, #24
 8003ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003af6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b06:	ee17 2a90 	vmov	r2, s15
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003b0e:	e008      	b.n	8003b22 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	609a      	str	r2, [r3, #8]
}
 8003b22:	bf00      	nop
 8003b24:	3724      	adds	r7, #36	; 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	58024400 	.word	0x58024400
 8003b34:	03d09000 	.word	0x03d09000
 8003b38:	46000000 	.word	0x46000000
 8003b3c:	4c742400 	.word	0x4c742400
 8003b40:	4a742400 	.word	0x4a742400
 8003b44:	4bbebc20 	.word	0x4bbebc20

08003b48 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b4c:	f7fe fca4 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8003b50:	4601      	mov	r1, r0
 8003b52:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	4a06      	ldr	r2, [pc, #24]	; (8003b78 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8003b5e:	5cd3      	ldrb	r3, [r2, r3]
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	fa21 f303 	lsr.w	r3, r1, r3
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003b6a:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	58024400 	.word	0x58024400
 8003b78:	08006774 	.word	0x08006774
 8003b7c:	24000038 	.word	0x24000038

08003b80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b8e:	4b53      	ldr	r3, [pc, #332]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d101      	bne.n	8003b9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e099      	b.n	8003cd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b9e:	4b4f      	ldr	r3, [pc, #316]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a4e      	ldr	r2, [pc, #312]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003ba4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003baa:	f7fd fbdf 	bl	800136c <HAL_GetTick>
 8003bae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003bb2:	f7fd fbdb 	bl	800136c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e086      	b.n	8003cd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bc4:	4b45      	ldr	r3, [pc, #276]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f0      	bne.n	8003bb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003bd0:	4b42      	ldr	r3, [pc, #264]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	031b      	lsls	r3, r3, #12
 8003bde:	493f      	ldr	r1, [pc, #252]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	628b      	str	r3, [r1, #40]	; 0x28
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	025b      	lsls	r3, r3, #9
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	061b      	lsls	r3, r3, #24
 8003c10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c14:	4931      	ldr	r1, [pc, #196]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c1a:	4b30      	ldr	r3, [pc, #192]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	492d      	ldr	r1, [pc, #180]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	f023 0220 	bic.w	r2, r3, #32
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	4928      	ldr	r1, [pc, #160]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c3e:	4b27      	ldr	r3, [pc, #156]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c44:	f023 0310 	bic.w	r3, r3, #16
 8003c48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c4a:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <RCCEx_PLL2_Config+0x160>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	69d2      	ldr	r2, [r2, #28]
 8003c56:	00d2      	lsls	r2, r2, #3
 8003c58:	4920      	ldr	r1, [pc, #128]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c5e:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c64:	f043 0310 	orr.w	r3, r3, #16
 8003c68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c7c:	e00f      	b.n	8003c9e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d106      	bne.n	8003c92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c84:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c90:	e005      	b.n	8003c9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003c98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a0e      	ldr	r2, [pc, #56]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003ca4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003caa:	f7fd fb5f 	bl	800136c <HAL_GetTick>
 8003cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cb0:	e008      	b.n	8003cc4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003cb2:	f7fd fb5b 	bl	800136c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e006      	b.n	8003cd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <RCCEx_PLL2_Config+0x15c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	58024400 	.word	0x58024400
 8003ce0:	ffff0007 	.word	0xffff0007

08003ce4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cf2:	4b53      	ldr	r3, [pc, #332]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d101      	bne.n	8003d02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e099      	b.n	8003e36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d02:	4b4f      	ldr	r3, [pc, #316]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a4e      	ldr	r2, [pc, #312]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0e:	f7fd fb2d 	bl	800136c <HAL_GetTick>
 8003d12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d14:	e008      	b.n	8003d28 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d16:	f7fd fb29 	bl	800136c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e086      	b.n	8003e36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d28:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f0      	bne.n	8003d16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d34:	4b42      	ldr	r3, [pc, #264]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	051b      	lsls	r3, r3, #20
 8003d42:	493f      	ldr	r1, [pc, #252]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	628b      	str	r3, [r1, #40]	; 0x28
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	025b      	lsls	r3, r3, #9
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	061b      	lsls	r3, r3, #24
 8003d74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d78:	4931      	ldr	r1, [pc, #196]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d7e:	4b30      	ldr	r3, [pc, #192]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	492d      	ldr	r1, [pc, #180]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d90:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	4928      	ldr	r1, [pc, #160]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003da2:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <RCCEx_PLL3_Config+0x160>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	69d2      	ldr	r2, [r2, #28]
 8003dba:	00d2      	lsls	r2, r2, #3
 8003dbc:	4920      	ldr	r1, [pc, #128]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003dc2:	4b1f      	ldr	r3, [pc, #124]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003dda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003de0:	e00f      	b.n	8003e02 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d106      	bne.n	8003df6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003de8:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003dee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003df2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003df4:	e005      	b.n	8003e02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003df6:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	4a11      	ldr	r2, [pc, #68]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003dfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e0e:	f7fd faad 	bl	800136c <HAL_GetTick>
 8003e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e14:	e008      	b.n	8003e28 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e16:	f7fd faa9 	bl	800136c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e006      	b.n	8003e36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <RCCEx_PLL3_Config+0x15c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	58024400 	.word	0x58024400
 8003e44:	ffff0007 	.word	0xffff0007

08003e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e042      	b.n	8003ee0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d106      	bne.n	8003e72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7fd f89f 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2224      	movs	r2, #36	; 0x24
 8003e76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f82c 	bl	8003ee8 <UART_SetConfig>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e022      	b.n	8003ee0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f002 f99e 	bl	80061e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ec6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f002 fa25 	bl	8006328 <UART_CheckIdleState>
 8003ede:	4603      	mov	r3, r0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003eec:	b090      	sub	sp, #64	; 0x40
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4bc1      	ldr	r3, [pc, #772]	; (8004230 <UART_SetConfig+0x348>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f32:	430b      	orrs	r3, r1
 8003f34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4ab7      	ldr	r2, [pc, #732]	; (8004234 <UART_SetConfig+0x34c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d004      	beq.n	8003f66 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f62:	4313      	orrs	r3, r2
 8003f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	4bb2      	ldr	r3, [pc, #712]	; (8004238 <UART_SetConfig+0x350>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f76:	430b      	orrs	r3, r1
 8003f78:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	f023 010f 	bic.w	r1, r3, #15
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4aa9      	ldr	r2, [pc, #676]	; (800423c <UART_SetConfig+0x354>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d177      	bne.n	800408a <UART_SetConfig+0x1a2>
 8003f9a:	4ba9      	ldr	r3, [pc, #676]	; (8004240 <UART_SetConfig+0x358>)
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fa2:	2b28      	cmp	r3, #40	; 0x28
 8003fa4:	d86c      	bhi.n	8004080 <UART_SetConfig+0x198>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0xc4>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08004051 	.word	0x08004051
 8003fb0:	08004081 	.word	0x08004081
 8003fb4:	08004081 	.word	0x08004081
 8003fb8:	08004081 	.word	0x08004081
 8003fbc:	08004081 	.word	0x08004081
 8003fc0:	08004081 	.word	0x08004081
 8003fc4:	08004081 	.word	0x08004081
 8003fc8:	08004081 	.word	0x08004081
 8003fcc:	08004059 	.word	0x08004059
 8003fd0:	08004081 	.word	0x08004081
 8003fd4:	08004081 	.word	0x08004081
 8003fd8:	08004081 	.word	0x08004081
 8003fdc:	08004081 	.word	0x08004081
 8003fe0:	08004081 	.word	0x08004081
 8003fe4:	08004081 	.word	0x08004081
 8003fe8:	08004081 	.word	0x08004081
 8003fec:	08004061 	.word	0x08004061
 8003ff0:	08004081 	.word	0x08004081
 8003ff4:	08004081 	.word	0x08004081
 8003ff8:	08004081 	.word	0x08004081
 8003ffc:	08004081 	.word	0x08004081
 8004000:	08004081 	.word	0x08004081
 8004004:	08004081 	.word	0x08004081
 8004008:	08004081 	.word	0x08004081
 800400c:	08004069 	.word	0x08004069
 8004010:	08004081 	.word	0x08004081
 8004014:	08004081 	.word	0x08004081
 8004018:	08004081 	.word	0x08004081
 800401c:	08004081 	.word	0x08004081
 8004020:	08004081 	.word	0x08004081
 8004024:	08004081 	.word	0x08004081
 8004028:	08004081 	.word	0x08004081
 800402c:	08004071 	.word	0x08004071
 8004030:	08004081 	.word	0x08004081
 8004034:	08004081 	.word	0x08004081
 8004038:	08004081 	.word	0x08004081
 800403c:	08004081 	.word	0x08004081
 8004040:	08004081 	.word	0x08004081
 8004044:	08004081 	.word	0x08004081
 8004048:	08004081 	.word	0x08004081
 800404c:	08004079 	.word	0x08004079
 8004050:	2301      	movs	r3, #1
 8004052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004056:	e233      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004058:	2304      	movs	r3, #4
 800405a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800405e:	e22f      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004060:	2308      	movs	r3, #8
 8004062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004066:	e22b      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004068:	2310      	movs	r3, #16
 800406a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800406e:	e227      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004070:	2320      	movs	r3, #32
 8004072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004076:	e223      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004078:	2340      	movs	r3, #64	; 0x40
 800407a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800407e:	e21f      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004086:	bf00      	nop
 8004088:	e21a      	b.n	80044c0 <UART_SetConfig+0x5d8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a6d      	ldr	r2, [pc, #436]	; (8004244 <UART_SetConfig+0x35c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d132      	bne.n	80040fa <UART_SetConfig+0x212>
 8004094:	4b6a      	ldr	r3, [pc, #424]	; (8004240 <UART_SetConfig+0x358>)
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	2b05      	cmp	r3, #5
 800409e:	d827      	bhi.n	80040f0 <UART_SetConfig+0x208>
 80040a0:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <UART_SetConfig+0x1c0>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040c1 	.word	0x080040c1
 80040ac:	080040c9 	.word	0x080040c9
 80040b0:	080040d1 	.word	0x080040d1
 80040b4:	080040d9 	.word	0x080040d9
 80040b8:	080040e1 	.word	0x080040e1
 80040bc:	080040e9 	.word	0x080040e9
 80040c0:	2300      	movs	r3, #0
 80040c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040c6:	e1fb      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80040c8:	2304      	movs	r3, #4
 80040ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040ce:	e1f7      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80040d0:	2308      	movs	r3, #8
 80040d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040d6:	e1f3      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80040d8:	2310      	movs	r3, #16
 80040da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040de:	e1ef      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80040e0:	2320      	movs	r3, #32
 80040e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040e6:	e1eb      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80040e8:	2340      	movs	r3, #64	; 0x40
 80040ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040ee:	e1e7      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040f6:	bf00      	nop
 80040f8:	e1e2      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a52      	ldr	r2, [pc, #328]	; (8004248 <UART_SetConfig+0x360>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d132      	bne.n	800416a <UART_SetConfig+0x282>
 8004104:	4b4e      	ldr	r3, [pc, #312]	; (8004240 <UART_SetConfig+0x358>)
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	2b05      	cmp	r3, #5
 800410e:	d827      	bhi.n	8004160 <UART_SetConfig+0x278>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <UART_SetConfig+0x230>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	08004131 	.word	0x08004131
 800411c:	08004139 	.word	0x08004139
 8004120:	08004141 	.word	0x08004141
 8004124:	08004149 	.word	0x08004149
 8004128:	08004151 	.word	0x08004151
 800412c:	08004159 	.word	0x08004159
 8004130:	2300      	movs	r3, #0
 8004132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004136:	e1c3      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004138:	2304      	movs	r3, #4
 800413a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800413e:	e1bf      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004140:	2308      	movs	r3, #8
 8004142:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004146:	e1bb      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004148:	2310      	movs	r3, #16
 800414a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800414e:	e1b7      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004150:	2320      	movs	r3, #32
 8004152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004156:	e1b3      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004158:	2340      	movs	r3, #64	; 0x40
 800415a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800415e:	e1af      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004166:	bf00      	nop
 8004168:	e1aa      	b.n	80044c0 <UART_SetConfig+0x5d8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a37      	ldr	r2, [pc, #220]	; (800424c <UART_SetConfig+0x364>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d132      	bne.n	80041da <UART_SetConfig+0x2f2>
 8004174:	4b32      	ldr	r3, [pc, #200]	; (8004240 <UART_SetConfig+0x358>)
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	2b05      	cmp	r3, #5
 800417e:	d827      	bhi.n	80041d0 <UART_SetConfig+0x2e8>
 8004180:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <UART_SetConfig+0x2a0>)
 8004182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004186:	bf00      	nop
 8004188:	080041a1 	.word	0x080041a1
 800418c:	080041a9 	.word	0x080041a9
 8004190:	080041b1 	.word	0x080041b1
 8004194:	080041b9 	.word	0x080041b9
 8004198:	080041c1 	.word	0x080041c1
 800419c:	080041c9 	.word	0x080041c9
 80041a0:	2300      	movs	r3, #0
 80041a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041a6:	e18b      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80041a8:	2304      	movs	r3, #4
 80041aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041ae:	e187      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80041b0:	2308      	movs	r3, #8
 80041b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041b6:	e183      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80041b8:	2310      	movs	r3, #16
 80041ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041be:	e17f      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80041c0:	2320      	movs	r3, #32
 80041c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041c6:	e17b      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80041c8:	2340      	movs	r3, #64	; 0x40
 80041ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041ce:	e177      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041d6:	bf00      	nop
 80041d8:	e172      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <UART_SetConfig+0x368>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d144      	bne.n	800426e <UART_SetConfig+0x386>
 80041e4:	4b16      	ldr	r3, [pc, #88]	; (8004240 <UART_SetConfig+0x358>)
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	2b05      	cmp	r3, #5
 80041ee:	d839      	bhi.n	8004264 <UART_SetConfig+0x37c>
 80041f0:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <UART_SetConfig+0x310>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	08004211 	.word	0x08004211
 80041fc:	08004219 	.word	0x08004219
 8004200:	08004221 	.word	0x08004221
 8004204:	08004229 	.word	0x08004229
 8004208:	08004255 	.word	0x08004255
 800420c:	0800425d 	.word	0x0800425d
 8004210:	2300      	movs	r3, #0
 8004212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004216:	e153      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004218:	2304      	movs	r3, #4
 800421a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800421e:	e14f      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004220:	2308      	movs	r3, #8
 8004222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004226:	e14b      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004228:	2310      	movs	r3, #16
 800422a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800422e:	e147      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004230:	cfff69f3 	.word	0xcfff69f3
 8004234:	58000c00 	.word	0x58000c00
 8004238:	11fff4ff 	.word	0x11fff4ff
 800423c:	40011000 	.word	0x40011000
 8004240:	58024400 	.word	0x58024400
 8004244:	40004400 	.word	0x40004400
 8004248:	40004800 	.word	0x40004800
 800424c:	40004c00 	.word	0x40004c00
 8004250:	40005000 	.word	0x40005000
 8004254:	2320      	movs	r3, #32
 8004256:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800425a:	e131      	b.n	80044c0 <UART_SetConfig+0x5d8>
 800425c:	2340      	movs	r3, #64	; 0x40
 800425e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004262:	e12d      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800426a:	bf00      	nop
 800426c:	e128      	b.n	80044c0 <UART_SetConfig+0x5d8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4ac3      	ldr	r2, [pc, #780]	; (8004580 <UART_SetConfig+0x698>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d178      	bne.n	800436a <UART_SetConfig+0x482>
 8004278:	4bc2      	ldr	r3, [pc, #776]	; (8004584 <UART_SetConfig+0x69c>)
 800427a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004280:	2b28      	cmp	r3, #40	; 0x28
 8004282:	d86d      	bhi.n	8004360 <UART_SetConfig+0x478>
 8004284:	a201      	add	r2, pc, #4	; (adr r2, 800428c <UART_SetConfig+0x3a4>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	08004331 	.word	0x08004331
 8004290:	08004361 	.word	0x08004361
 8004294:	08004361 	.word	0x08004361
 8004298:	08004361 	.word	0x08004361
 800429c:	08004361 	.word	0x08004361
 80042a0:	08004361 	.word	0x08004361
 80042a4:	08004361 	.word	0x08004361
 80042a8:	08004361 	.word	0x08004361
 80042ac:	08004339 	.word	0x08004339
 80042b0:	08004361 	.word	0x08004361
 80042b4:	08004361 	.word	0x08004361
 80042b8:	08004361 	.word	0x08004361
 80042bc:	08004361 	.word	0x08004361
 80042c0:	08004361 	.word	0x08004361
 80042c4:	08004361 	.word	0x08004361
 80042c8:	08004361 	.word	0x08004361
 80042cc:	08004341 	.word	0x08004341
 80042d0:	08004361 	.word	0x08004361
 80042d4:	08004361 	.word	0x08004361
 80042d8:	08004361 	.word	0x08004361
 80042dc:	08004361 	.word	0x08004361
 80042e0:	08004361 	.word	0x08004361
 80042e4:	08004361 	.word	0x08004361
 80042e8:	08004361 	.word	0x08004361
 80042ec:	08004349 	.word	0x08004349
 80042f0:	08004361 	.word	0x08004361
 80042f4:	08004361 	.word	0x08004361
 80042f8:	08004361 	.word	0x08004361
 80042fc:	08004361 	.word	0x08004361
 8004300:	08004361 	.word	0x08004361
 8004304:	08004361 	.word	0x08004361
 8004308:	08004361 	.word	0x08004361
 800430c:	08004351 	.word	0x08004351
 8004310:	08004361 	.word	0x08004361
 8004314:	08004361 	.word	0x08004361
 8004318:	08004361 	.word	0x08004361
 800431c:	08004361 	.word	0x08004361
 8004320:	08004361 	.word	0x08004361
 8004324:	08004361 	.word	0x08004361
 8004328:	08004361 	.word	0x08004361
 800432c:	08004359 	.word	0x08004359
 8004330:	2301      	movs	r3, #1
 8004332:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004336:	e0c3      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004338:	2304      	movs	r3, #4
 800433a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800433e:	e0bf      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004340:	2308      	movs	r3, #8
 8004342:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004346:	e0bb      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004348:	2310      	movs	r3, #16
 800434a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800434e:	e0b7      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004350:	2320      	movs	r3, #32
 8004352:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004356:	e0b3      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004358:	2340      	movs	r3, #64	; 0x40
 800435a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800435e:	e0af      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004366:	bf00      	nop
 8004368:	e0aa      	b.n	80044c0 <UART_SetConfig+0x5d8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a86      	ldr	r2, [pc, #536]	; (8004588 <UART_SetConfig+0x6a0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d132      	bne.n	80043da <UART_SetConfig+0x4f2>
 8004374:	4b83      	ldr	r3, [pc, #524]	; (8004584 <UART_SetConfig+0x69c>)
 8004376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	2b05      	cmp	r3, #5
 800437e:	d827      	bhi.n	80043d0 <UART_SetConfig+0x4e8>
 8004380:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <UART_SetConfig+0x4a0>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	080043a1 	.word	0x080043a1
 800438c:	080043a9 	.word	0x080043a9
 8004390:	080043b1 	.word	0x080043b1
 8004394:	080043b9 	.word	0x080043b9
 8004398:	080043c1 	.word	0x080043c1
 800439c:	080043c9 	.word	0x080043c9
 80043a0:	2300      	movs	r3, #0
 80043a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043a6:	e08b      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80043a8:	2304      	movs	r3, #4
 80043aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043ae:	e087      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80043b0:	2308      	movs	r3, #8
 80043b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043b6:	e083      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80043b8:	2310      	movs	r3, #16
 80043ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043be:	e07f      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80043c0:	2320      	movs	r3, #32
 80043c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043c6:	e07b      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80043c8:	2340      	movs	r3, #64	; 0x40
 80043ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043ce:	e077      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043d6:	bf00      	nop
 80043d8:	e072      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6b      	ldr	r2, [pc, #428]	; (800458c <UART_SetConfig+0x6a4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d132      	bne.n	800444a <UART_SetConfig+0x562>
 80043e4:	4b67      	ldr	r3, [pc, #412]	; (8004584 <UART_SetConfig+0x69c>)
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d827      	bhi.n	8004440 <UART_SetConfig+0x558>
 80043f0:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <UART_SetConfig+0x510>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	08004411 	.word	0x08004411
 80043fc:	08004419 	.word	0x08004419
 8004400:	08004421 	.word	0x08004421
 8004404:	08004429 	.word	0x08004429
 8004408:	08004431 	.word	0x08004431
 800440c:	08004439 	.word	0x08004439
 8004410:	2300      	movs	r3, #0
 8004412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004416:	e053      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004418:	2304      	movs	r3, #4
 800441a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800441e:	e04f      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004420:	2308      	movs	r3, #8
 8004422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004426:	e04b      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004428:	2310      	movs	r3, #16
 800442a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800442e:	e047      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004430:	2320      	movs	r3, #32
 8004432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004436:	e043      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004438:	2340      	movs	r3, #64	; 0x40
 800443a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800443e:	e03f      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004440:	2380      	movs	r3, #128	; 0x80
 8004442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004446:	bf00      	nop
 8004448:	e03a      	b.n	80044c0 <UART_SetConfig+0x5d8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a50      	ldr	r2, [pc, #320]	; (8004590 <UART_SetConfig+0x6a8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d132      	bne.n	80044ba <UART_SetConfig+0x5d2>
 8004454:	4b4b      	ldr	r3, [pc, #300]	; (8004584 <UART_SetConfig+0x69c>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	2b05      	cmp	r3, #5
 800445e:	d827      	bhi.n	80044b0 <UART_SetConfig+0x5c8>
 8004460:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <UART_SetConfig+0x580>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	08004481 	.word	0x08004481
 800446c:	08004489 	.word	0x08004489
 8004470:	08004491 	.word	0x08004491
 8004474:	08004499 	.word	0x08004499
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044a9 	.word	0x080044a9
 8004480:	2302      	movs	r3, #2
 8004482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004486:	e01b      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800448e:	e017      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004496:	e013      	b.n	80044c0 <UART_SetConfig+0x5d8>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800449e:	e00f      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80044a0:	2320      	movs	r3, #32
 80044a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044a6:	e00b      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80044a8:	2340      	movs	r3, #64	; 0x40
 80044aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044ae:	e007      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044b6:	bf00      	nop
 80044b8:	e002      	b.n	80044c0 <UART_SetConfig+0x5d8>
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a32      	ldr	r2, [pc, #200]	; (8004590 <UART_SetConfig+0x6a8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	f040 86f7 	bne.w	80052ba <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	f000 80c0 	beq.w	8004656 <UART_SetConfig+0x76e>
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	dc04      	bgt.n	80044e4 <UART_SetConfig+0x5fc>
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d00c      	beq.n	80044f8 <UART_SetConfig+0x610>
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d065      	beq.n	80045ae <UART_SetConfig+0x6c6>
 80044e2:	e27a      	b.n	80049da <UART_SetConfig+0xaf2>
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	f000 81b0 	beq.w	800484a <UART_SetConfig+0x962>
 80044ea:	2b40      	cmp	r3, #64	; 0x40
 80044ec:	f000 821e 	beq.w	800492c <UART_SetConfig+0xa44>
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	f000 8104 	beq.w	80046fe <UART_SetConfig+0x816>
 80044f6:	e270      	b.n	80049da <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80044f8:	f7ff f878 	bl	80035ec <HAL_RCCEx_GetD3PCLK1Freq>
 80044fc:	4602      	mov	r2, r0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	d04e      	beq.n	80045a4 <UART_SetConfig+0x6bc>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2b01      	cmp	r3, #1
 800450c:	d048      	beq.n	80045a0 <UART_SetConfig+0x6b8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	2b02      	cmp	r3, #2
 8004514:	d042      	beq.n	800459c <UART_SetConfig+0x6b4>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	2b03      	cmp	r3, #3
 800451c:	d03c      	beq.n	8004598 <UART_SetConfig+0x6b0>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	2b04      	cmp	r3, #4
 8004524:	d036      	beq.n	8004594 <UART_SetConfig+0x6ac>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	2b05      	cmp	r3, #5
 800452c:	d026      	beq.n	800457c <UART_SetConfig+0x694>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	2b06      	cmp	r3, #6
 8004534:	d020      	beq.n	8004578 <UART_SetConfig+0x690>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	2b07      	cmp	r3, #7
 800453c:	d01a      	beq.n	8004574 <UART_SetConfig+0x68c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2b08      	cmp	r3, #8
 8004544:	d014      	beq.n	8004570 <UART_SetConfig+0x688>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b09      	cmp	r3, #9
 800454c:	d00e      	beq.n	800456c <UART_SetConfig+0x684>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b0a      	cmp	r3, #10
 8004554:	d008      	beq.n	8004568 <UART_SetConfig+0x680>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	2b0b      	cmp	r3, #11
 800455c:	d102      	bne.n	8004564 <UART_SetConfig+0x67c>
 800455e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004562:	e020      	b.n	80045a6 <UART_SetConfig+0x6be>
 8004564:	2301      	movs	r3, #1
 8004566:	e01e      	b.n	80045a6 <UART_SetConfig+0x6be>
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	e01c      	b.n	80045a6 <UART_SetConfig+0x6be>
 800456c:	2340      	movs	r3, #64	; 0x40
 800456e:	e01a      	b.n	80045a6 <UART_SetConfig+0x6be>
 8004570:	2320      	movs	r3, #32
 8004572:	e018      	b.n	80045a6 <UART_SetConfig+0x6be>
 8004574:	2310      	movs	r3, #16
 8004576:	e016      	b.n	80045a6 <UART_SetConfig+0x6be>
 8004578:	230c      	movs	r3, #12
 800457a:	e014      	b.n	80045a6 <UART_SetConfig+0x6be>
 800457c:	230a      	movs	r3, #10
 800457e:	e012      	b.n	80045a6 <UART_SetConfig+0x6be>
 8004580:	40011400 	.word	0x40011400
 8004584:	58024400 	.word	0x58024400
 8004588:	40007800 	.word	0x40007800
 800458c:	40007c00 	.word	0x40007c00
 8004590:	58000c00 	.word	0x58000c00
 8004594:	2308      	movs	r3, #8
 8004596:	e006      	b.n	80045a6 <UART_SetConfig+0x6be>
 8004598:	2306      	movs	r3, #6
 800459a:	e004      	b.n	80045a6 <UART_SetConfig+0x6be>
 800459c:	2304      	movs	r3, #4
 800459e:	e002      	b.n	80045a6 <UART_SetConfig+0x6be>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e000      	b.n	80045a6 <UART_SetConfig+0x6be>
 80045a4:	2301      	movs	r3, #1
 80045a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045ac:	e219      	b.n	80049e2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045ae:	f107 0318 	add.w	r3, r7, #24
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff f830 	bl	8003618 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d044      	beq.n	800464c <UART_SetConfig+0x764>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d03e      	beq.n	8004648 <UART_SetConfig+0x760>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d038      	beq.n	8004644 <UART_SetConfig+0x75c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d032      	beq.n	8004640 <UART_SetConfig+0x758>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d02c      	beq.n	800463c <UART_SetConfig+0x754>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d026      	beq.n	8004638 <UART_SetConfig+0x750>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b06      	cmp	r3, #6
 80045f0:	d020      	beq.n	8004634 <UART_SetConfig+0x74c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	2b07      	cmp	r3, #7
 80045f8:	d01a      	beq.n	8004630 <UART_SetConfig+0x748>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d014      	beq.n	800462c <UART_SetConfig+0x744>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b09      	cmp	r3, #9
 8004608:	d00e      	beq.n	8004628 <UART_SetConfig+0x740>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	2b0a      	cmp	r3, #10
 8004610:	d008      	beq.n	8004624 <UART_SetConfig+0x73c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	2b0b      	cmp	r3, #11
 8004618:	d102      	bne.n	8004620 <UART_SetConfig+0x738>
 800461a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800461e:	e016      	b.n	800464e <UART_SetConfig+0x766>
 8004620:	2301      	movs	r3, #1
 8004622:	e014      	b.n	800464e <UART_SetConfig+0x766>
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	e012      	b.n	800464e <UART_SetConfig+0x766>
 8004628:	2340      	movs	r3, #64	; 0x40
 800462a:	e010      	b.n	800464e <UART_SetConfig+0x766>
 800462c:	2320      	movs	r3, #32
 800462e:	e00e      	b.n	800464e <UART_SetConfig+0x766>
 8004630:	2310      	movs	r3, #16
 8004632:	e00c      	b.n	800464e <UART_SetConfig+0x766>
 8004634:	230c      	movs	r3, #12
 8004636:	e00a      	b.n	800464e <UART_SetConfig+0x766>
 8004638:	230a      	movs	r3, #10
 800463a:	e008      	b.n	800464e <UART_SetConfig+0x766>
 800463c:	2308      	movs	r3, #8
 800463e:	e006      	b.n	800464e <UART_SetConfig+0x766>
 8004640:	2306      	movs	r3, #6
 8004642:	e004      	b.n	800464e <UART_SetConfig+0x766>
 8004644:	2304      	movs	r3, #4
 8004646:	e002      	b.n	800464e <UART_SetConfig+0x766>
 8004648:	2302      	movs	r3, #2
 800464a:	e000      	b.n	800464e <UART_SetConfig+0x766>
 800464c:	2301      	movs	r3, #1
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004654:	e1c5      	b.n	80049e2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004656:	f107 030c 	add.w	r3, r7, #12
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff f928 	bl	80038b0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2b00      	cmp	r3, #0
 8004668:	d044      	beq.n	80046f4 <UART_SetConfig+0x80c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	2b01      	cmp	r3, #1
 8004670:	d03e      	beq.n	80046f0 <UART_SetConfig+0x808>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	2b02      	cmp	r3, #2
 8004678:	d038      	beq.n	80046ec <UART_SetConfig+0x804>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	2b03      	cmp	r3, #3
 8004680:	d032      	beq.n	80046e8 <UART_SetConfig+0x800>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	2b04      	cmp	r3, #4
 8004688:	d02c      	beq.n	80046e4 <UART_SetConfig+0x7fc>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	2b05      	cmp	r3, #5
 8004690:	d026      	beq.n	80046e0 <UART_SetConfig+0x7f8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b06      	cmp	r3, #6
 8004698:	d020      	beq.n	80046dc <UART_SetConfig+0x7f4>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	2b07      	cmp	r3, #7
 80046a0:	d01a      	beq.n	80046d8 <UART_SetConfig+0x7f0>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d014      	beq.n	80046d4 <UART_SetConfig+0x7ec>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2b09      	cmp	r3, #9
 80046b0:	d00e      	beq.n	80046d0 <UART_SetConfig+0x7e8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2b0a      	cmp	r3, #10
 80046b8:	d008      	beq.n	80046cc <UART_SetConfig+0x7e4>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	2b0b      	cmp	r3, #11
 80046c0:	d102      	bne.n	80046c8 <UART_SetConfig+0x7e0>
 80046c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046c6:	e016      	b.n	80046f6 <UART_SetConfig+0x80e>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e014      	b.n	80046f6 <UART_SetConfig+0x80e>
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	e012      	b.n	80046f6 <UART_SetConfig+0x80e>
 80046d0:	2340      	movs	r3, #64	; 0x40
 80046d2:	e010      	b.n	80046f6 <UART_SetConfig+0x80e>
 80046d4:	2320      	movs	r3, #32
 80046d6:	e00e      	b.n	80046f6 <UART_SetConfig+0x80e>
 80046d8:	2310      	movs	r3, #16
 80046da:	e00c      	b.n	80046f6 <UART_SetConfig+0x80e>
 80046dc:	230c      	movs	r3, #12
 80046de:	e00a      	b.n	80046f6 <UART_SetConfig+0x80e>
 80046e0:	230a      	movs	r3, #10
 80046e2:	e008      	b.n	80046f6 <UART_SetConfig+0x80e>
 80046e4:	2308      	movs	r3, #8
 80046e6:	e006      	b.n	80046f6 <UART_SetConfig+0x80e>
 80046e8:	2306      	movs	r3, #6
 80046ea:	e004      	b.n	80046f6 <UART_SetConfig+0x80e>
 80046ec:	2304      	movs	r3, #4
 80046ee:	e002      	b.n	80046f6 <UART_SetConfig+0x80e>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e000      	b.n	80046f6 <UART_SetConfig+0x80e>
 80046f4:	2301      	movs	r3, #1
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046fc:	e171      	b.n	80049e2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046fe:	4b7a      	ldr	r3, [pc, #488]	; (80048e8 <UART_SetConfig+0xa00>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d054      	beq.n	80047b4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800470a:	4b77      	ldr	r3, [pc, #476]	; (80048e8 <UART_SetConfig+0xa00>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	08db      	lsrs	r3, r3, #3
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	4a75      	ldr	r2, [pc, #468]	; (80048ec <UART_SetConfig+0xa04>)
 8004716:	40da      	lsrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	2b00      	cmp	r3, #0
 800471e:	d044      	beq.n	80047aa <UART_SetConfig+0x8c2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2b01      	cmp	r3, #1
 8004726:	d03e      	beq.n	80047a6 <UART_SetConfig+0x8be>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	2b02      	cmp	r3, #2
 800472e:	d038      	beq.n	80047a2 <UART_SetConfig+0x8ba>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	2b03      	cmp	r3, #3
 8004736:	d032      	beq.n	800479e <UART_SetConfig+0x8b6>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	2b04      	cmp	r3, #4
 800473e:	d02c      	beq.n	800479a <UART_SetConfig+0x8b2>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	2b05      	cmp	r3, #5
 8004746:	d026      	beq.n	8004796 <UART_SetConfig+0x8ae>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	2b06      	cmp	r3, #6
 800474e:	d020      	beq.n	8004792 <UART_SetConfig+0x8aa>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	2b07      	cmp	r3, #7
 8004756:	d01a      	beq.n	800478e <UART_SetConfig+0x8a6>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	2b08      	cmp	r3, #8
 800475e:	d014      	beq.n	800478a <UART_SetConfig+0x8a2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	2b09      	cmp	r3, #9
 8004766:	d00e      	beq.n	8004786 <UART_SetConfig+0x89e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	2b0a      	cmp	r3, #10
 800476e:	d008      	beq.n	8004782 <UART_SetConfig+0x89a>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	2b0b      	cmp	r3, #11
 8004776:	d102      	bne.n	800477e <UART_SetConfig+0x896>
 8004778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800477c:	e016      	b.n	80047ac <UART_SetConfig+0x8c4>
 800477e:	2301      	movs	r3, #1
 8004780:	e014      	b.n	80047ac <UART_SetConfig+0x8c4>
 8004782:	2380      	movs	r3, #128	; 0x80
 8004784:	e012      	b.n	80047ac <UART_SetConfig+0x8c4>
 8004786:	2340      	movs	r3, #64	; 0x40
 8004788:	e010      	b.n	80047ac <UART_SetConfig+0x8c4>
 800478a:	2320      	movs	r3, #32
 800478c:	e00e      	b.n	80047ac <UART_SetConfig+0x8c4>
 800478e:	2310      	movs	r3, #16
 8004790:	e00c      	b.n	80047ac <UART_SetConfig+0x8c4>
 8004792:	230c      	movs	r3, #12
 8004794:	e00a      	b.n	80047ac <UART_SetConfig+0x8c4>
 8004796:	230a      	movs	r3, #10
 8004798:	e008      	b.n	80047ac <UART_SetConfig+0x8c4>
 800479a:	2308      	movs	r3, #8
 800479c:	e006      	b.n	80047ac <UART_SetConfig+0x8c4>
 800479e:	2306      	movs	r3, #6
 80047a0:	e004      	b.n	80047ac <UART_SetConfig+0x8c4>
 80047a2:	2304      	movs	r3, #4
 80047a4:	e002      	b.n	80047ac <UART_SetConfig+0x8c4>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e000      	b.n	80047ac <UART_SetConfig+0x8c4>
 80047aa:	2301      	movs	r3, #1
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80047b2:	e116      	b.n	80049e2 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d043      	beq.n	8004844 <UART_SetConfig+0x95c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d03d      	beq.n	8004840 <UART_SetConfig+0x958>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d037      	beq.n	800483c <UART_SetConfig+0x954>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d031      	beq.n	8004838 <UART_SetConfig+0x950>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d02b      	beq.n	8004834 <UART_SetConfig+0x94c>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	2b05      	cmp	r3, #5
 80047e2:	d025      	beq.n	8004830 <UART_SetConfig+0x948>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	2b06      	cmp	r3, #6
 80047ea:	d01f      	beq.n	800482c <UART_SetConfig+0x944>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	2b07      	cmp	r3, #7
 80047f2:	d019      	beq.n	8004828 <UART_SetConfig+0x940>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d013      	beq.n	8004824 <UART_SetConfig+0x93c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	2b09      	cmp	r3, #9
 8004802:	d00d      	beq.n	8004820 <UART_SetConfig+0x938>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	2b0a      	cmp	r3, #10
 800480a:	d007      	beq.n	800481c <UART_SetConfig+0x934>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	2b0b      	cmp	r3, #11
 8004812:	d101      	bne.n	8004818 <UART_SetConfig+0x930>
 8004814:	4b36      	ldr	r3, [pc, #216]	; (80048f0 <UART_SetConfig+0xa08>)
 8004816:	e016      	b.n	8004846 <UART_SetConfig+0x95e>
 8004818:	4b34      	ldr	r3, [pc, #208]	; (80048ec <UART_SetConfig+0xa04>)
 800481a:	e014      	b.n	8004846 <UART_SetConfig+0x95e>
 800481c:	4b35      	ldr	r3, [pc, #212]	; (80048f4 <UART_SetConfig+0xa0c>)
 800481e:	e012      	b.n	8004846 <UART_SetConfig+0x95e>
 8004820:	4b35      	ldr	r3, [pc, #212]	; (80048f8 <UART_SetConfig+0xa10>)
 8004822:	e010      	b.n	8004846 <UART_SetConfig+0x95e>
 8004824:	4b35      	ldr	r3, [pc, #212]	; (80048fc <UART_SetConfig+0xa14>)
 8004826:	e00e      	b.n	8004846 <UART_SetConfig+0x95e>
 8004828:	4b35      	ldr	r3, [pc, #212]	; (8004900 <UART_SetConfig+0xa18>)
 800482a:	e00c      	b.n	8004846 <UART_SetConfig+0x95e>
 800482c:	4b35      	ldr	r3, [pc, #212]	; (8004904 <UART_SetConfig+0xa1c>)
 800482e:	e00a      	b.n	8004846 <UART_SetConfig+0x95e>
 8004830:	4b35      	ldr	r3, [pc, #212]	; (8004908 <UART_SetConfig+0xa20>)
 8004832:	e008      	b.n	8004846 <UART_SetConfig+0x95e>
 8004834:	4b35      	ldr	r3, [pc, #212]	; (800490c <UART_SetConfig+0xa24>)
 8004836:	e006      	b.n	8004846 <UART_SetConfig+0x95e>
 8004838:	4b35      	ldr	r3, [pc, #212]	; (8004910 <UART_SetConfig+0xa28>)
 800483a:	e004      	b.n	8004846 <UART_SetConfig+0x95e>
 800483c:	4b35      	ldr	r3, [pc, #212]	; (8004914 <UART_SetConfig+0xa2c>)
 800483e:	e002      	b.n	8004846 <UART_SetConfig+0x95e>
 8004840:	4b35      	ldr	r3, [pc, #212]	; (8004918 <UART_SetConfig+0xa30>)
 8004842:	e000      	b.n	8004846 <UART_SetConfig+0x95e>
 8004844:	4b29      	ldr	r3, [pc, #164]	; (80048ec <UART_SetConfig+0xa04>)
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004848:	e0cb      	b.n	80049e2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	2b00      	cmp	r3, #0
 8004850:	d046      	beq.n	80048e0 <UART_SetConfig+0x9f8>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	2b01      	cmp	r3, #1
 8004858:	d040      	beq.n	80048dc <UART_SetConfig+0x9f4>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b02      	cmp	r3, #2
 8004860:	d03a      	beq.n	80048d8 <UART_SetConfig+0x9f0>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b03      	cmp	r3, #3
 8004868:	d034      	beq.n	80048d4 <UART_SetConfig+0x9ec>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b04      	cmp	r3, #4
 8004870:	d02e      	beq.n	80048d0 <UART_SetConfig+0x9e8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2b05      	cmp	r3, #5
 8004878:	d028      	beq.n	80048cc <UART_SetConfig+0x9e4>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b06      	cmp	r3, #6
 8004880:	d022      	beq.n	80048c8 <UART_SetConfig+0x9e0>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2b07      	cmp	r3, #7
 8004888:	d01c      	beq.n	80048c4 <UART_SetConfig+0x9dc>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b08      	cmp	r3, #8
 8004890:	d016      	beq.n	80048c0 <UART_SetConfig+0x9d8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2b09      	cmp	r3, #9
 8004898:	d00f      	beq.n	80048ba <UART_SetConfig+0x9d2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	2b0a      	cmp	r3, #10
 80048a0:	d008      	beq.n	80048b4 <UART_SetConfig+0x9cc>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	2b0b      	cmp	r3, #11
 80048a8:	d102      	bne.n	80048b0 <UART_SetConfig+0x9c8>
 80048aa:	f643 5309 	movw	r3, #15625	; 0x3d09
 80048ae:	e018      	b.n	80048e2 <UART_SetConfig+0x9fa>
 80048b0:	4b13      	ldr	r3, [pc, #76]	; (8004900 <UART_SetConfig+0xa18>)
 80048b2:	e016      	b.n	80048e2 <UART_SetConfig+0x9fa>
 80048b4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80048b8:	e013      	b.n	80048e2 <UART_SetConfig+0x9fa>
 80048ba:	f24f 4324 	movw	r3, #62500	; 0xf424
 80048be:	e010      	b.n	80048e2 <UART_SetConfig+0x9fa>
 80048c0:	4b16      	ldr	r3, [pc, #88]	; (800491c <UART_SetConfig+0xa34>)
 80048c2:	e00e      	b.n	80048e2 <UART_SetConfig+0x9fa>
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <UART_SetConfig+0xa08>)
 80048c6:	e00c      	b.n	80048e2 <UART_SetConfig+0x9fa>
 80048c8:	4b15      	ldr	r3, [pc, #84]	; (8004920 <UART_SetConfig+0xa38>)
 80048ca:	e00a      	b.n	80048e2 <UART_SetConfig+0x9fa>
 80048cc:	4b15      	ldr	r3, [pc, #84]	; (8004924 <UART_SetConfig+0xa3c>)
 80048ce:	e008      	b.n	80048e2 <UART_SetConfig+0x9fa>
 80048d0:	4b08      	ldr	r3, [pc, #32]	; (80048f4 <UART_SetConfig+0xa0c>)
 80048d2:	e006      	b.n	80048e2 <UART_SetConfig+0x9fa>
 80048d4:	4b14      	ldr	r3, [pc, #80]	; (8004928 <UART_SetConfig+0xa40>)
 80048d6:	e004      	b.n	80048e2 <UART_SetConfig+0x9fa>
 80048d8:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <UART_SetConfig+0xa10>)
 80048da:	e002      	b.n	80048e2 <UART_SetConfig+0x9fa>
 80048dc:	4b07      	ldr	r3, [pc, #28]	; (80048fc <UART_SetConfig+0xa14>)
 80048de:	e000      	b.n	80048e2 <UART_SetConfig+0x9fa>
 80048e0:	4b07      	ldr	r3, [pc, #28]	; (8004900 <UART_SetConfig+0xa18>)
 80048e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048e4:	e07d      	b.n	80049e2 <UART_SetConfig+0xafa>
 80048e6:	bf00      	nop
 80048e8:	58024400 	.word	0x58024400
 80048ec:	03d09000 	.word	0x03d09000
 80048f0:	0003d090 	.word	0x0003d090
 80048f4:	0007a120 	.word	0x0007a120
 80048f8:	000f4240 	.word	0x000f4240
 80048fc:	001e8480 	.word	0x001e8480
 8004900:	003d0900 	.word	0x003d0900
 8004904:	00516155 	.word	0x00516155
 8004908:	0061a800 	.word	0x0061a800
 800490c:	007a1200 	.word	0x007a1200
 8004910:	00a2c2aa 	.word	0x00a2c2aa
 8004914:	00f42400 	.word	0x00f42400
 8004918:	01e84800 	.word	0x01e84800
 800491c:	0001e848 	.word	0x0001e848
 8004920:	00051615 	.word	0x00051615
 8004924:	00061a80 	.word	0x00061a80
 8004928:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2b00      	cmp	r3, #0
 8004932:	d04e      	beq.n	80049d2 <UART_SetConfig+0xaea>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	2b01      	cmp	r3, #1
 800493a:	d047      	beq.n	80049cc <UART_SetConfig+0xae4>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	2b02      	cmp	r3, #2
 8004942:	d040      	beq.n	80049c6 <UART_SetConfig+0xade>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	2b03      	cmp	r3, #3
 800494a:	d039      	beq.n	80049c0 <UART_SetConfig+0xad8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	2b04      	cmp	r3, #4
 8004952:	d032      	beq.n	80049ba <UART_SetConfig+0xad2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	2b05      	cmp	r3, #5
 800495a:	d02b      	beq.n	80049b4 <UART_SetConfig+0xacc>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	2b06      	cmp	r3, #6
 8004962:	d024      	beq.n	80049ae <UART_SetConfig+0xac6>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	2b07      	cmp	r3, #7
 800496a:	d01d      	beq.n	80049a8 <UART_SetConfig+0xac0>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	2b08      	cmp	r3, #8
 8004972:	d016      	beq.n	80049a2 <UART_SetConfig+0xaba>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	2b09      	cmp	r3, #9
 800497a:	d00f      	beq.n	800499c <UART_SetConfig+0xab4>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	2b0a      	cmp	r3, #10
 8004982:	d008      	beq.n	8004996 <UART_SetConfig+0xaae>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	2b0b      	cmp	r3, #11
 800498a:	d101      	bne.n	8004990 <UART_SetConfig+0xaa8>
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	e022      	b.n	80049d6 <UART_SetConfig+0xaee>
 8004990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004994:	e01f      	b.n	80049d6 <UART_SetConfig+0xaee>
 8004996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800499a:	e01c      	b.n	80049d6 <UART_SetConfig+0xaee>
 800499c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a0:	e019      	b.n	80049d6 <UART_SetConfig+0xaee>
 80049a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049a6:	e016      	b.n	80049d6 <UART_SetConfig+0xaee>
 80049a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049ac:	e013      	b.n	80049d6 <UART_SetConfig+0xaee>
 80049ae:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80049b2:	e010      	b.n	80049d6 <UART_SetConfig+0xaee>
 80049b4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80049b8:	e00d      	b.n	80049d6 <UART_SetConfig+0xaee>
 80049ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049be:	e00a      	b.n	80049d6 <UART_SetConfig+0xaee>
 80049c0:	f241 5355 	movw	r3, #5461	; 0x1555
 80049c4:	e007      	b.n	80049d6 <UART_SetConfig+0xaee>
 80049c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049ca:	e004      	b.n	80049d6 <UART_SetConfig+0xaee>
 80049cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049d0:	e001      	b.n	80049d6 <UART_SetConfig+0xaee>
 80049d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049d8:	e003      	b.n	80049e2 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80049e0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f001 83e8 	beq.w	80061ba <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	4413      	add	r3, r2
 80049f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d305      	bcc.n	8004a06 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d904      	bls.n	8004a10 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a0c:	f001 bbd5 	b.w	80061ba <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8004a10:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	f000 8154 	beq.w	8004cc2 <UART_SetConfig+0xdda>
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	dc06      	bgt.n	8004a2c <UART_SetConfig+0xb44>
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d00f      	beq.n	8004a42 <UART_SetConfig+0xb5a>
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	f000 80ac 	beq.w	8004b80 <UART_SetConfig+0xc98>
 8004a28:	f000 bc30 	b.w	800528c <UART_SetConfig+0x13a4>
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	f000 832d 	beq.w	800508c <UART_SetConfig+0x11a4>
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	f000 83a5 	beq.w	8005182 <UART_SetConfig+0x129a>
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	f000 81e3 	beq.w	8004e04 <UART_SetConfig+0xf1c>
 8004a3e:	f000 bc25 	b.w	800528c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004a42:	f7fe fdd3 	bl	80035ec <HAL_RCCEx_GetD3PCLK1Freq>
 8004a46:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f04f 0100 	mov.w	r1, #0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d067      	beq.n	8004b28 <UART_SetConfig+0xc40>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d05e      	beq.n	8004b1e <UART_SetConfig+0xc36>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d055      	beq.n	8004b14 <UART_SetConfig+0xc2c>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d04c      	beq.n	8004b0a <UART_SetConfig+0xc22>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d043      	beq.n	8004b00 <UART_SetConfig+0xc18>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	2b05      	cmp	r3, #5
 8004a7e:	d03a      	beq.n	8004af6 <UART_SetConfig+0xc0e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	2b06      	cmp	r3, #6
 8004a86:	d031      	beq.n	8004aec <UART_SetConfig+0xc04>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	2b07      	cmp	r3, #7
 8004a8e:	d028      	beq.n	8004ae2 <UART_SetConfig+0xbfa>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d01f      	beq.n	8004ad8 <UART_SetConfig+0xbf0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	2b09      	cmp	r3, #9
 8004a9e:	d016      	beq.n	8004ace <UART_SetConfig+0xbe6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	2b0a      	cmp	r3, #10
 8004aa6:	d00d      	beq.n	8004ac4 <UART_SetConfig+0xbdc>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	2b0b      	cmp	r3, #11
 8004aae:	d104      	bne.n	8004aba <UART_SetConfig+0xbd2>
 8004ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ab4:	f04f 0400 	mov.w	r4, #0
 8004ab8:	e03a      	b.n	8004b30 <UART_SetConfig+0xc48>
 8004aba:	f04f 0301 	mov.w	r3, #1
 8004abe:	f04f 0400 	mov.w	r4, #0
 8004ac2:	e035      	b.n	8004b30 <UART_SetConfig+0xc48>
 8004ac4:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004ac8:	f04f 0400 	mov.w	r4, #0
 8004acc:	e030      	b.n	8004b30 <UART_SetConfig+0xc48>
 8004ace:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004ad2:	f04f 0400 	mov.w	r4, #0
 8004ad6:	e02b      	b.n	8004b30 <UART_SetConfig+0xc48>
 8004ad8:	f04f 0320 	mov.w	r3, #32
 8004adc:	f04f 0400 	mov.w	r4, #0
 8004ae0:	e026      	b.n	8004b30 <UART_SetConfig+0xc48>
 8004ae2:	f04f 0310 	mov.w	r3, #16
 8004ae6:	f04f 0400 	mov.w	r4, #0
 8004aea:	e021      	b.n	8004b30 <UART_SetConfig+0xc48>
 8004aec:	f04f 030c 	mov.w	r3, #12
 8004af0:	f04f 0400 	mov.w	r4, #0
 8004af4:	e01c      	b.n	8004b30 <UART_SetConfig+0xc48>
 8004af6:	f04f 030a 	mov.w	r3, #10
 8004afa:	f04f 0400 	mov.w	r4, #0
 8004afe:	e017      	b.n	8004b30 <UART_SetConfig+0xc48>
 8004b00:	f04f 0308 	mov.w	r3, #8
 8004b04:	f04f 0400 	mov.w	r4, #0
 8004b08:	e012      	b.n	8004b30 <UART_SetConfig+0xc48>
 8004b0a:	f04f 0306 	mov.w	r3, #6
 8004b0e:	f04f 0400 	mov.w	r4, #0
 8004b12:	e00d      	b.n	8004b30 <UART_SetConfig+0xc48>
 8004b14:	f04f 0304 	mov.w	r3, #4
 8004b18:	f04f 0400 	mov.w	r4, #0
 8004b1c:	e008      	b.n	8004b30 <UART_SetConfig+0xc48>
 8004b1e:	f04f 0302 	mov.w	r3, #2
 8004b22:	f04f 0400 	mov.w	r4, #0
 8004b26:	e003      	b.n	8004b30 <UART_SetConfig+0xc48>
 8004b28:	f04f 0301 	mov.w	r3, #1
 8004b2c:	f04f 0400 	mov.w	r4, #0
 8004b30:	461a      	mov	r2, r3
 8004b32:	4623      	mov	r3, r4
 8004b34:	f7fb fbd0 	bl	80002d8 <__aeabi_uldivmod>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4622      	mov	r2, r4
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	f04f 0400 	mov.w	r4, #0
 8004b48:	0214      	lsls	r4, r2, #8
 8004b4a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004b4e:	020b      	lsls	r3, r1, #8
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6852      	ldr	r2, [r2, #4]
 8004b54:	0852      	lsrs	r2, r2, #1
 8004b56:	4611      	mov	r1, r2
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	eb13 0b01 	adds.w	fp, r3, r1
 8004b60:	eb44 0c02 	adc.w	ip, r4, r2
 8004b64:	4658      	mov	r0, fp
 8004b66:	4661      	mov	r1, ip
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f04f 0400 	mov.w	r4, #0
 8004b70:	461a      	mov	r2, r3
 8004b72:	4623      	mov	r3, r4
 8004b74:	f7fb fbb0 	bl	80002d8 <__aeabi_uldivmod>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004b7e:	e389      	b.n	8005294 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b80:	f107 0318 	add.w	r3, r7, #24
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fe fd47 	bl	8003618 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f04f 0100 	mov.w	r1, #0
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d067      	beq.n	8004c6a <UART_SetConfig+0xd82>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d05e      	beq.n	8004c60 <UART_SetConfig+0xd78>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d055      	beq.n	8004c56 <UART_SetConfig+0xd6e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d04c      	beq.n	8004c4c <UART_SetConfig+0xd64>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d043      	beq.n	8004c42 <UART_SetConfig+0xd5a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d03a      	beq.n	8004c38 <UART_SetConfig+0xd50>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	2b06      	cmp	r3, #6
 8004bc8:	d031      	beq.n	8004c2e <UART_SetConfig+0xd46>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b07      	cmp	r3, #7
 8004bd0:	d028      	beq.n	8004c24 <UART_SetConfig+0xd3c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d01f      	beq.n	8004c1a <UART_SetConfig+0xd32>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	2b09      	cmp	r3, #9
 8004be0:	d016      	beq.n	8004c10 <UART_SetConfig+0xd28>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	2b0a      	cmp	r3, #10
 8004be8:	d00d      	beq.n	8004c06 <UART_SetConfig+0xd1e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	2b0b      	cmp	r3, #11
 8004bf0:	d104      	bne.n	8004bfc <UART_SetConfig+0xd14>
 8004bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bf6:	f04f 0400 	mov.w	r4, #0
 8004bfa:	e03a      	b.n	8004c72 <UART_SetConfig+0xd8a>
 8004bfc:	f04f 0301 	mov.w	r3, #1
 8004c00:	f04f 0400 	mov.w	r4, #0
 8004c04:	e035      	b.n	8004c72 <UART_SetConfig+0xd8a>
 8004c06:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004c0a:	f04f 0400 	mov.w	r4, #0
 8004c0e:	e030      	b.n	8004c72 <UART_SetConfig+0xd8a>
 8004c10:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004c14:	f04f 0400 	mov.w	r4, #0
 8004c18:	e02b      	b.n	8004c72 <UART_SetConfig+0xd8a>
 8004c1a:	f04f 0320 	mov.w	r3, #32
 8004c1e:	f04f 0400 	mov.w	r4, #0
 8004c22:	e026      	b.n	8004c72 <UART_SetConfig+0xd8a>
 8004c24:	f04f 0310 	mov.w	r3, #16
 8004c28:	f04f 0400 	mov.w	r4, #0
 8004c2c:	e021      	b.n	8004c72 <UART_SetConfig+0xd8a>
 8004c2e:	f04f 030c 	mov.w	r3, #12
 8004c32:	f04f 0400 	mov.w	r4, #0
 8004c36:	e01c      	b.n	8004c72 <UART_SetConfig+0xd8a>
 8004c38:	f04f 030a 	mov.w	r3, #10
 8004c3c:	f04f 0400 	mov.w	r4, #0
 8004c40:	e017      	b.n	8004c72 <UART_SetConfig+0xd8a>
 8004c42:	f04f 0308 	mov.w	r3, #8
 8004c46:	f04f 0400 	mov.w	r4, #0
 8004c4a:	e012      	b.n	8004c72 <UART_SetConfig+0xd8a>
 8004c4c:	f04f 0306 	mov.w	r3, #6
 8004c50:	f04f 0400 	mov.w	r4, #0
 8004c54:	e00d      	b.n	8004c72 <UART_SetConfig+0xd8a>
 8004c56:	f04f 0304 	mov.w	r3, #4
 8004c5a:	f04f 0400 	mov.w	r4, #0
 8004c5e:	e008      	b.n	8004c72 <UART_SetConfig+0xd8a>
 8004c60:	f04f 0302 	mov.w	r3, #2
 8004c64:	f04f 0400 	mov.w	r4, #0
 8004c68:	e003      	b.n	8004c72 <UART_SetConfig+0xd8a>
 8004c6a:	f04f 0301 	mov.w	r3, #1
 8004c6e:	f04f 0400 	mov.w	r4, #0
 8004c72:	461a      	mov	r2, r3
 8004c74:	4623      	mov	r3, r4
 8004c76:	f7fb fb2f 	bl	80002d8 <__aeabi_uldivmod>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4622      	mov	r2, r4
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	f04f 0400 	mov.w	r4, #0
 8004c8a:	0214      	lsls	r4, r2, #8
 8004c8c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004c90:	020b      	lsls	r3, r1, #8
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6852      	ldr	r2, [r2, #4]
 8004c96:	0852      	lsrs	r2, r2, #1
 8004c98:	4611      	mov	r1, r2
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	eb13 0b01 	adds.w	fp, r3, r1
 8004ca2:	eb44 0c02 	adc.w	ip, r4, r2
 8004ca6:	4658      	mov	r0, fp
 8004ca8:	4661      	mov	r1, ip
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f04f 0400 	mov.w	r4, #0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4623      	mov	r3, r4
 8004cb6:	f7fb fb0f 	bl	80002d8 <__aeabi_uldivmod>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004cc0:	e2e8      	b.n	8005294 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cc2:	f107 030c 	add.w	r3, r7, #12
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe fdf2 	bl	80038b0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f04f 0100 	mov.w	r1, #0
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d067      	beq.n	8004dac <UART_SetConfig+0xec4>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d05e      	beq.n	8004da2 <UART_SetConfig+0xeba>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d055      	beq.n	8004d98 <UART_SetConfig+0xeb0>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d04c      	beq.n	8004d8e <UART_SetConfig+0xea6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d043      	beq.n	8004d84 <UART_SetConfig+0xe9c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d03a      	beq.n	8004d7a <UART_SetConfig+0xe92>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	2b06      	cmp	r3, #6
 8004d0a:	d031      	beq.n	8004d70 <UART_SetConfig+0xe88>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	2b07      	cmp	r3, #7
 8004d12:	d028      	beq.n	8004d66 <UART_SetConfig+0xe7e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d01f      	beq.n	8004d5c <UART_SetConfig+0xe74>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	2b09      	cmp	r3, #9
 8004d22:	d016      	beq.n	8004d52 <UART_SetConfig+0xe6a>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	2b0a      	cmp	r3, #10
 8004d2a:	d00d      	beq.n	8004d48 <UART_SetConfig+0xe60>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	2b0b      	cmp	r3, #11
 8004d32:	d104      	bne.n	8004d3e <UART_SetConfig+0xe56>
 8004d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d38:	f04f 0400 	mov.w	r4, #0
 8004d3c:	e03a      	b.n	8004db4 <UART_SetConfig+0xecc>
 8004d3e:	f04f 0301 	mov.w	r3, #1
 8004d42:	f04f 0400 	mov.w	r4, #0
 8004d46:	e035      	b.n	8004db4 <UART_SetConfig+0xecc>
 8004d48:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004d4c:	f04f 0400 	mov.w	r4, #0
 8004d50:	e030      	b.n	8004db4 <UART_SetConfig+0xecc>
 8004d52:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004d56:	f04f 0400 	mov.w	r4, #0
 8004d5a:	e02b      	b.n	8004db4 <UART_SetConfig+0xecc>
 8004d5c:	f04f 0320 	mov.w	r3, #32
 8004d60:	f04f 0400 	mov.w	r4, #0
 8004d64:	e026      	b.n	8004db4 <UART_SetConfig+0xecc>
 8004d66:	f04f 0310 	mov.w	r3, #16
 8004d6a:	f04f 0400 	mov.w	r4, #0
 8004d6e:	e021      	b.n	8004db4 <UART_SetConfig+0xecc>
 8004d70:	f04f 030c 	mov.w	r3, #12
 8004d74:	f04f 0400 	mov.w	r4, #0
 8004d78:	e01c      	b.n	8004db4 <UART_SetConfig+0xecc>
 8004d7a:	f04f 030a 	mov.w	r3, #10
 8004d7e:	f04f 0400 	mov.w	r4, #0
 8004d82:	e017      	b.n	8004db4 <UART_SetConfig+0xecc>
 8004d84:	f04f 0308 	mov.w	r3, #8
 8004d88:	f04f 0400 	mov.w	r4, #0
 8004d8c:	e012      	b.n	8004db4 <UART_SetConfig+0xecc>
 8004d8e:	f04f 0306 	mov.w	r3, #6
 8004d92:	f04f 0400 	mov.w	r4, #0
 8004d96:	e00d      	b.n	8004db4 <UART_SetConfig+0xecc>
 8004d98:	f04f 0304 	mov.w	r3, #4
 8004d9c:	f04f 0400 	mov.w	r4, #0
 8004da0:	e008      	b.n	8004db4 <UART_SetConfig+0xecc>
 8004da2:	f04f 0302 	mov.w	r3, #2
 8004da6:	f04f 0400 	mov.w	r4, #0
 8004daa:	e003      	b.n	8004db4 <UART_SetConfig+0xecc>
 8004dac:	f04f 0301 	mov.w	r3, #1
 8004db0:	f04f 0400 	mov.w	r4, #0
 8004db4:	461a      	mov	r2, r3
 8004db6:	4623      	mov	r3, r4
 8004db8:	f7fb fa8e 	bl	80002d8 <__aeabi_uldivmod>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4622      	mov	r2, r4
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	f04f 0400 	mov.w	r4, #0
 8004dcc:	0214      	lsls	r4, r2, #8
 8004dce:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004dd2:	020b      	lsls	r3, r1, #8
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6852      	ldr	r2, [r2, #4]
 8004dd8:	0852      	lsrs	r2, r2, #1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	eb13 0b01 	adds.w	fp, r3, r1
 8004de4:	eb44 0c02 	adc.w	ip, r4, r2
 8004de8:	4658      	mov	r0, fp
 8004dea:	4661      	mov	r1, ip
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f04f 0400 	mov.w	r4, #0
 8004df4:	461a      	mov	r2, r3
 8004df6:	4623      	mov	r3, r4
 8004df8:	f7fb fa6e 	bl	80002d8 <__aeabi_uldivmod>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004e02:	e247      	b.n	8005294 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e04:	4b96      	ldr	r3, [pc, #600]	; (8005060 <UART_SetConfig+0x1178>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80a3 	beq.w	8004f58 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e12:	4b93      	ldr	r3, [pc, #588]	; (8005060 <UART_SetConfig+0x1178>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	08db      	lsrs	r3, r3, #3
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	4a91      	ldr	r2, [pc, #580]	; (8005064 <UART_SetConfig+0x117c>)
 8004e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e22:	4618      	mov	r0, r3
 8004e24:	f04f 0100 	mov.w	r1, #0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d067      	beq.n	8004f00 <UART_SetConfig+0x1018>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d05e      	beq.n	8004ef6 <UART_SetConfig+0x100e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d055      	beq.n	8004eec <UART_SetConfig+0x1004>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d04c      	beq.n	8004ee2 <UART_SetConfig+0xffa>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d043      	beq.n	8004ed8 <UART_SetConfig+0xff0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	2b05      	cmp	r3, #5
 8004e56:	d03a      	beq.n	8004ece <UART_SetConfig+0xfe6>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	2b06      	cmp	r3, #6
 8004e5e:	d031      	beq.n	8004ec4 <UART_SetConfig+0xfdc>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2b07      	cmp	r3, #7
 8004e66:	d028      	beq.n	8004eba <UART_SetConfig+0xfd2>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d01f      	beq.n	8004eb0 <UART_SetConfig+0xfc8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	2b09      	cmp	r3, #9
 8004e76:	d016      	beq.n	8004ea6 <UART_SetConfig+0xfbe>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2b0a      	cmp	r3, #10
 8004e7e:	d00d      	beq.n	8004e9c <UART_SetConfig+0xfb4>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	2b0b      	cmp	r3, #11
 8004e86:	d104      	bne.n	8004e92 <UART_SetConfig+0xfaa>
 8004e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e8c:	f04f 0400 	mov.w	r4, #0
 8004e90:	e03a      	b.n	8004f08 <UART_SetConfig+0x1020>
 8004e92:	f04f 0301 	mov.w	r3, #1
 8004e96:	f04f 0400 	mov.w	r4, #0
 8004e9a:	e035      	b.n	8004f08 <UART_SetConfig+0x1020>
 8004e9c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004ea0:	f04f 0400 	mov.w	r4, #0
 8004ea4:	e030      	b.n	8004f08 <UART_SetConfig+0x1020>
 8004ea6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004eaa:	f04f 0400 	mov.w	r4, #0
 8004eae:	e02b      	b.n	8004f08 <UART_SetConfig+0x1020>
 8004eb0:	f04f 0320 	mov.w	r3, #32
 8004eb4:	f04f 0400 	mov.w	r4, #0
 8004eb8:	e026      	b.n	8004f08 <UART_SetConfig+0x1020>
 8004eba:	f04f 0310 	mov.w	r3, #16
 8004ebe:	f04f 0400 	mov.w	r4, #0
 8004ec2:	e021      	b.n	8004f08 <UART_SetConfig+0x1020>
 8004ec4:	f04f 030c 	mov.w	r3, #12
 8004ec8:	f04f 0400 	mov.w	r4, #0
 8004ecc:	e01c      	b.n	8004f08 <UART_SetConfig+0x1020>
 8004ece:	f04f 030a 	mov.w	r3, #10
 8004ed2:	f04f 0400 	mov.w	r4, #0
 8004ed6:	e017      	b.n	8004f08 <UART_SetConfig+0x1020>
 8004ed8:	f04f 0308 	mov.w	r3, #8
 8004edc:	f04f 0400 	mov.w	r4, #0
 8004ee0:	e012      	b.n	8004f08 <UART_SetConfig+0x1020>
 8004ee2:	f04f 0306 	mov.w	r3, #6
 8004ee6:	f04f 0400 	mov.w	r4, #0
 8004eea:	e00d      	b.n	8004f08 <UART_SetConfig+0x1020>
 8004eec:	f04f 0304 	mov.w	r3, #4
 8004ef0:	f04f 0400 	mov.w	r4, #0
 8004ef4:	e008      	b.n	8004f08 <UART_SetConfig+0x1020>
 8004ef6:	f04f 0302 	mov.w	r3, #2
 8004efa:	f04f 0400 	mov.w	r4, #0
 8004efe:	e003      	b.n	8004f08 <UART_SetConfig+0x1020>
 8004f00:	f04f 0301 	mov.w	r3, #1
 8004f04:	f04f 0400 	mov.w	r4, #0
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4623      	mov	r3, r4
 8004f0c:	f7fb f9e4 	bl	80002d8 <__aeabi_uldivmod>
 8004f10:	4603      	mov	r3, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	4619      	mov	r1, r3
 8004f16:	4622      	mov	r2, r4
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	f04f 0400 	mov.w	r4, #0
 8004f20:	0214      	lsls	r4, r2, #8
 8004f22:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004f26:	020b      	lsls	r3, r1, #8
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6852      	ldr	r2, [r2, #4]
 8004f2c:	0852      	lsrs	r2, r2, #1
 8004f2e:	4611      	mov	r1, r2
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	eb13 0b01 	adds.w	fp, r3, r1
 8004f38:	eb44 0c02 	adc.w	ip, r4, r2
 8004f3c:	4658      	mov	r0, fp
 8004f3e:	4661      	mov	r1, ip
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f04f 0400 	mov.w	r4, #0
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	f7fb f9c4 	bl	80002d8 <__aeabi_uldivmod>
 8004f50:	4603      	mov	r3, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8004f56:	e19d      	b.n	8005294 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d05b      	beq.n	8005018 <UART_SetConfig+0x1130>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d053      	beq.n	8005010 <UART_SetConfig+0x1128>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d04b      	beq.n	8005008 <UART_SetConfig+0x1120>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d043      	beq.n	8005000 <UART_SetConfig+0x1118>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d03b      	beq.n	8004ff8 <UART_SetConfig+0x1110>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2b05      	cmp	r3, #5
 8004f86:	d033      	beq.n	8004ff0 <UART_SetConfig+0x1108>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	2b06      	cmp	r3, #6
 8004f8e:	d02b      	beq.n	8004fe8 <UART_SetConfig+0x1100>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	2b07      	cmp	r3, #7
 8004f96:	d023      	beq.n	8004fe0 <UART_SetConfig+0x10f8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d01b      	beq.n	8004fd8 <UART_SetConfig+0x10f0>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2b09      	cmp	r3, #9
 8004fa6:	d013      	beq.n	8004fd0 <UART_SetConfig+0x10e8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	2b0a      	cmp	r3, #10
 8004fae:	d00b      	beq.n	8004fc8 <UART_SetConfig+0x10e0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	2b0b      	cmp	r3, #11
 8004fb6:	d103      	bne.n	8004fc0 <UART_SetConfig+0x10d8>
 8004fb8:	4b2a      	ldr	r3, [pc, #168]	; (8005064 <UART_SetConfig+0x117c>)
 8004fba:	f04f 0400 	mov.w	r4, #0
 8004fbe:	e02e      	b.n	800501e <UART_SetConfig+0x1136>
 8004fc0:	4b29      	ldr	r3, [pc, #164]	; (8005068 <UART_SetConfig+0x1180>)
 8004fc2:	f04f 0403 	mov.w	r4, #3
 8004fc6:	e02a      	b.n	800501e <UART_SetConfig+0x1136>
 8004fc8:	4b28      	ldr	r3, [pc, #160]	; (800506c <UART_SetConfig+0x1184>)
 8004fca:	f04f 0400 	mov.w	r4, #0
 8004fce:	e026      	b.n	800501e <UART_SetConfig+0x1136>
 8004fd0:	4b27      	ldr	r3, [pc, #156]	; (8005070 <UART_SetConfig+0x1188>)
 8004fd2:	f04f 0400 	mov.w	r4, #0
 8004fd6:	e022      	b.n	800501e <UART_SetConfig+0x1136>
 8004fd8:	4b26      	ldr	r3, [pc, #152]	; (8005074 <UART_SetConfig+0x118c>)
 8004fda:	f04f 0400 	mov.w	r4, #0
 8004fde:	e01e      	b.n	800501e <UART_SetConfig+0x1136>
 8004fe0:	4b25      	ldr	r3, [pc, #148]	; (8005078 <UART_SetConfig+0x1190>)
 8004fe2:	f04f 0400 	mov.w	r4, #0
 8004fe6:	e01a      	b.n	800501e <UART_SetConfig+0x1136>
 8004fe8:	a419      	add	r4, pc, #100	; (adr r4, 8005050 <UART_SetConfig+0x1168>)
 8004fea:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004fee:	e016      	b.n	800501e <UART_SetConfig+0x1136>
 8004ff0:	4b22      	ldr	r3, [pc, #136]	; (800507c <UART_SetConfig+0x1194>)
 8004ff2:	f04f 0400 	mov.w	r4, #0
 8004ff6:	e012      	b.n	800501e <UART_SetConfig+0x1136>
 8004ff8:	4b21      	ldr	r3, [pc, #132]	; (8005080 <UART_SetConfig+0x1198>)
 8004ffa:	f04f 0400 	mov.w	r4, #0
 8004ffe:	e00e      	b.n	800501e <UART_SetConfig+0x1136>
 8005000:	a415      	add	r4, pc, #84	; (adr r4, 8005058 <UART_SetConfig+0x1170>)
 8005002:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005006:	e00a      	b.n	800501e <UART_SetConfig+0x1136>
 8005008:	4b1e      	ldr	r3, [pc, #120]	; (8005084 <UART_SetConfig+0x119c>)
 800500a:	f04f 0400 	mov.w	r4, #0
 800500e:	e006      	b.n	800501e <UART_SetConfig+0x1136>
 8005010:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <UART_SetConfig+0x11a0>)
 8005012:	f04f 0401 	mov.w	r4, #1
 8005016:	e002      	b.n	800501e <UART_SetConfig+0x1136>
 8005018:	4b13      	ldr	r3, [pc, #76]	; (8005068 <UART_SetConfig+0x1180>)
 800501a:	f04f 0403 	mov.w	r4, #3
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6852      	ldr	r2, [r2, #4]
 8005022:	0852      	lsrs	r2, r2, #1
 8005024:	4611      	mov	r1, r2
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	eb13 0b01 	adds.w	fp, r3, r1
 800502e:	eb44 0c02 	adc.w	ip, r4, r2
 8005032:	4658      	mov	r0, fp
 8005034:	4661      	mov	r1, ip
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f04f 0400 	mov.w	r4, #0
 800503e:	461a      	mov	r2, r3
 8005040:	4623      	mov	r3, r4
 8005042:	f7fb f949 	bl	80002d8 <__aeabi_uldivmod>
 8005046:	4603      	mov	r3, r0
 8005048:	460c      	mov	r4, r1
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800504c:	e122      	b.n	8005294 <UART_SetConfig+0x13ac>
 800504e:	bf00      	nop
 8005050:	51615500 	.word	0x51615500
 8005054:	00000000 	.word	0x00000000
 8005058:	a2c2aa00 	.word	0xa2c2aa00
 800505c:	00000000 	.word	0x00000000
 8005060:	58024400 	.word	0x58024400
 8005064:	03d09000 	.word	0x03d09000
 8005068:	d0900000 	.word	0xd0900000
 800506c:	07a12000 	.word	0x07a12000
 8005070:	0f424000 	.word	0x0f424000
 8005074:	1e848000 	.word	0x1e848000
 8005078:	3d090000 	.word	0x3d090000
 800507c:	61a80000 	.word	0x61a80000
 8005080:	7a120000 	.word	0x7a120000
 8005084:	f4240000 	.word	0xf4240000
 8005088:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	2b00      	cmp	r3, #0
 8005092:	d05b      	beq.n	800514c <UART_SetConfig+0x1264>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	2b01      	cmp	r3, #1
 800509a:	d053      	beq.n	8005144 <UART_SetConfig+0x125c>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d04b      	beq.n	800513c <UART_SetConfig+0x1254>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d043      	beq.n	8005134 <UART_SetConfig+0x124c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d03b      	beq.n	800512c <UART_SetConfig+0x1244>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	2b05      	cmp	r3, #5
 80050ba:	d033      	beq.n	8005124 <UART_SetConfig+0x123c>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	2b06      	cmp	r3, #6
 80050c2:	d02b      	beq.n	800511c <UART_SetConfig+0x1234>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	2b07      	cmp	r3, #7
 80050ca:	d023      	beq.n	8005114 <UART_SetConfig+0x122c>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d01b      	beq.n	800510c <UART_SetConfig+0x1224>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	2b09      	cmp	r3, #9
 80050da:	d013      	beq.n	8005104 <UART_SetConfig+0x121c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	2b0a      	cmp	r3, #10
 80050e2:	d00b      	beq.n	80050fc <UART_SetConfig+0x1214>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	2b0b      	cmp	r3, #11
 80050ea:	d103      	bne.n	80050f4 <UART_SetConfig+0x120c>
 80050ec:	4bc0      	ldr	r3, [pc, #768]	; (80053f0 <UART_SetConfig+0x1508>)
 80050ee:	f04f 0400 	mov.w	r4, #0
 80050f2:	e02e      	b.n	8005152 <UART_SetConfig+0x126a>
 80050f4:	4bbf      	ldr	r3, [pc, #764]	; (80053f4 <UART_SetConfig+0x150c>)
 80050f6:	f04f 0400 	mov.w	r4, #0
 80050fa:	e02a      	b.n	8005152 <UART_SetConfig+0x126a>
 80050fc:	4bbe      	ldr	r3, [pc, #760]	; (80053f8 <UART_SetConfig+0x1510>)
 80050fe:	f04f 0400 	mov.w	r4, #0
 8005102:	e026      	b.n	8005152 <UART_SetConfig+0x126a>
 8005104:	4bbd      	ldr	r3, [pc, #756]	; (80053fc <UART_SetConfig+0x1514>)
 8005106:	f04f 0400 	mov.w	r4, #0
 800510a:	e022      	b.n	8005152 <UART_SetConfig+0x126a>
 800510c:	4bbc      	ldr	r3, [pc, #752]	; (8005400 <UART_SetConfig+0x1518>)
 800510e:	f04f 0400 	mov.w	r4, #0
 8005112:	e01e      	b.n	8005152 <UART_SetConfig+0x126a>
 8005114:	4bbb      	ldr	r3, [pc, #748]	; (8005404 <UART_SetConfig+0x151c>)
 8005116:	f04f 0400 	mov.w	r4, #0
 800511a:	e01a      	b.n	8005152 <UART_SetConfig+0x126a>
 800511c:	a4b0      	add	r4, pc, #704	; (adr r4, 80053e0 <UART_SetConfig+0x14f8>)
 800511e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005122:	e016      	b.n	8005152 <UART_SetConfig+0x126a>
 8005124:	4bb8      	ldr	r3, [pc, #736]	; (8005408 <UART_SetConfig+0x1520>)
 8005126:	f04f 0400 	mov.w	r4, #0
 800512a:	e012      	b.n	8005152 <UART_SetConfig+0x126a>
 800512c:	4bb7      	ldr	r3, [pc, #732]	; (800540c <UART_SetConfig+0x1524>)
 800512e:	f04f 0400 	mov.w	r4, #0
 8005132:	e00e      	b.n	8005152 <UART_SetConfig+0x126a>
 8005134:	a4ac      	add	r4, pc, #688	; (adr r4, 80053e8 <UART_SetConfig+0x1500>)
 8005136:	e9d4 3400 	ldrd	r3, r4, [r4]
 800513a:	e00a      	b.n	8005152 <UART_SetConfig+0x126a>
 800513c:	4bb4      	ldr	r3, [pc, #720]	; (8005410 <UART_SetConfig+0x1528>)
 800513e:	f04f 0400 	mov.w	r4, #0
 8005142:	e006      	b.n	8005152 <UART_SetConfig+0x126a>
 8005144:	4bb3      	ldr	r3, [pc, #716]	; (8005414 <UART_SetConfig+0x152c>)
 8005146:	f04f 0400 	mov.w	r4, #0
 800514a:	e002      	b.n	8005152 <UART_SetConfig+0x126a>
 800514c:	4ba9      	ldr	r3, [pc, #676]	; (80053f4 <UART_SetConfig+0x150c>)
 800514e:	f04f 0400 	mov.w	r4, #0
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6852      	ldr	r2, [r2, #4]
 8005156:	0852      	lsrs	r2, r2, #1
 8005158:	4611      	mov	r1, r2
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	eb13 0b01 	adds.w	fp, r3, r1
 8005162:	eb44 0c02 	adc.w	ip, r4, r2
 8005166:	4658      	mov	r0, fp
 8005168:	4661      	mov	r1, ip
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f04f 0400 	mov.w	r4, #0
 8005172:	461a      	mov	r2, r3
 8005174:	4623      	mov	r3, r4
 8005176:	f7fb f8af 	bl	80002d8 <__aeabi_uldivmod>
 800517a:	4603      	mov	r3, r0
 800517c:	460c      	mov	r4, r1
 800517e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005180:	e088      	b.n	8005294 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	2b00      	cmp	r3, #0
 8005188:	d064      	beq.n	8005254 <UART_SetConfig+0x136c>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	2b01      	cmp	r3, #1
 8005190:	d05b      	beq.n	800524a <UART_SetConfig+0x1362>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	2b02      	cmp	r3, #2
 8005198:	d052      	beq.n	8005240 <UART_SetConfig+0x1358>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d04a      	beq.n	8005238 <UART_SetConfig+0x1350>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d041      	beq.n	800522e <UART_SetConfig+0x1346>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d039      	beq.n	8005226 <UART_SetConfig+0x133e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	2b06      	cmp	r3, #6
 80051b8:	d031      	beq.n	800521e <UART_SetConfig+0x1336>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	2b07      	cmp	r3, #7
 80051c0:	d028      	beq.n	8005214 <UART_SetConfig+0x132c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d01f      	beq.n	800520a <UART_SetConfig+0x1322>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	2b09      	cmp	r3, #9
 80051d0:	d016      	beq.n	8005200 <UART_SetConfig+0x1318>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	2b0a      	cmp	r3, #10
 80051d8:	d00d      	beq.n	80051f6 <UART_SetConfig+0x130e>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	2b0b      	cmp	r3, #11
 80051e0:	d104      	bne.n	80051ec <UART_SetConfig+0x1304>
 80051e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e6:	f04f 0400 	mov.w	r4, #0
 80051ea:	e037      	b.n	800525c <UART_SetConfig+0x1374>
 80051ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80051f0:	f04f 0400 	mov.w	r4, #0
 80051f4:	e032      	b.n	800525c <UART_SetConfig+0x1374>
 80051f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051fa:	f04f 0400 	mov.w	r4, #0
 80051fe:	e02d      	b.n	800525c <UART_SetConfig+0x1374>
 8005200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005204:	f04f 0400 	mov.w	r4, #0
 8005208:	e028      	b.n	800525c <UART_SetConfig+0x1374>
 800520a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800520e:	f04f 0400 	mov.w	r4, #0
 8005212:	e023      	b.n	800525c <UART_SetConfig+0x1374>
 8005214:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005218:	f04f 0400 	mov.w	r4, #0
 800521c:	e01e      	b.n	800525c <UART_SetConfig+0x1374>
 800521e:	4b7e      	ldr	r3, [pc, #504]	; (8005418 <UART_SetConfig+0x1530>)
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	e01a      	b.n	800525c <UART_SetConfig+0x1374>
 8005226:	4b7d      	ldr	r3, [pc, #500]	; (800541c <UART_SetConfig+0x1534>)
 8005228:	f04f 0400 	mov.w	r4, #0
 800522c:	e016      	b.n	800525c <UART_SetConfig+0x1374>
 800522e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005232:	f04f 0400 	mov.w	r4, #0
 8005236:	e011      	b.n	800525c <UART_SetConfig+0x1374>
 8005238:	4b79      	ldr	r3, [pc, #484]	; (8005420 <UART_SetConfig+0x1538>)
 800523a:	f04f 0400 	mov.w	r4, #0
 800523e:	e00d      	b.n	800525c <UART_SetConfig+0x1374>
 8005240:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005244:	f04f 0400 	mov.w	r4, #0
 8005248:	e008      	b.n	800525c <UART_SetConfig+0x1374>
 800524a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800524e:	f04f 0400 	mov.w	r4, #0
 8005252:	e003      	b.n	800525c <UART_SetConfig+0x1374>
 8005254:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005258:	f04f 0400 	mov.w	r4, #0
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6852      	ldr	r2, [r2, #4]
 8005260:	0852      	lsrs	r2, r2, #1
 8005262:	4611      	mov	r1, r2
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	eb13 0b01 	adds.w	fp, r3, r1
 800526c:	eb44 0c02 	adc.w	ip, r4, r2
 8005270:	4658      	mov	r0, fp
 8005272:	4661      	mov	r1, ip
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f04f 0400 	mov.w	r4, #0
 800527c:	461a      	mov	r2, r3
 800527e:	4623      	mov	r3, r4
 8005280:	f7fb f82a 	bl	80002d8 <__aeabi_uldivmod>
 8005284:	4603      	mov	r3, r0
 8005286:	460c      	mov	r4, r1
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800528a:	e003      	b.n	8005294 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8005292:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800529a:	d309      	bcc.n	80052b0 <UART_SetConfig+0x13c8>
 800529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052a2:	d205      	bcs.n	80052b0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052aa:	60da      	str	r2, [r3, #12]
 80052ac:	f000 bf85 	b.w	80061ba <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052b6:	f000 bf80 	b.w	80061ba <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c2:	f040 83da 	bne.w	8005a7a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 80052c6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80052ca:	2b40      	cmp	r3, #64	; 0x40
 80052cc:	f200 83b3 	bhi.w	8005a36 <UART_SetConfig+0x1b4e>
 80052d0:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <UART_SetConfig+0x13f0>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	08005425 	.word	0x08005425
 80052dc:	080054dd 	.word	0x080054dd
 80052e0:	08005a37 	.word	0x08005a37
 80052e4:	08005a37 	.word	0x08005a37
 80052e8:	08005595 	.word	0x08005595
 80052ec:	08005a37 	.word	0x08005a37
 80052f0:	08005a37 	.word	0x08005a37
 80052f4:	08005a37 	.word	0x08005a37
 80052f8:	08005651 	.word	0x08005651
 80052fc:	08005a37 	.word	0x08005a37
 8005300:	08005a37 	.word	0x08005a37
 8005304:	08005a37 	.word	0x08005a37
 8005308:	08005a37 	.word	0x08005a37
 800530c:	08005a37 	.word	0x08005a37
 8005310:	08005a37 	.word	0x08005a37
 8005314:	08005a37 	.word	0x08005a37
 8005318:	0800570d 	.word	0x0800570d
 800531c:	08005a37 	.word	0x08005a37
 8005320:	08005a37 	.word	0x08005a37
 8005324:	08005a37 	.word	0x08005a37
 8005328:	08005a37 	.word	0x08005a37
 800532c:	08005a37 	.word	0x08005a37
 8005330:	08005a37 	.word	0x08005a37
 8005334:	08005a37 	.word	0x08005a37
 8005338:	08005a37 	.word	0x08005a37
 800533c:	08005a37 	.word	0x08005a37
 8005340:	08005a37 	.word	0x08005a37
 8005344:	08005a37 	.word	0x08005a37
 8005348:	08005a37 	.word	0x08005a37
 800534c:	08005a37 	.word	0x08005a37
 8005350:	08005a37 	.word	0x08005a37
 8005354:	08005a37 	.word	0x08005a37
 8005358:	0800587f 	.word	0x0800587f
 800535c:	08005a37 	.word	0x08005a37
 8005360:	08005a37 	.word	0x08005a37
 8005364:	08005a37 	.word	0x08005a37
 8005368:	08005a37 	.word	0x08005a37
 800536c:	08005a37 	.word	0x08005a37
 8005370:	08005a37 	.word	0x08005a37
 8005374:	08005a37 	.word	0x08005a37
 8005378:	08005a37 	.word	0x08005a37
 800537c:	08005a37 	.word	0x08005a37
 8005380:	08005a37 	.word	0x08005a37
 8005384:	08005a37 	.word	0x08005a37
 8005388:	08005a37 	.word	0x08005a37
 800538c:	08005a37 	.word	0x08005a37
 8005390:	08005a37 	.word	0x08005a37
 8005394:	08005a37 	.word	0x08005a37
 8005398:	08005a37 	.word	0x08005a37
 800539c:	08005a37 	.word	0x08005a37
 80053a0:	08005a37 	.word	0x08005a37
 80053a4:	08005a37 	.word	0x08005a37
 80053a8:	08005a37 	.word	0x08005a37
 80053ac:	08005a37 	.word	0x08005a37
 80053b0:	08005a37 	.word	0x08005a37
 80053b4:	08005a37 	.word	0x08005a37
 80053b8:	08005a37 	.word	0x08005a37
 80053bc:	08005a37 	.word	0x08005a37
 80053c0:	08005a37 	.word	0x08005a37
 80053c4:	08005a37 	.word	0x08005a37
 80053c8:	08005a37 	.word	0x08005a37
 80053cc:	08005a37 	.word	0x08005a37
 80053d0:	08005a37 	.word	0x08005a37
 80053d4:	08005a37 	.word	0x08005a37
 80053d8:	08005975 	.word	0x08005975
 80053dc:	f3af 8000 	nop.w
 80053e0:	05161500 	.word	0x05161500
 80053e4:	00000000 	.word	0x00000000
 80053e8:	0a2c2a00 	.word	0x0a2c2a00
 80053ec:	00000000 	.word	0x00000000
 80053f0:	003d0900 	.word	0x003d0900
 80053f4:	3d090000 	.word	0x3d090000
 80053f8:	007a1200 	.word	0x007a1200
 80053fc:	00f42400 	.word	0x00f42400
 8005400:	01e84800 	.word	0x01e84800
 8005404:	03d09000 	.word	0x03d09000
 8005408:	061a8000 	.word	0x061a8000
 800540c:	07a12000 	.word	0x07a12000
 8005410:	0f424000 	.word	0x0f424000
 8005414:	1e848000 	.word	0x1e848000
 8005418:	000aaa00 	.word	0x000aaa00
 800541c:	000ccc00 	.word	0x000ccc00
 8005420:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005424:	f7fd f9c6 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8005428:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b00      	cmp	r3, #0
 8005430:	d044      	beq.n	80054bc <UART_SetConfig+0x15d4>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2b01      	cmp	r3, #1
 8005438:	d03e      	beq.n	80054b8 <UART_SetConfig+0x15d0>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b02      	cmp	r3, #2
 8005440:	d038      	beq.n	80054b4 <UART_SetConfig+0x15cc>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b03      	cmp	r3, #3
 8005448:	d032      	beq.n	80054b0 <UART_SetConfig+0x15c8>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b04      	cmp	r3, #4
 8005450:	d02c      	beq.n	80054ac <UART_SetConfig+0x15c4>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b05      	cmp	r3, #5
 8005458:	d026      	beq.n	80054a8 <UART_SetConfig+0x15c0>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b06      	cmp	r3, #6
 8005460:	d020      	beq.n	80054a4 <UART_SetConfig+0x15bc>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b07      	cmp	r3, #7
 8005468:	d01a      	beq.n	80054a0 <UART_SetConfig+0x15b8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b08      	cmp	r3, #8
 8005470:	d014      	beq.n	800549c <UART_SetConfig+0x15b4>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b09      	cmp	r3, #9
 8005478:	d00e      	beq.n	8005498 <UART_SetConfig+0x15b0>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b0a      	cmp	r3, #10
 8005480:	d008      	beq.n	8005494 <UART_SetConfig+0x15ac>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b0b      	cmp	r3, #11
 8005488:	d102      	bne.n	8005490 <UART_SetConfig+0x15a8>
 800548a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800548e:	e016      	b.n	80054be <UART_SetConfig+0x15d6>
 8005490:	2301      	movs	r3, #1
 8005492:	e014      	b.n	80054be <UART_SetConfig+0x15d6>
 8005494:	2380      	movs	r3, #128	; 0x80
 8005496:	e012      	b.n	80054be <UART_SetConfig+0x15d6>
 8005498:	2340      	movs	r3, #64	; 0x40
 800549a:	e010      	b.n	80054be <UART_SetConfig+0x15d6>
 800549c:	2320      	movs	r3, #32
 800549e:	e00e      	b.n	80054be <UART_SetConfig+0x15d6>
 80054a0:	2310      	movs	r3, #16
 80054a2:	e00c      	b.n	80054be <UART_SetConfig+0x15d6>
 80054a4:	230c      	movs	r3, #12
 80054a6:	e00a      	b.n	80054be <UART_SetConfig+0x15d6>
 80054a8:	230a      	movs	r3, #10
 80054aa:	e008      	b.n	80054be <UART_SetConfig+0x15d6>
 80054ac:	2308      	movs	r3, #8
 80054ae:	e006      	b.n	80054be <UART_SetConfig+0x15d6>
 80054b0:	2306      	movs	r3, #6
 80054b2:	e004      	b.n	80054be <UART_SetConfig+0x15d6>
 80054b4:	2304      	movs	r3, #4
 80054b6:	e002      	b.n	80054be <UART_SetConfig+0x15d6>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e000      	b.n	80054be <UART_SetConfig+0x15d6>
 80054bc:	2301      	movs	r3, #1
 80054be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c4:	005a      	lsls	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	441a      	add	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054da:	e2b0      	b.n	8005a3e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054dc:	f7fd f980 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 80054e0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d044      	beq.n	8005574 <UART_SetConfig+0x168c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d03e      	beq.n	8005570 <UART_SetConfig+0x1688>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d038      	beq.n	800556c <UART_SetConfig+0x1684>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d032      	beq.n	8005568 <UART_SetConfig+0x1680>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	2b04      	cmp	r3, #4
 8005508:	d02c      	beq.n	8005564 <UART_SetConfig+0x167c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2b05      	cmp	r3, #5
 8005510:	d026      	beq.n	8005560 <UART_SetConfig+0x1678>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	2b06      	cmp	r3, #6
 8005518:	d020      	beq.n	800555c <UART_SetConfig+0x1674>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	2b07      	cmp	r3, #7
 8005520:	d01a      	beq.n	8005558 <UART_SetConfig+0x1670>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	2b08      	cmp	r3, #8
 8005528:	d014      	beq.n	8005554 <UART_SetConfig+0x166c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2b09      	cmp	r3, #9
 8005530:	d00e      	beq.n	8005550 <UART_SetConfig+0x1668>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	2b0a      	cmp	r3, #10
 8005538:	d008      	beq.n	800554c <UART_SetConfig+0x1664>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	2b0b      	cmp	r3, #11
 8005540:	d102      	bne.n	8005548 <UART_SetConfig+0x1660>
 8005542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005546:	e016      	b.n	8005576 <UART_SetConfig+0x168e>
 8005548:	2301      	movs	r3, #1
 800554a:	e014      	b.n	8005576 <UART_SetConfig+0x168e>
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	e012      	b.n	8005576 <UART_SetConfig+0x168e>
 8005550:	2340      	movs	r3, #64	; 0x40
 8005552:	e010      	b.n	8005576 <UART_SetConfig+0x168e>
 8005554:	2320      	movs	r3, #32
 8005556:	e00e      	b.n	8005576 <UART_SetConfig+0x168e>
 8005558:	2310      	movs	r3, #16
 800555a:	e00c      	b.n	8005576 <UART_SetConfig+0x168e>
 800555c:	230c      	movs	r3, #12
 800555e:	e00a      	b.n	8005576 <UART_SetConfig+0x168e>
 8005560:	230a      	movs	r3, #10
 8005562:	e008      	b.n	8005576 <UART_SetConfig+0x168e>
 8005564:	2308      	movs	r3, #8
 8005566:	e006      	b.n	8005576 <UART_SetConfig+0x168e>
 8005568:	2306      	movs	r3, #6
 800556a:	e004      	b.n	8005576 <UART_SetConfig+0x168e>
 800556c:	2304      	movs	r3, #4
 800556e:	e002      	b.n	8005576 <UART_SetConfig+0x168e>
 8005570:	2302      	movs	r3, #2
 8005572:	e000      	b.n	8005576 <UART_SetConfig+0x168e>
 8005574:	2301      	movs	r3, #1
 8005576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	005a      	lsls	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	441a      	add	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	b29b      	uxth	r3, r3
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005592:	e254      	b.n	8005a3e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005594:	f107 0318 	add.w	r3, r7, #24
 8005598:	4618      	mov	r0, r3
 800559a:	f7fe f83d 	bl	8003618 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d044      	beq.n	8005632 <UART_SetConfig+0x174a>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d03e      	beq.n	800562e <UART_SetConfig+0x1746>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d038      	beq.n	800562a <UART_SetConfig+0x1742>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d032      	beq.n	8005626 <UART_SetConfig+0x173e>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d02c      	beq.n	8005622 <UART_SetConfig+0x173a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	2b05      	cmp	r3, #5
 80055ce:	d026      	beq.n	800561e <UART_SetConfig+0x1736>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	2b06      	cmp	r3, #6
 80055d6:	d020      	beq.n	800561a <UART_SetConfig+0x1732>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	2b07      	cmp	r3, #7
 80055de:	d01a      	beq.n	8005616 <UART_SetConfig+0x172e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d014      	beq.n	8005612 <UART_SetConfig+0x172a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	2b09      	cmp	r3, #9
 80055ee:	d00e      	beq.n	800560e <UART_SetConfig+0x1726>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	2b0a      	cmp	r3, #10
 80055f6:	d008      	beq.n	800560a <UART_SetConfig+0x1722>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	2b0b      	cmp	r3, #11
 80055fe:	d102      	bne.n	8005606 <UART_SetConfig+0x171e>
 8005600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005604:	e016      	b.n	8005634 <UART_SetConfig+0x174c>
 8005606:	2301      	movs	r3, #1
 8005608:	e014      	b.n	8005634 <UART_SetConfig+0x174c>
 800560a:	2380      	movs	r3, #128	; 0x80
 800560c:	e012      	b.n	8005634 <UART_SetConfig+0x174c>
 800560e:	2340      	movs	r3, #64	; 0x40
 8005610:	e010      	b.n	8005634 <UART_SetConfig+0x174c>
 8005612:	2320      	movs	r3, #32
 8005614:	e00e      	b.n	8005634 <UART_SetConfig+0x174c>
 8005616:	2310      	movs	r3, #16
 8005618:	e00c      	b.n	8005634 <UART_SetConfig+0x174c>
 800561a:	230c      	movs	r3, #12
 800561c:	e00a      	b.n	8005634 <UART_SetConfig+0x174c>
 800561e:	230a      	movs	r3, #10
 8005620:	e008      	b.n	8005634 <UART_SetConfig+0x174c>
 8005622:	2308      	movs	r3, #8
 8005624:	e006      	b.n	8005634 <UART_SetConfig+0x174c>
 8005626:	2306      	movs	r3, #6
 8005628:	e004      	b.n	8005634 <UART_SetConfig+0x174c>
 800562a:	2304      	movs	r3, #4
 800562c:	e002      	b.n	8005634 <UART_SetConfig+0x174c>
 800562e:	2302      	movs	r3, #2
 8005630:	e000      	b.n	8005634 <UART_SetConfig+0x174c>
 8005632:	2301      	movs	r3, #1
 8005634:	fbb2 f3f3 	udiv	r3, r2, r3
 8005638:	005a      	lsls	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	085b      	lsrs	r3, r3, #1
 8005640:	441a      	add	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	fbb2 f3f3 	udiv	r3, r2, r3
 800564a:	b29b      	uxth	r3, r3
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800564e:	e1f6      	b.n	8005a3e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005650:	f107 030c 	add.w	r3, r7, #12
 8005654:	4618      	mov	r0, r3
 8005656:	f7fe f92b 	bl	80038b0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	2b00      	cmp	r3, #0
 8005662:	d044      	beq.n	80056ee <UART_SetConfig+0x1806>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	2b01      	cmp	r3, #1
 800566a:	d03e      	beq.n	80056ea <UART_SetConfig+0x1802>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	2b02      	cmp	r3, #2
 8005672:	d038      	beq.n	80056e6 <UART_SetConfig+0x17fe>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	2b03      	cmp	r3, #3
 800567a:	d032      	beq.n	80056e2 <UART_SetConfig+0x17fa>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	2b04      	cmp	r3, #4
 8005682:	d02c      	beq.n	80056de <UART_SetConfig+0x17f6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b05      	cmp	r3, #5
 800568a:	d026      	beq.n	80056da <UART_SetConfig+0x17f2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	2b06      	cmp	r3, #6
 8005692:	d020      	beq.n	80056d6 <UART_SetConfig+0x17ee>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	2b07      	cmp	r3, #7
 800569a:	d01a      	beq.n	80056d2 <UART_SetConfig+0x17ea>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d014      	beq.n	80056ce <UART_SetConfig+0x17e6>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	2b09      	cmp	r3, #9
 80056aa:	d00e      	beq.n	80056ca <UART_SetConfig+0x17e2>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	2b0a      	cmp	r3, #10
 80056b2:	d008      	beq.n	80056c6 <UART_SetConfig+0x17de>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	2b0b      	cmp	r3, #11
 80056ba:	d102      	bne.n	80056c2 <UART_SetConfig+0x17da>
 80056bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056c0:	e016      	b.n	80056f0 <UART_SetConfig+0x1808>
 80056c2:	2301      	movs	r3, #1
 80056c4:	e014      	b.n	80056f0 <UART_SetConfig+0x1808>
 80056c6:	2380      	movs	r3, #128	; 0x80
 80056c8:	e012      	b.n	80056f0 <UART_SetConfig+0x1808>
 80056ca:	2340      	movs	r3, #64	; 0x40
 80056cc:	e010      	b.n	80056f0 <UART_SetConfig+0x1808>
 80056ce:	2320      	movs	r3, #32
 80056d0:	e00e      	b.n	80056f0 <UART_SetConfig+0x1808>
 80056d2:	2310      	movs	r3, #16
 80056d4:	e00c      	b.n	80056f0 <UART_SetConfig+0x1808>
 80056d6:	230c      	movs	r3, #12
 80056d8:	e00a      	b.n	80056f0 <UART_SetConfig+0x1808>
 80056da:	230a      	movs	r3, #10
 80056dc:	e008      	b.n	80056f0 <UART_SetConfig+0x1808>
 80056de:	2308      	movs	r3, #8
 80056e0:	e006      	b.n	80056f0 <UART_SetConfig+0x1808>
 80056e2:	2306      	movs	r3, #6
 80056e4:	e004      	b.n	80056f0 <UART_SetConfig+0x1808>
 80056e6:	2304      	movs	r3, #4
 80056e8:	e002      	b.n	80056f0 <UART_SetConfig+0x1808>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e000      	b.n	80056f0 <UART_SetConfig+0x1808>
 80056ee:	2301      	movs	r3, #1
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	005a      	lsls	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	085b      	lsrs	r3, r3, #1
 80056fc:	441a      	add	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	fbb2 f3f3 	udiv	r3, r2, r3
 8005706:	b29b      	uxth	r3, r3
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800570a:	e198      	b.n	8005a3e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800570c:	4b87      	ldr	r3, [pc, #540]	; (800592c <UART_SetConfig+0x1a44>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d05e      	beq.n	80057d6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005718:	4b84      	ldr	r3, [pc, #528]	; (800592c <UART_SetConfig+0x1a44>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	08db      	lsrs	r3, r3, #3
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	4a83      	ldr	r2, [pc, #524]	; (8005930 <UART_SetConfig+0x1a48>)
 8005724:	40da      	lsrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	2b00      	cmp	r3, #0
 800572c:	d044      	beq.n	80057b8 <UART_SetConfig+0x18d0>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	2b01      	cmp	r3, #1
 8005734:	d03e      	beq.n	80057b4 <UART_SetConfig+0x18cc>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	2b02      	cmp	r3, #2
 800573c:	d038      	beq.n	80057b0 <UART_SetConfig+0x18c8>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b03      	cmp	r3, #3
 8005744:	d032      	beq.n	80057ac <UART_SetConfig+0x18c4>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	2b04      	cmp	r3, #4
 800574c:	d02c      	beq.n	80057a8 <UART_SetConfig+0x18c0>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b05      	cmp	r3, #5
 8005754:	d026      	beq.n	80057a4 <UART_SetConfig+0x18bc>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b06      	cmp	r3, #6
 800575c:	d020      	beq.n	80057a0 <UART_SetConfig+0x18b8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	2b07      	cmp	r3, #7
 8005764:	d01a      	beq.n	800579c <UART_SetConfig+0x18b4>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b08      	cmp	r3, #8
 800576c:	d014      	beq.n	8005798 <UART_SetConfig+0x18b0>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	2b09      	cmp	r3, #9
 8005774:	d00e      	beq.n	8005794 <UART_SetConfig+0x18ac>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b0a      	cmp	r3, #10
 800577c:	d008      	beq.n	8005790 <UART_SetConfig+0x18a8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b0b      	cmp	r3, #11
 8005784:	d102      	bne.n	800578c <UART_SetConfig+0x18a4>
 8005786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800578a:	e016      	b.n	80057ba <UART_SetConfig+0x18d2>
 800578c:	2301      	movs	r3, #1
 800578e:	e014      	b.n	80057ba <UART_SetConfig+0x18d2>
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	e012      	b.n	80057ba <UART_SetConfig+0x18d2>
 8005794:	2340      	movs	r3, #64	; 0x40
 8005796:	e010      	b.n	80057ba <UART_SetConfig+0x18d2>
 8005798:	2320      	movs	r3, #32
 800579a:	e00e      	b.n	80057ba <UART_SetConfig+0x18d2>
 800579c:	2310      	movs	r3, #16
 800579e:	e00c      	b.n	80057ba <UART_SetConfig+0x18d2>
 80057a0:	230c      	movs	r3, #12
 80057a2:	e00a      	b.n	80057ba <UART_SetConfig+0x18d2>
 80057a4:	230a      	movs	r3, #10
 80057a6:	e008      	b.n	80057ba <UART_SetConfig+0x18d2>
 80057a8:	2308      	movs	r3, #8
 80057aa:	e006      	b.n	80057ba <UART_SetConfig+0x18d2>
 80057ac:	2306      	movs	r3, #6
 80057ae:	e004      	b.n	80057ba <UART_SetConfig+0x18d2>
 80057b0:	2304      	movs	r3, #4
 80057b2:	e002      	b.n	80057ba <UART_SetConfig+0x18d2>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e000      	b.n	80057ba <UART_SetConfig+0x18d2>
 80057b8:	2301      	movs	r3, #1
 80057ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80057be:	005a      	lsls	r2, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	441a      	add	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80057d4:	e133      	b.n	8005a3e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d043      	beq.n	8005866 <UART_SetConfig+0x197e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d03d      	beq.n	8005862 <UART_SetConfig+0x197a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d037      	beq.n	800585e <UART_SetConfig+0x1976>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d031      	beq.n	800585a <UART_SetConfig+0x1972>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d02b      	beq.n	8005856 <UART_SetConfig+0x196e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	2b05      	cmp	r3, #5
 8005804:	d025      	beq.n	8005852 <UART_SetConfig+0x196a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2b06      	cmp	r3, #6
 800580c:	d01f      	beq.n	800584e <UART_SetConfig+0x1966>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	2b07      	cmp	r3, #7
 8005814:	d019      	beq.n	800584a <UART_SetConfig+0x1962>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b08      	cmp	r3, #8
 800581c:	d013      	beq.n	8005846 <UART_SetConfig+0x195e>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	2b09      	cmp	r3, #9
 8005824:	d00d      	beq.n	8005842 <UART_SetConfig+0x195a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b0a      	cmp	r3, #10
 800582c:	d007      	beq.n	800583e <UART_SetConfig+0x1956>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b0b      	cmp	r3, #11
 8005834:	d101      	bne.n	800583a <UART_SetConfig+0x1952>
 8005836:	4b3f      	ldr	r3, [pc, #252]	; (8005934 <UART_SetConfig+0x1a4c>)
 8005838:	e016      	b.n	8005868 <UART_SetConfig+0x1980>
 800583a:	4b3f      	ldr	r3, [pc, #252]	; (8005938 <UART_SetConfig+0x1a50>)
 800583c:	e014      	b.n	8005868 <UART_SetConfig+0x1980>
 800583e:	4b3f      	ldr	r3, [pc, #252]	; (800593c <UART_SetConfig+0x1a54>)
 8005840:	e012      	b.n	8005868 <UART_SetConfig+0x1980>
 8005842:	4b3f      	ldr	r3, [pc, #252]	; (8005940 <UART_SetConfig+0x1a58>)
 8005844:	e010      	b.n	8005868 <UART_SetConfig+0x1980>
 8005846:	4b3f      	ldr	r3, [pc, #252]	; (8005944 <UART_SetConfig+0x1a5c>)
 8005848:	e00e      	b.n	8005868 <UART_SetConfig+0x1980>
 800584a:	4b3f      	ldr	r3, [pc, #252]	; (8005948 <UART_SetConfig+0x1a60>)
 800584c:	e00c      	b.n	8005868 <UART_SetConfig+0x1980>
 800584e:	4b3f      	ldr	r3, [pc, #252]	; (800594c <UART_SetConfig+0x1a64>)
 8005850:	e00a      	b.n	8005868 <UART_SetConfig+0x1980>
 8005852:	4b3f      	ldr	r3, [pc, #252]	; (8005950 <UART_SetConfig+0x1a68>)
 8005854:	e008      	b.n	8005868 <UART_SetConfig+0x1980>
 8005856:	4b3f      	ldr	r3, [pc, #252]	; (8005954 <UART_SetConfig+0x1a6c>)
 8005858:	e006      	b.n	8005868 <UART_SetConfig+0x1980>
 800585a:	4b3f      	ldr	r3, [pc, #252]	; (8005958 <UART_SetConfig+0x1a70>)
 800585c:	e004      	b.n	8005868 <UART_SetConfig+0x1980>
 800585e:	4b3f      	ldr	r3, [pc, #252]	; (800595c <UART_SetConfig+0x1a74>)
 8005860:	e002      	b.n	8005868 <UART_SetConfig+0x1980>
 8005862:	4b33      	ldr	r3, [pc, #204]	; (8005930 <UART_SetConfig+0x1a48>)
 8005864:	e000      	b.n	8005868 <UART_SetConfig+0x1980>
 8005866:	4b34      	ldr	r3, [pc, #208]	; (8005938 <UART_SetConfig+0x1a50>)
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6852      	ldr	r2, [r2, #4]
 800586c:	0852      	lsrs	r2, r2, #1
 800586e:	441a      	add	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	fbb2 f3f3 	udiv	r3, r2, r3
 8005878:	b29b      	uxth	r3, r3
 800587a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800587c:	e0df      	b.n	8005a3e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2b00      	cmp	r3, #0
 8005884:	d045      	beq.n	8005912 <UART_SetConfig+0x1a2a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2b01      	cmp	r3, #1
 800588c:	d03f      	beq.n	800590e <UART_SetConfig+0x1a26>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b02      	cmp	r3, #2
 8005894:	d039      	beq.n	800590a <UART_SetConfig+0x1a22>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b03      	cmp	r3, #3
 800589c:	d033      	beq.n	8005906 <UART_SetConfig+0x1a1e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d02d      	beq.n	8005902 <UART_SetConfig+0x1a1a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	2b05      	cmp	r3, #5
 80058ac:	d027      	beq.n	80058fe <UART_SetConfig+0x1a16>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b06      	cmp	r3, #6
 80058b4:	d021      	beq.n	80058fa <UART_SetConfig+0x1a12>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b07      	cmp	r3, #7
 80058bc:	d01b      	beq.n	80058f6 <UART_SetConfig+0x1a0e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	d015      	beq.n	80058f2 <UART_SetConfig+0x1a0a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	2b09      	cmp	r3, #9
 80058cc:	d00f      	beq.n	80058ee <UART_SetConfig+0x1a06>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b0a      	cmp	r3, #10
 80058d4:	d008      	beq.n	80058e8 <UART_SetConfig+0x1a00>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b0b      	cmp	r3, #11
 80058dc:	d102      	bne.n	80058e4 <UART_SetConfig+0x19fc>
 80058de:	f647 2312 	movw	r3, #31250	; 0x7a12
 80058e2:	e017      	b.n	8005914 <UART_SetConfig+0x1a2c>
 80058e4:	4b18      	ldr	r3, [pc, #96]	; (8005948 <UART_SetConfig+0x1a60>)
 80058e6:	e015      	b.n	8005914 <UART_SetConfig+0x1a2c>
 80058e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80058ec:	e012      	b.n	8005914 <UART_SetConfig+0x1a2c>
 80058ee:	4b1c      	ldr	r3, [pc, #112]	; (8005960 <UART_SetConfig+0x1a78>)
 80058f0:	e010      	b.n	8005914 <UART_SetConfig+0x1a2c>
 80058f2:	4b1c      	ldr	r3, [pc, #112]	; (8005964 <UART_SetConfig+0x1a7c>)
 80058f4:	e00e      	b.n	8005914 <UART_SetConfig+0x1a2c>
 80058f6:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <UART_SetConfig+0x1a4c>)
 80058f8:	e00c      	b.n	8005914 <UART_SetConfig+0x1a2c>
 80058fa:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <UART_SetConfig+0x1a80>)
 80058fc:	e00a      	b.n	8005914 <UART_SetConfig+0x1a2c>
 80058fe:	4b1b      	ldr	r3, [pc, #108]	; (800596c <UART_SetConfig+0x1a84>)
 8005900:	e008      	b.n	8005914 <UART_SetConfig+0x1a2c>
 8005902:	4b0e      	ldr	r3, [pc, #56]	; (800593c <UART_SetConfig+0x1a54>)
 8005904:	e006      	b.n	8005914 <UART_SetConfig+0x1a2c>
 8005906:	4b1a      	ldr	r3, [pc, #104]	; (8005970 <UART_SetConfig+0x1a88>)
 8005908:	e004      	b.n	8005914 <UART_SetConfig+0x1a2c>
 800590a:	4b0d      	ldr	r3, [pc, #52]	; (8005940 <UART_SetConfig+0x1a58>)
 800590c:	e002      	b.n	8005914 <UART_SetConfig+0x1a2c>
 800590e:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <UART_SetConfig+0x1a5c>)
 8005910:	e000      	b.n	8005914 <UART_SetConfig+0x1a2c>
 8005912:	4b0d      	ldr	r3, [pc, #52]	; (8005948 <UART_SetConfig+0x1a60>)
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6852      	ldr	r2, [r2, #4]
 8005918:	0852      	lsrs	r2, r2, #1
 800591a:	441a      	add	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	fbb2 f3f3 	udiv	r3, r2, r3
 8005924:	b29b      	uxth	r3, r3
 8005926:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005928:	e089      	b.n	8005a3e <UART_SetConfig+0x1b56>
 800592a:	bf00      	nop
 800592c:	58024400 	.word	0x58024400
 8005930:	03d09000 	.word	0x03d09000
 8005934:	0007a120 	.word	0x0007a120
 8005938:	07a12000 	.word	0x07a12000
 800593c:	000f4240 	.word	0x000f4240
 8005940:	001e8480 	.word	0x001e8480
 8005944:	003d0900 	.word	0x003d0900
 8005948:	007a1200 	.word	0x007a1200
 800594c:	00a2c2aa 	.word	0x00a2c2aa
 8005950:	00c35000 	.word	0x00c35000
 8005954:	00f42400 	.word	0x00f42400
 8005958:	01458554 	.word	0x01458554
 800595c:	01e84800 	.word	0x01e84800
 8005960:	0001e848 	.word	0x0001e848
 8005964:	0003d090 	.word	0x0003d090
 8005968:	000a2c2a 	.word	0x000a2c2a
 800596c:	000c3500 	.word	0x000c3500
 8005970:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	d04f      	beq.n	8005a1c <UART_SetConfig+0x1b34>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	2b01      	cmp	r3, #1
 8005982:	d048      	beq.n	8005a16 <UART_SetConfig+0x1b2e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	2b02      	cmp	r3, #2
 800598a:	d041      	beq.n	8005a10 <UART_SetConfig+0x1b28>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	2b03      	cmp	r3, #3
 8005992:	d03a      	beq.n	8005a0a <UART_SetConfig+0x1b22>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	2b04      	cmp	r3, #4
 800599a:	d033      	beq.n	8005a04 <UART_SetConfig+0x1b1c>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	2b05      	cmp	r3, #5
 80059a2:	d02c      	beq.n	80059fe <UART_SetConfig+0x1b16>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	2b06      	cmp	r3, #6
 80059aa:	d025      	beq.n	80059f8 <UART_SetConfig+0x1b10>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	2b07      	cmp	r3, #7
 80059b2:	d01e      	beq.n	80059f2 <UART_SetConfig+0x1b0a>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d017      	beq.n	80059ec <UART_SetConfig+0x1b04>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	2b09      	cmp	r3, #9
 80059c2:	d010      	beq.n	80059e6 <UART_SetConfig+0x1afe>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	2b0a      	cmp	r3, #10
 80059ca:	d009      	beq.n	80059e0 <UART_SetConfig+0x1af8>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	2b0b      	cmp	r3, #11
 80059d2:	d102      	bne.n	80059da <UART_SetConfig+0x1af2>
 80059d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059d8:	e022      	b.n	8005a20 <UART_SetConfig+0x1b38>
 80059da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059de:	e01f      	b.n	8005a20 <UART_SetConfig+0x1b38>
 80059e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e4:	e01c      	b.n	8005a20 <UART_SetConfig+0x1b38>
 80059e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059ea:	e019      	b.n	8005a20 <UART_SetConfig+0x1b38>
 80059ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059f0:	e016      	b.n	8005a20 <UART_SetConfig+0x1b38>
 80059f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059f6:	e013      	b.n	8005a20 <UART_SetConfig+0x1b38>
 80059f8:	f241 5354 	movw	r3, #5460	; 0x1554
 80059fc:	e010      	b.n	8005a20 <UART_SetConfig+0x1b38>
 80059fe:	f641 1398 	movw	r3, #6552	; 0x1998
 8005a02:	e00d      	b.n	8005a20 <UART_SetConfig+0x1b38>
 8005a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a08:	e00a      	b.n	8005a20 <UART_SetConfig+0x1b38>
 8005a0a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005a0e:	e007      	b.n	8005a20 <UART_SetConfig+0x1b38>
 8005a10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a14:	e004      	b.n	8005a20 <UART_SetConfig+0x1b38>
 8005a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a1a:	e001      	b.n	8005a20 <UART_SetConfig+0x1b38>
 8005a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6852      	ldr	r2, [r2, #4]
 8005a24:	0852      	lsrs	r2, r2, #1
 8005a26:	441a      	add	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a34:	e003      	b.n	8005a3e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a40:	2b0f      	cmp	r3, #15
 8005a42:	d916      	bls.n	8005a72 <UART_SetConfig+0x1b8a>
 8005a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4a:	d212      	bcs.n	8005a72 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f023 030f 	bic.w	r3, r3, #15
 8005a54:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a64:	4313      	orrs	r3, r2
 8005a66:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a6e:	60da      	str	r2, [r3, #12]
 8005a70:	e3a3      	b.n	80061ba <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a78:	e39f      	b.n	80061ba <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8005a7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	f200 8388 	bhi.w	8006194 <UART_SetConfig+0x22ac>
 8005a84:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <UART_SetConfig+0x1ba4>)
 8005a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005b91 	.word	0x08005b91
 8005a90:	08005c47 	.word	0x08005c47
 8005a94:	08006195 	.word	0x08006195
 8005a98:	08006195 	.word	0x08006195
 8005a9c:	08005cfd 	.word	0x08005cfd
 8005aa0:	08006195 	.word	0x08006195
 8005aa4:	08006195 	.word	0x08006195
 8005aa8:	08006195 	.word	0x08006195
 8005aac:	08005db7 	.word	0x08005db7
 8005ab0:	08006195 	.word	0x08006195
 8005ab4:	08006195 	.word	0x08006195
 8005ab8:	08006195 	.word	0x08006195
 8005abc:	08006195 	.word	0x08006195
 8005ac0:	08006195 	.word	0x08006195
 8005ac4:	08006195 	.word	0x08006195
 8005ac8:	08006195 	.word	0x08006195
 8005acc:	08005e71 	.word	0x08005e71
 8005ad0:	08006195 	.word	0x08006195
 8005ad4:	08006195 	.word	0x08006195
 8005ad8:	08006195 	.word	0x08006195
 8005adc:	08006195 	.word	0x08006195
 8005ae0:	08006195 	.word	0x08006195
 8005ae4:	08006195 	.word	0x08006195
 8005ae8:	08006195 	.word	0x08006195
 8005aec:	08006195 	.word	0x08006195
 8005af0:	08006195 	.word	0x08006195
 8005af4:	08006195 	.word	0x08006195
 8005af8:	08006195 	.word	0x08006195
 8005afc:	08006195 	.word	0x08006195
 8005b00:	08006195 	.word	0x08006195
 8005b04:	08006195 	.word	0x08006195
 8005b08:	08006195 	.word	0x08006195
 8005b0c:	08005fe1 	.word	0x08005fe1
 8005b10:	08006195 	.word	0x08006195
 8005b14:	08006195 	.word	0x08006195
 8005b18:	08006195 	.word	0x08006195
 8005b1c:	08006195 	.word	0x08006195
 8005b20:	08006195 	.word	0x08006195
 8005b24:	08006195 	.word	0x08006195
 8005b28:	08006195 	.word	0x08006195
 8005b2c:	08006195 	.word	0x08006195
 8005b30:	08006195 	.word	0x08006195
 8005b34:	08006195 	.word	0x08006195
 8005b38:	08006195 	.word	0x08006195
 8005b3c:	08006195 	.word	0x08006195
 8005b40:	08006195 	.word	0x08006195
 8005b44:	08006195 	.word	0x08006195
 8005b48:	08006195 	.word	0x08006195
 8005b4c:	08006195 	.word	0x08006195
 8005b50:	08006195 	.word	0x08006195
 8005b54:	08006195 	.word	0x08006195
 8005b58:	08006195 	.word	0x08006195
 8005b5c:	08006195 	.word	0x08006195
 8005b60:	08006195 	.word	0x08006195
 8005b64:	08006195 	.word	0x08006195
 8005b68:	08006195 	.word	0x08006195
 8005b6c:	08006195 	.word	0x08006195
 8005b70:	08006195 	.word	0x08006195
 8005b74:	08006195 	.word	0x08006195
 8005b78:	08006195 	.word	0x08006195
 8005b7c:	08006195 	.word	0x08006195
 8005b80:	08006195 	.word	0x08006195
 8005b84:	08006195 	.word	0x08006195
 8005b88:	08006195 	.word	0x08006195
 8005b8c:	080060d5 	.word	0x080060d5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fc fe10 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8005b94:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d044      	beq.n	8005c28 <UART_SetConfig+0x1d40>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d03e      	beq.n	8005c24 <UART_SetConfig+0x1d3c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d038      	beq.n	8005c20 <UART_SetConfig+0x1d38>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d032      	beq.n	8005c1c <UART_SetConfig+0x1d34>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d02c      	beq.n	8005c18 <UART_SetConfig+0x1d30>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d026      	beq.n	8005c14 <UART_SetConfig+0x1d2c>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	2b06      	cmp	r3, #6
 8005bcc:	d020      	beq.n	8005c10 <UART_SetConfig+0x1d28>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2b07      	cmp	r3, #7
 8005bd4:	d01a      	beq.n	8005c0c <UART_SetConfig+0x1d24>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d014      	beq.n	8005c08 <UART_SetConfig+0x1d20>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2b09      	cmp	r3, #9
 8005be4:	d00e      	beq.n	8005c04 <UART_SetConfig+0x1d1c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2b0a      	cmp	r3, #10
 8005bec:	d008      	beq.n	8005c00 <UART_SetConfig+0x1d18>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	2b0b      	cmp	r3, #11
 8005bf4:	d102      	bne.n	8005bfc <UART_SetConfig+0x1d14>
 8005bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bfa:	e016      	b.n	8005c2a <UART_SetConfig+0x1d42>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e014      	b.n	8005c2a <UART_SetConfig+0x1d42>
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	e012      	b.n	8005c2a <UART_SetConfig+0x1d42>
 8005c04:	2340      	movs	r3, #64	; 0x40
 8005c06:	e010      	b.n	8005c2a <UART_SetConfig+0x1d42>
 8005c08:	2320      	movs	r3, #32
 8005c0a:	e00e      	b.n	8005c2a <UART_SetConfig+0x1d42>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	e00c      	b.n	8005c2a <UART_SetConfig+0x1d42>
 8005c10:	230c      	movs	r3, #12
 8005c12:	e00a      	b.n	8005c2a <UART_SetConfig+0x1d42>
 8005c14:	230a      	movs	r3, #10
 8005c16:	e008      	b.n	8005c2a <UART_SetConfig+0x1d42>
 8005c18:	2308      	movs	r3, #8
 8005c1a:	e006      	b.n	8005c2a <UART_SetConfig+0x1d42>
 8005c1c:	2306      	movs	r3, #6
 8005c1e:	e004      	b.n	8005c2a <UART_SetConfig+0x1d42>
 8005c20:	2304      	movs	r3, #4
 8005c22:	e002      	b.n	8005c2a <UART_SetConfig+0x1d42>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e000      	b.n	8005c2a <UART_SetConfig+0x1d42>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	085b      	lsrs	r3, r3, #1
 8005c36:	441a      	add	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c44:	e2aa      	b.n	800619c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c46:	f7fc fdcb 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 8005c4a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d044      	beq.n	8005cde <UART_SetConfig+0x1df6>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d03e      	beq.n	8005cda <UART_SetConfig+0x1df2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d038      	beq.n	8005cd6 <UART_SetConfig+0x1dee>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d032      	beq.n	8005cd2 <UART_SetConfig+0x1dea>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d02c      	beq.n	8005cce <UART_SetConfig+0x1de6>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	2b05      	cmp	r3, #5
 8005c7a:	d026      	beq.n	8005cca <UART_SetConfig+0x1de2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	2b06      	cmp	r3, #6
 8005c82:	d020      	beq.n	8005cc6 <UART_SetConfig+0x1dde>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b07      	cmp	r3, #7
 8005c8a:	d01a      	beq.n	8005cc2 <UART_SetConfig+0x1dda>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d014      	beq.n	8005cbe <UART_SetConfig+0x1dd6>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	2b09      	cmp	r3, #9
 8005c9a:	d00e      	beq.n	8005cba <UART_SetConfig+0x1dd2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b0a      	cmp	r3, #10
 8005ca2:	d008      	beq.n	8005cb6 <UART_SetConfig+0x1dce>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b0b      	cmp	r3, #11
 8005caa:	d102      	bne.n	8005cb2 <UART_SetConfig+0x1dca>
 8005cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cb0:	e016      	b.n	8005ce0 <UART_SetConfig+0x1df8>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e014      	b.n	8005ce0 <UART_SetConfig+0x1df8>
 8005cb6:	2380      	movs	r3, #128	; 0x80
 8005cb8:	e012      	b.n	8005ce0 <UART_SetConfig+0x1df8>
 8005cba:	2340      	movs	r3, #64	; 0x40
 8005cbc:	e010      	b.n	8005ce0 <UART_SetConfig+0x1df8>
 8005cbe:	2320      	movs	r3, #32
 8005cc0:	e00e      	b.n	8005ce0 <UART_SetConfig+0x1df8>
 8005cc2:	2310      	movs	r3, #16
 8005cc4:	e00c      	b.n	8005ce0 <UART_SetConfig+0x1df8>
 8005cc6:	230c      	movs	r3, #12
 8005cc8:	e00a      	b.n	8005ce0 <UART_SetConfig+0x1df8>
 8005cca:	230a      	movs	r3, #10
 8005ccc:	e008      	b.n	8005ce0 <UART_SetConfig+0x1df8>
 8005cce:	2308      	movs	r3, #8
 8005cd0:	e006      	b.n	8005ce0 <UART_SetConfig+0x1df8>
 8005cd2:	2306      	movs	r3, #6
 8005cd4:	e004      	b.n	8005ce0 <UART_SetConfig+0x1df8>
 8005cd6:	2304      	movs	r3, #4
 8005cd8:	e002      	b.n	8005ce0 <UART_SetConfig+0x1df8>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e000      	b.n	8005ce0 <UART_SetConfig+0x1df8>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ce2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	085b      	lsrs	r3, r3, #1
 8005cec:	441a      	add	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cfa:	e24f      	b.n	800619c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cfc:	f107 0318 	add.w	r3, r7, #24
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fd fc89 	bl	8003618 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d044      	beq.n	8005d9a <UART_SetConfig+0x1eb2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d03e      	beq.n	8005d96 <UART_SetConfig+0x1eae>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d038      	beq.n	8005d92 <UART_SetConfig+0x1eaa>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d032      	beq.n	8005d8e <UART_SetConfig+0x1ea6>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d02c      	beq.n	8005d8a <UART_SetConfig+0x1ea2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2b05      	cmp	r3, #5
 8005d36:	d026      	beq.n	8005d86 <UART_SetConfig+0x1e9e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	2b06      	cmp	r3, #6
 8005d3e:	d020      	beq.n	8005d82 <UART_SetConfig+0x1e9a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	2b07      	cmp	r3, #7
 8005d46:	d01a      	beq.n	8005d7e <UART_SetConfig+0x1e96>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d014      	beq.n	8005d7a <UART_SetConfig+0x1e92>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	2b09      	cmp	r3, #9
 8005d56:	d00e      	beq.n	8005d76 <UART_SetConfig+0x1e8e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	2b0a      	cmp	r3, #10
 8005d5e:	d008      	beq.n	8005d72 <UART_SetConfig+0x1e8a>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	2b0b      	cmp	r3, #11
 8005d66:	d102      	bne.n	8005d6e <UART_SetConfig+0x1e86>
 8005d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d6c:	e016      	b.n	8005d9c <UART_SetConfig+0x1eb4>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e014      	b.n	8005d9c <UART_SetConfig+0x1eb4>
 8005d72:	2380      	movs	r3, #128	; 0x80
 8005d74:	e012      	b.n	8005d9c <UART_SetConfig+0x1eb4>
 8005d76:	2340      	movs	r3, #64	; 0x40
 8005d78:	e010      	b.n	8005d9c <UART_SetConfig+0x1eb4>
 8005d7a:	2320      	movs	r3, #32
 8005d7c:	e00e      	b.n	8005d9c <UART_SetConfig+0x1eb4>
 8005d7e:	2310      	movs	r3, #16
 8005d80:	e00c      	b.n	8005d9c <UART_SetConfig+0x1eb4>
 8005d82:	230c      	movs	r3, #12
 8005d84:	e00a      	b.n	8005d9c <UART_SetConfig+0x1eb4>
 8005d86:	230a      	movs	r3, #10
 8005d88:	e008      	b.n	8005d9c <UART_SetConfig+0x1eb4>
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	e006      	b.n	8005d9c <UART_SetConfig+0x1eb4>
 8005d8e:	2306      	movs	r3, #6
 8005d90:	e004      	b.n	8005d9c <UART_SetConfig+0x1eb4>
 8005d92:	2304      	movs	r3, #4
 8005d94:	e002      	b.n	8005d9c <UART_SetConfig+0x1eb4>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e000      	b.n	8005d9c <UART_SetConfig+0x1eb4>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	085b      	lsrs	r3, r3, #1
 8005da6:	441a      	add	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005db4:	e1f2      	b.n	800619c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005db6:	f107 030c 	add.w	r3, r7, #12
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fd fd78 	bl	80038b0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d044      	beq.n	8005e54 <UART_SetConfig+0x1f6c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d03e      	beq.n	8005e50 <UART_SetConfig+0x1f68>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d038      	beq.n	8005e4c <UART_SetConfig+0x1f64>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d032      	beq.n	8005e48 <UART_SetConfig+0x1f60>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d02c      	beq.n	8005e44 <UART_SetConfig+0x1f5c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d026      	beq.n	8005e40 <UART_SetConfig+0x1f58>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	2b06      	cmp	r3, #6
 8005df8:	d020      	beq.n	8005e3c <UART_SetConfig+0x1f54>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	2b07      	cmp	r3, #7
 8005e00:	d01a      	beq.n	8005e38 <UART_SetConfig+0x1f50>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d014      	beq.n	8005e34 <UART_SetConfig+0x1f4c>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	2b09      	cmp	r3, #9
 8005e10:	d00e      	beq.n	8005e30 <UART_SetConfig+0x1f48>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	2b0a      	cmp	r3, #10
 8005e18:	d008      	beq.n	8005e2c <UART_SetConfig+0x1f44>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	2b0b      	cmp	r3, #11
 8005e20:	d102      	bne.n	8005e28 <UART_SetConfig+0x1f40>
 8005e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e26:	e016      	b.n	8005e56 <UART_SetConfig+0x1f6e>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e014      	b.n	8005e56 <UART_SetConfig+0x1f6e>
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	e012      	b.n	8005e56 <UART_SetConfig+0x1f6e>
 8005e30:	2340      	movs	r3, #64	; 0x40
 8005e32:	e010      	b.n	8005e56 <UART_SetConfig+0x1f6e>
 8005e34:	2320      	movs	r3, #32
 8005e36:	e00e      	b.n	8005e56 <UART_SetConfig+0x1f6e>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	e00c      	b.n	8005e56 <UART_SetConfig+0x1f6e>
 8005e3c:	230c      	movs	r3, #12
 8005e3e:	e00a      	b.n	8005e56 <UART_SetConfig+0x1f6e>
 8005e40:	230a      	movs	r3, #10
 8005e42:	e008      	b.n	8005e56 <UART_SetConfig+0x1f6e>
 8005e44:	2308      	movs	r3, #8
 8005e46:	e006      	b.n	8005e56 <UART_SetConfig+0x1f6e>
 8005e48:	2306      	movs	r3, #6
 8005e4a:	e004      	b.n	8005e56 <UART_SetConfig+0x1f6e>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	e002      	b.n	8005e56 <UART_SetConfig+0x1f6e>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e000      	b.n	8005e56 <UART_SetConfig+0x1f6e>
 8005e54:	2301      	movs	r3, #1
 8005e56:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	441a      	add	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e6e:	e195      	b.n	800619c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e70:	4b87      	ldr	r3, [pc, #540]	; (8006090 <UART_SetConfig+0x21a8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d05d      	beq.n	8005f38 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e7c:	4b84      	ldr	r3, [pc, #528]	; (8006090 <UART_SetConfig+0x21a8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	08db      	lsrs	r3, r3, #3
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	4a83      	ldr	r2, [pc, #524]	; (8006094 <UART_SetConfig+0x21ac>)
 8005e88:	40da      	lsrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d044      	beq.n	8005f1c <UART_SetConfig+0x2034>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d03e      	beq.n	8005f18 <UART_SetConfig+0x2030>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d038      	beq.n	8005f14 <UART_SetConfig+0x202c>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d032      	beq.n	8005f10 <UART_SetConfig+0x2028>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d02c      	beq.n	8005f0c <UART_SetConfig+0x2024>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	d026      	beq.n	8005f08 <UART_SetConfig+0x2020>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	2b06      	cmp	r3, #6
 8005ec0:	d020      	beq.n	8005f04 <UART_SetConfig+0x201c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	2b07      	cmp	r3, #7
 8005ec8:	d01a      	beq.n	8005f00 <UART_SetConfig+0x2018>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d014      	beq.n	8005efc <UART_SetConfig+0x2014>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	2b09      	cmp	r3, #9
 8005ed8:	d00e      	beq.n	8005ef8 <UART_SetConfig+0x2010>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	2b0a      	cmp	r3, #10
 8005ee0:	d008      	beq.n	8005ef4 <UART_SetConfig+0x200c>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	2b0b      	cmp	r3, #11
 8005ee8:	d102      	bne.n	8005ef0 <UART_SetConfig+0x2008>
 8005eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eee:	e016      	b.n	8005f1e <UART_SetConfig+0x2036>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e014      	b.n	8005f1e <UART_SetConfig+0x2036>
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	e012      	b.n	8005f1e <UART_SetConfig+0x2036>
 8005ef8:	2340      	movs	r3, #64	; 0x40
 8005efa:	e010      	b.n	8005f1e <UART_SetConfig+0x2036>
 8005efc:	2320      	movs	r3, #32
 8005efe:	e00e      	b.n	8005f1e <UART_SetConfig+0x2036>
 8005f00:	2310      	movs	r3, #16
 8005f02:	e00c      	b.n	8005f1e <UART_SetConfig+0x2036>
 8005f04:	230c      	movs	r3, #12
 8005f06:	e00a      	b.n	8005f1e <UART_SetConfig+0x2036>
 8005f08:	230a      	movs	r3, #10
 8005f0a:	e008      	b.n	8005f1e <UART_SetConfig+0x2036>
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	e006      	b.n	8005f1e <UART_SetConfig+0x2036>
 8005f10:	2306      	movs	r3, #6
 8005f12:	e004      	b.n	8005f1e <UART_SetConfig+0x2036>
 8005f14:	2304      	movs	r3, #4
 8005f16:	e002      	b.n	8005f1e <UART_SetConfig+0x2036>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e000      	b.n	8005f1e <UART_SetConfig+0x2036>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	441a      	add	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8005f36:	e131      	b.n	800619c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d043      	beq.n	8005fc8 <UART_SetConfig+0x20e0>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d03d      	beq.n	8005fc4 <UART_SetConfig+0x20dc>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d037      	beq.n	8005fc0 <UART_SetConfig+0x20d8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d031      	beq.n	8005fbc <UART_SetConfig+0x20d4>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d02b      	beq.n	8005fb8 <UART_SetConfig+0x20d0>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	2b05      	cmp	r3, #5
 8005f66:	d025      	beq.n	8005fb4 <UART_SetConfig+0x20cc>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	2b06      	cmp	r3, #6
 8005f6e:	d01f      	beq.n	8005fb0 <UART_SetConfig+0x20c8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	2b07      	cmp	r3, #7
 8005f76:	d019      	beq.n	8005fac <UART_SetConfig+0x20c4>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d013      	beq.n	8005fa8 <UART_SetConfig+0x20c0>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	2b09      	cmp	r3, #9
 8005f86:	d00d      	beq.n	8005fa4 <UART_SetConfig+0x20bc>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	2b0a      	cmp	r3, #10
 8005f8e:	d007      	beq.n	8005fa0 <UART_SetConfig+0x20b8>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	2b0b      	cmp	r3, #11
 8005f96:	d101      	bne.n	8005f9c <UART_SetConfig+0x20b4>
 8005f98:	4b3f      	ldr	r3, [pc, #252]	; (8006098 <UART_SetConfig+0x21b0>)
 8005f9a:	e016      	b.n	8005fca <UART_SetConfig+0x20e2>
 8005f9c:	4b3d      	ldr	r3, [pc, #244]	; (8006094 <UART_SetConfig+0x21ac>)
 8005f9e:	e014      	b.n	8005fca <UART_SetConfig+0x20e2>
 8005fa0:	4b3e      	ldr	r3, [pc, #248]	; (800609c <UART_SetConfig+0x21b4>)
 8005fa2:	e012      	b.n	8005fca <UART_SetConfig+0x20e2>
 8005fa4:	4b3e      	ldr	r3, [pc, #248]	; (80060a0 <UART_SetConfig+0x21b8>)
 8005fa6:	e010      	b.n	8005fca <UART_SetConfig+0x20e2>
 8005fa8:	4b3e      	ldr	r3, [pc, #248]	; (80060a4 <UART_SetConfig+0x21bc>)
 8005faa:	e00e      	b.n	8005fca <UART_SetConfig+0x20e2>
 8005fac:	4b3e      	ldr	r3, [pc, #248]	; (80060a8 <UART_SetConfig+0x21c0>)
 8005fae:	e00c      	b.n	8005fca <UART_SetConfig+0x20e2>
 8005fb0:	4b3e      	ldr	r3, [pc, #248]	; (80060ac <UART_SetConfig+0x21c4>)
 8005fb2:	e00a      	b.n	8005fca <UART_SetConfig+0x20e2>
 8005fb4:	4b3e      	ldr	r3, [pc, #248]	; (80060b0 <UART_SetConfig+0x21c8>)
 8005fb6:	e008      	b.n	8005fca <UART_SetConfig+0x20e2>
 8005fb8:	4b3e      	ldr	r3, [pc, #248]	; (80060b4 <UART_SetConfig+0x21cc>)
 8005fba:	e006      	b.n	8005fca <UART_SetConfig+0x20e2>
 8005fbc:	4b3e      	ldr	r3, [pc, #248]	; (80060b8 <UART_SetConfig+0x21d0>)
 8005fbe:	e004      	b.n	8005fca <UART_SetConfig+0x20e2>
 8005fc0:	4b3e      	ldr	r3, [pc, #248]	; (80060bc <UART_SetConfig+0x21d4>)
 8005fc2:	e002      	b.n	8005fca <UART_SetConfig+0x20e2>
 8005fc4:	4b3e      	ldr	r3, [pc, #248]	; (80060c0 <UART_SetConfig+0x21d8>)
 8005fc6:	e000      	b.n	8005fca <UART_SetConfig+0x20e2>
 8005fc8:	4b32      	ldr	r3, [pc, #200]	; (8006094 <UART_SetConfig+0x21ac>)
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6852      	ldr	r2, [r2, #4]
 8005fce:	0852      	lsrs	r2, r2, #1
 8005fd0:	441a      	add	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fde:	e0dd      	b.n	800619c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d046      	beq.n	8006076 <UART_SetConfig+0x218e>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d040      	beq.n	8006072 <UART_SetConfig+0x218a>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d03a      	beq.n	800606e <UART_SetConfig+0x2186>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d034      	beq.n	800606a <UART_SetConfig+0x2182>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	2b04      	cmp	r3, #4
 8006006:	d02e      	beq.n	8006066 <UART_SetConfig+0x217e>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	2b05      	cmp	r3, #5
 800600e:	d028      	beq.n	8006062 <UART_SetConfig+0x217a>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	2b06      	cmp	r3, #6
 8006016:	d022      	beq.n	800605e <UART_SetConfig+0x2176>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	2b07      	cmp	r3, #7
 800601e:	d01c      	beq.n	800605a <UART_SetConfig+0x2172>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	2b08      	cmp	r3, #8
 8006026:	d016      	beq.n	8006056 <UART_SetConfig+0x216e>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	2b09      	cmp	r3, #9
 800602e:	d00f      	beq.n	8006050 <UART_SetConfig+0x2168>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	2b0a      	cmp	r3, #10
 8006036:	d008      	beq.n	800604a <UART_SetConfig+0x2162>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	2b0b      	cmp	r3, #11
 800603e:	d102      	bne.n	8006046 <UART_SetConfig+0x215e>
 8006040:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006044:	e018      	b.n	8006078 <UART_SetConfig+0x2190>
 8006046:	4b18      	ldr	r3, [pc, #96]	; (80060a8 <UART_SetConfig+0x21c0>)
 8006048:	e016      	b.n	8006078 <UART_SetConfig+0x2190>
 800604a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800604e:	e013      	b.n	8006078 <UART_SetConfig+0x2190>
 8006050:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006054:	e010      	b.n	8006078 <UART_SetConfig+0x2190>
 8006056:	4b1b      	ldr	r3, [pc, #108]	; (80060c4 <UART_SetConfig+0x21dc>)
 8006058:	e00e      	b.n	8006078 <UART_SetConfig+0x2190>
 800605a:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <UART_SetConfig+0x21b0>)
 800605c:	e00c      	b.n	8006078 <UART_SetConfig+0x2190>
 800605e:	4b1a      	ldr	r3, [pc, #104]	; (80060c8 <UART_SetConfig+0x21e0>)
 8006060:	e00a      	b.n	8006078 <UART_SetConfig+0x2190>
 8006062:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <UART_SetConfig+0x21e4>)
 8006064:	e008      	b.n	8006078 <UART_SetConfig+0x2190>
 8006066:	4b0d      	ldr	r3, [pc, #52]	; (800609c <UART_SetConfig+0x21b4>)
 8006068:	e006      	b.n	8006078 <UART_SetConfig+0x2190>
 800606a:	4b19      	ldr	r3, [pc, #100]	; (80060d0 <UART_SetConfig+0x21e8>)
 800606c:	e004      	b.n	8006078 <UART_SetConfig+0x2190>
 800606e:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <UART_SetConfig+0x21b8>)
 8006070:	e002      	b.n	8006078 <UART_SetConfig+0x2190>
 8006072:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <UART_SetConfig+0x21bc>)
 8006074:	e000      	b.n	8006078 <UART_SetConfig+0x2190>
 8006076:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <UART_SetConfig+0x21c0>)
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6852      	ldr	r2, [r2, #4]
 800607c:	0852      	lsrs	r2, r2, #1
 800607e:	441a      	add	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	fbb2 f3f3 	udiv	r3, r2, r3
 8006088:	b29b      	uxth	r3, r3
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800608c:	e086      	b.n	800619c <UART_SetConfig+0x22b4>
 800608e:	bf00      	nop
 8006090:	58024400 	.word	0x58024400
 8006094:	03d09000 	.word	0x03d09000
 8006098:	0003d090 	.word	0x0003d090
 800609c:	0007a120 	.word	0x0007a120
 80060a0:	000f4240 	.word	0x000f4240
 80060a4:	001e8480 	.word	0x001e8480
 80060a8:	003d0900 	.word	0x003d0900
 80060ac:	00516155 	.word	0x00516155
 80060b0:	0061a800 	.word	0x0061a800
 80060b4:	007a1200 	.word	0x007a1200
 80060b8:	00a2c2aa 	.word	0x00a2c2aa
 80060bc:	00f42400 	.word	0x00f42400
 80060c0:	01e84800 	.word	0x01e84800
 80060c4:	0001e848 	.word	0x0001e848
 80060c8:	00051615 	.word	0x00051615
 80060cc:	00061a80 	.word	0x00061a80
 80060d0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d04e      	beq.n	800617a <UART_SetConfig+0x2292>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d047      	beq.n	8006174 <UART_SetConfig+0x228c>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d040      	beq.n	800616e <UART_SetConfig+0x2286>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d039      	beq.n	8006168 <UART_SetConfig+0x2280>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	d032      	beq.n	8006162 <UART_SetConfig+0x227a>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	2b05      	cmp	r3, #5
 8006102:	d02b      	beq.n	800615c <UART_SetConfig+0x2274>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	2b06      	cmp	r3, #6
 800610a:	d024      	beq.n	8006156 <UART_SetConfig+0x226e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	2b07      	cmp	r3, #7
 8006112:	d01d      	beq.n	8006150 <UART_SetConfig+0x2268>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	2b08      	cmp	r3, #8
 800611a:	d016      	beq.n	800614a <UART_SetConfig+0x2262>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	2b09      	cmp	r3, #9
 8006122:	d00f      	beq.n	8006144 <UART_SetConfig+0x225c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	2b0a      	cmp	r3, #10
 800612a:	d008      	beq.n	800613e <UART_SetConfig+0x2256>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	2b0b      	cmp	r3, #11
 8006132:	d101      	bne.n	8006138 <UART_SetConfig+0x2250>
 8006134:	2380      	movs	r3, #128	; 0x80
 8006136:	e022      	b.n	800617e <UART_SetConfig+0x2296>
 8006138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800613c:	e01f      	b.n	800617e <UART_SetConfig+0x2296>
 800613e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006142:	e01c      	b.n	800617e <UART_SetConfig+0x2296>
 8006144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006148:	e019      	b.n	800617e <UART_SetConfig+0x2296>
 800614a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800614e:	e016      	b.n	800617e <UART_SetConfig+0x2296>
 8006150:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006154:	e013      	b.n	800617e <UART_SetConfig+0x2296>
 8006156:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800615a:	e010      	b.n	800617e <UART_SetConfig+0x2296>
 800615c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006160:	e00d      	b.n	800617e <UART_SetConfig+0x2296>
 8006162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006166:	e00a      	b.n	800617e <UART_SetConfig+0x2296>
 8006168:	f241 5355 	movw	r3, #5461	; 0x1555
 800616c:	e007      	b.n	800617e <UART_SetConfig+0x2296>
 800616e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006172:	e004      	b.n	800617e <UART_SetConfig+0x2296>
 8006174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006178:	e001      	b.n	800617e <UART_SetConfig+0x2296>
 800617a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6852      	ldr	r2, [r2, #4]
 8006182:	0852      	lsrs	r2, r2, #1
 8006184:	441a      	add	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	fbb2 f3f3 	udiv	r3, r2, r3
 800618e:	b29b      	uxth	r3, r3
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006192:	e003      	b.n	800619c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800619a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800619c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619e:	2b0f      	cmp	r3, #15
 80061a0:	d908      	bls.n	80061b4 <UART_SetConfig+0x22cc>
 80061a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a8:	d204      	bcs.n	80061b4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b0:	60da      	str	r2, [r3, #12]
 80061b2:	e002      	b.n	80061ba <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80061d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3740      	adds	r7, #64	; 0x40
 80061de:	46bd      	mov	sp, r7
 80061e0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080061e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006278:	f003 0310 	and.w	r3, r3, #16
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01a      	beq.n	80062fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062e2:	d10a      	bne.n	80062fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	605a      	str	r2, [r3, #4]
  }
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af02      	add	r7, sp, #8
 800632e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006338:	f7fb f818 	bl	800136c <HAL_GetTick>
 800633c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b08      	cmp	r3, #8
 800634a:	d10e      	bne.n	800636a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800634c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f82c 	bl	80063b8 <UART_WaitOnFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e022      	b.n	80063b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b04      	cmp	r3, #4
 8006376:	d10e      	bne.n	8006396 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f816 	bl	80063b8 <UART_WaitOnFlagUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e00c      	b.n	80063b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c8:	e062      	b.n	8006490 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d05e      	beq.n	8006490 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d2:	f7fa ffcb 	bl	800136c <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d302      	bcc.n	80063e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11d      	bne.n	8006424 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063f6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0201 	bic.w	r2, r2, #1
 8006406:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2220      	movs	r2, #32
 8006414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e045      	b.n	80064b0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	2b00      	cmp	r3, #0
 8006430:	d02e      	beq.n	8006490 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800643c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006440:	d126      	bne.n	8006490 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800644a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800645a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e00f      	b.n	80064b0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69da      	ldr	r2, [r3, #28]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	4013      	ands	r3, r2
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	429a      	cmp	r2, r3
 800649e:	bf0c      	ite	eq
 80064a0:	2301      	moveq	r3, #1
 80064a2:	2300      	movne	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d08d      	beq.n	80063ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <HAL_UARTEx_DisableFifoMode+0x16>
 80064ca:	2302      	movs	r3, #2
 80064cc:	e027      	b.n	800651e <HAL_UARTEx_DisableFifoMode+0x66>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2224      	movs	r2, #36	; 0x24
 80064da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0201 	bic.w	r2, r2, #1
 80064f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800653e:	2302      	movs	r3, #2
 8006540:	e02d      	b.n	800659e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2224      	movs	r2, #36	; 0x24
 800654e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0201 	bic.w	r2, r2, #1
 8006568:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f850 	bl	8006624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e02d      	b.n	800661a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2224      	movs	r2, #36	; 0x24
 80065ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0201 	bic.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f812 	bl	8006624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b089      	sub	sp, #36	; 0x24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800662c:	4a2f      	ldr	r2, [pc, #188]	; (80066ec <UARTEx_SetNbDataToProcess+0xc8>)
 800662e:	f107 0314 	add.w	r3, r7, #20
 8006632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006636:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800663a:	4a2d      	ldr	r2, [pc, #180]	; (80066f0 <UARTEx_SetNbDataToProcess+0xcc>)
 800663c:	f107 030c 	add.w	r3, r7, #12
 8006640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006644:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800664c:	2b00      	cmp	r3, #0
 800664e:	d108      	bne.n	8006662 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006660:	e03d      	b.n	80066de <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006662:	2308      	movs	r3, #8
 8006664:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006666:	2308      	movs	r3, #8
 8006668:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	0e5b      	lsrs	r3, r3, #25
 8006672:	b2db      	uxtb	r3, r3
 8006674:	f003 0307 	and.w	r3, r3, #7
 8006678:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	0f5b      	lsrs	r3, r3, #29
 8006682:	b2db      	uxtb	r3, r3
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800668a:	7fbb      	ldrb	r3, [r7, #30]
 800668c:	7f3a      	ldrb	r2, [r7, #28]
 800668e:	f107 0120 	add.w	r1, r7, #32
 8006692:	440a      	add	r2, r1
 8006694:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006698:	fb02 f303 	mul.w	r3, r2, r3
 800669c:	7f3a      	ldrb	r2, [r7, #28]
 800669e:	f107 0120 	add.w	r1, r7, #32
 80066a2:	440a      	add	r2, r1
 80066a4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80066a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80066b4:	7ffb      	ldrb	r3, [r7, #31]
 80066b6:	7f7a      	ldrb	r2, [r7, #29]
 80066b8:	f107 0120 	add.w	r1, r7, #32
 80066bc:	440a      	add	r2, r1
 80066be:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80066c2:	fb02 f303 	mul.w	r3, r2, r3
 80066c6:	7f7a      	ldrb	r2, [r7, #29]
 80066c8:	f107 0120 	add.w	r1, r7, #32
 80066cc:	440a      	add	r2, r1
 80066ce:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80066d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80066de:	bf00      	nop
 80066e0:	3724      	adds	r7, #36	; 0x24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	08006764 	.word	0x08006764
 80066f0:	0800676c 	.word	0x0800676c

080066f4 <__libc_init_array>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	4e0d      	ldr	r6, [pc, #52]	; (800672c <__libc_init_array+0x38>)
 80066f8:	4c0d      	ldr	r4, [pc, #52]	; (8006730 <__libc_init_array+0x3c>)
 80066fa:	1ba4      	subs	r4, r4, r6
 80066fc:	10a4      	asrs	r4, r4, #2
 80066fe:	2500      	movs	r5, #0
 8006700:	42a5      	cmp	r5, r4
 8006702:	d109      	bne.n	8006718 <__libc_init_array+0x24>
 8006704:	4e0b      	ldr	r6, [pc, #44]	; (8006734 <__libc_init_array+0x40>)
 8006706:	4c0c      	ldr	r4, [pc, #48]	; (8006738 <__libc_init_array+0x44>)
 8006708:	f000 f820 	bl	800674c <_init>
 800670c:	1ba4      	subs	r4, r4, r6
 800670e:	10a4      	asrs	r4, r4, #2
 8006710:	2500      	movs	r5, #0
 8006712:	42a5      	cmp	r5, r4
 8006714:	d105      	bne.n	8006722 <__libc_init_array+0x2e>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800671c:	4798      	blx	r3
 800671e:	3501      	adds	r5, #1
 8006720:	e7ee      	b.n	8006700 <__libc_init_array+0xc>
 8006722:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006726:	4798      	blx	r3
 8006728:	3501      	adds	r5, #1
 800672a:	e7f2      	b.n	8006712 <__libc_init_array+0x1e>
 800672c:	0800678c 	.word	0x0800678c
 8006730:	0800678c 	.word	0x0800678c
 8006734:	0800678c 	.word	0x0800678c
 8006738:	08006790 	.word	0x08006790

0800673c <memset>:
 800673c:	4402      	add	r2, r0
 800673e:	4603      	mov	r3, r0
 8006740:	4293      	cmp	r3, r2
 8006742:	d100      	bne.n	8006746 <memset+0xa>
 8006744:	4770      	bx	lr
 8006746:	f803 1b01 	strb.w	r1, [r3], #1
 800674a:	e7f9      	b.n	8006740 <memset+0x4>

0800674c <_init>:
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	bf00      	nop
 8006750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006752:	bc08      	pop	{r3}
 8006754:	469e      	mov	lr, r3
 8006756:	4770      	bx	lr

08006758 <_fini>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	bf00      	nop
 800675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675e:	bc08      	pop	{r3}
 8006760:	469e      	mov	lr, r3
 8006762:	4770      	bx	lr
